
CO2_Semaphore.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  000021e4  00002278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023a  0080019e  0080019e  00002316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000075da  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020ff  00000000  00000000  00009e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032c0  00000000  00000000  0000bf01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000093c  00000000  00000000  0000f1c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002277  00000000  00000000  0000fb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002659  00000000  00000000  00011d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  000143d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__ctors_end>
       4:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__vector_1>
       8:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
       c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      10:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      18:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      1c:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <__vector_7>
      20:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      24:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      28:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      2c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      30:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      34:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      38:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      3c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      40:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      44:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      48:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__vector_18>
      4c:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__vector_19>
      50:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      54:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      58:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      5c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      60:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__vector_24>
      64:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      68:	38 08       	sbc	r3, r8
      6a:	5c 06       	cpc	r5, r28
      6c:	66 06       	cpc	r6, r22
      6e:	93 06       	cpc	r9, r19
      70:	9c 06       	cpc	r9, r28
      72:	c1 06       	cpc	r12, r17
      74:	d3 06       	cpc	r13, r19
      76:	0d 07       	cpc	r16, r29
      78:	cc 0d       	add	r28, r12
      7a:	d7 0c       	add	r13, r7
      7c:	df 0c       	add	r13, r15
      7e:	f1 0c       	add	r15, r1
      80:	0a 0d       	add	r16, r10
      82:	1b 0d       	add	r17, r11
      84:	35 0d       	add	r19, r5
      86:	65 0d       	add	r22, r5
      88:	76 0d       	add	r23, r6
      8a:	81 0d       	add	r24, r1
      8c:	91 0d       	add	r25, r1

0000008e <__trampolines_end>:
      8e:	21 00       	.word	0x0021	; ????

00000090 <cmd_get_data>:
      90:	ff 01 86 00 00 00 00 00 79                          ........y

00000099 <cmd_set_abc>:
      99:	ff 01 79 00 00 00 00 00 86                          ..y......

000000a2 <cmd_set_range>:
      a2:	ff 01 99 00 00 00 13 88 cb                          .........

000000ab <Null_Menu>:
	...

000000b6 <cc_char_space>:
      b6:	20 20 20 26 20 20 20 26 20 20 20 24 00                 &   &   $.

000000c3 <cc_char_colon>:
      c3:	20 20 20 26 20 02 20 26 20 02 20 24 00                 & . & . $.

000000d0 <cc_char_f>:
      d0:	05 02 01 26 ff 02 20 26 04 20 20 24 00              ...&.. &.  $.

000000dd <cc_char_e>:
      dd:	05 02 01 26 ff 02 20 26 04 02 03 24 00              ...&.. &...$.

000000ea <cc_char_d>:
      ea:	06 02 06 26 ff 20 ff 26 03 02 03 24 00              ...&. .&...$.

000000f7 <cc_char_c>:
      f7:	05 02 01 26 ff 20 20 26 04 02 03 24 00              ...&.  &...$.

00000104 <cc_char_b>:
     104:	05 02 06 26 ff 02 07 26 04 02 03 24 00              ...&...&...$.

00000111 <cc_char_a>:
     111:	05 02 06 26 ff 02 ff 26 04 20 03 24 00              ...&...&. .$.

0000011e <cc_char_9>:
     11e:	05 02 06 26 04 02 ff 26 04 02 03 24 00              ...&...&...$.

0000012b <cc_char_8>:
     12b:	05 02 06 26 ff 02 ff 26 04 02 03 24 00              ...&...&...$.

00000138 <cc_char_7>:
     138:	00 02 06 26 20 05 03 26 20 04 20 24 00              ...& ..& . $.

00000145 <cc_char_6>:
     145:	05 02 01 26 ff 02 06 26 04 02 03 24 00              ...&...&...$.

00000152 <cc_char_5>:
     152:	05 02 01 26 04 02 06 26 04 02 03 24 00              ...&...&...$.

0000015f <cc_char_4>:
     15f:	05 20 06 26 04 02 ff 26 20 20 03 24 00              . .&...&  .$.

0000016c <cc_char_3>:
     16c:	00 02 06 26 20 02 06 26 04 02 03 24 00              ...& ..&...$.

00000179 <cc_char_2>:
     179:	00 02 06 26 05 02 03 26 04 02 03 24 00              ...&...&...$.

00000186 <cc_char_1>:
     186:	00 ff fe 26 20 ff 20 26 04 02 03 24 00              ...& . &...$.

00000193 <cc_char_0>:
     193:	05 02 06 26 ff 20 ff 26 04 02 03 24 00              ...&. .&...$.

000001a0 <cc_smb8>:
     1a0:	18 1c 1e 1f 1f 1e 1c 18                             ........

000001a8 <cc_smb7>:
     1a8:	18 1e 1e 1f 1f 1f 1f 1f                             ........

000001b0 <cc_smb6>:
     1b0:	03 0f 0f 1f 1f 1f 1f 1f                             ........

000001b8 <cc_smb5>:
     1b8:	1f 0f 0f 03 00 00 00 00                             ........

000001c0 <cc_smb4>:
     1c0:	1f 1e 1e 18 00 00 00 00                             ........

000001c8 <cc_smb3>:
     1c8:	1f 1f 1f 1f 00 00 00 00                             ........

000001d0 <cc_smb2>:
     1d0:	18 1e 1e 1f 00 00 00 00                             ........

000001d8 <cc_smb1>:
     1d8:	03 0f 0f 1f 00 00 00 00                             ........

000001e0 <pow5Table16>:
     1e0:	10 27 e8 03 64 00 0a 00 01 00                       .'..d.....

000001ea <pow3Table8>:
     1ea:	64 0a 01                                            d..

000001ed <m_s5i4>:
     1ed:	ab 00 f8 01 19 02 ab 00 00 e0 02                    ...........

000001f8 <m_s5i3>:
     1f8:	ed 01 03 02 19 02 ab 00 00 ef 02                    ...........

00000203 <m_s5i2>:
     203:	f8 01 0e 02 19 02 ab 00 00 01 03                    ...........

0000020e <m_s5i1>:
     20e:	03 02 ab 00 19 02 a8 02 00 d0 02                    ...........

00000219 <m_s1i3>:
     219:	ab 00 9d 02 ab 00 0e 02 00 0b 03                    ...........

00000224 <m_s2i4>:
     224:	ab 00 50 02 9d 02 ab 00 00 16 03                    ..P........

0000022f <m_s4i3>:
     22f:	ab 00 3a 02 50 02 ab 00 00 24 03                    ..:.P....$.

0000023a <m_s4i2>:
     23a:	2f 02 45 02 50 02 ab 00 00 31 03                    /.E.P....1.

00000245 <m_s4i1>:
     245:	3a 02 ab 00 50 02 92 02 00 d0 02                    :...P......

00000250 <m_s2i3>:
     250:	24 02 87 02 9d 02 45 02 00 3e 03                    $.....E..>.

0000025b <m_s3i4>:
     25b:	ab 00 66 02 87 02 ab 00 00 44 03                    ..f......D.

00000266 <m_s3i3>:
     266:	5b 02 71 02 87 02 ab 00 00 50 03                    [.q......P.

00000271 <m_s3i2>:
     271:	66 02 7c 02 87 02 ab 00 00 5b 03                    f.|......[.

0000027c <m_s3i1>:
     27c:	71 02 ab 00 87 02 92 02 00 d0 02                    q..........

00000287 <m_s2i2>:
     287:	50 02 92 02 9d 02 7c 02 00 66 03                    P.....|..f.

00000292 <m_s2i1>:
     292:	87 02 ab 00 9d 02 a8 02 00 d0 02                    ...........

0000029d <m_s1i2>:
     29d:	19 02 a8 02 ab 00 92 02 00 6c 03                    .........l.

000002a8 <m_s1i1>:
     2a8:	9d 02 ab 00 ab 00 ab 00 01 d4 02                    ...........

000002b3 <strNULL>:
	...

000002b4 <LNG_SUNDAY>:
     2b4:	53 75 6e 00                                         Sun.

000002b8 <LNG_SATURDAY>:
     2b8:	53 61 74 00                                         Sat.

000002bc <LNG_FRIDAY>:
     2bc:	46 72 69 00                                         Fri.

000002c0 <LNG_THURSDAY>:
     2c0:	54 68 75 00                                         Thu.

000002c4 <LNG_WEDNESDAY>:
     2c4:	57 65 64 00                                         Wed.

000002c8 <LNG_TUESDAY>:
     2c8:	54 75 65 00                                         Tue.

000002cc <LNG_MONDAY>:
     2cc:	4d 6f 6e 00                                         Mon.

000002d0 <LNG_MENU_ITEM_UP>:
     2d0:	2a 55 70 00                                         *Up.

000002d4 <LNG_MENU_ITEM_MAIN_SCREEN>:
     2d4:	4d 61 69 6e 20 73 63 72 65 65 6e 00                 Main screen.

000002e0 <LNG_MENU_ITEM_MONITORING_H>:
     2e0:	48 75 6d 69 64 69 74 79 20 47 72 61 70 68 00        Humidity Graph.

000002ef <LNG_MENU_ITEM_MONITORING_T>:
     2ef:	54 65 6d 70 65 72 61 74 75 72 65 20 47 72 61 70     Temperature Grap
     2ff:	68 00                                               h.

00000301 <LNG_MENU_ITEM_MONITORING_CO2>:
     301:	43 4f 32 20 47 72 61 70 68 00                       CO2 Graph.

0000030b <LNG_MENU_ITEM_MONITORING>:
     30b:	4d 6f 6e 69 74 6f 72 69 6e 67 00                    Monitoring.

00000316 <LNG_MENU_ITEM_SETTINGS_LCD_BACKLIGHT>:
     316:	4c 43 44 20 42 61 63 6b 6c 69 67 68 74 00           LCD Backlight.

00000324 <LNG_MENU_ITEM_SETTINGS_ALARM_BUZZER>:
     324:	42 75 7a 7a 65 72 20 73 65 74 75 70 00              Buzzer setup.

00000331 <LNG_MENU_ITEM_SETTINGS_ALARM_LEVELS>:
     331:	4c 65 76 65 6c 73 20 73 65 74 75 70 00              Levels setup.

0000033e <LNG_MENU_ITEM_SETTINGS_ALARM>:
     33e:	41 6c 61 72 6d 00                                   Alarm.

00000344 <LNG_MENU_ITEM_SETTINGS_CLOCK_TIME_CAL>:
     344:	43 61 6c 69 62 72 61 74 69 6f 6e 00                 Calibration.

00000350 <LNG_MENU_ITEM_SETTINGS_CLOCK_TIME_DATE>:
     350:	44 61 74 65 20 73 65 74 75 70 00                    Date setup.

0000035b <LNG_MENU_ITEM_SETTINGS_CLOCK_TIME_SETUP>:
     35b:	54 69 6d 65 20 73 65 74 75 70 00                    Time setup.

00000366 <LNG_MENU_ITEM_SETTINGS_CLOCK>:
     366:	43 6c 6f 63 6b 00                                   Clock.

0000036c <LNG_MENU_ITEM_SETTINGS>:
     36c:	53 65 74 74 69 6e 67 73 00                          Settings.

00000375 <LNG_OK>:
     375:	4f 4b 00                                            OK.

00000378 <LNG_FAIL>:
     378:	46 41 49 4c 00                                      FAIL.

0000037d <LNG_SMB_SPACE>:
     37d:	20 00                                                .

0000037f <LNG_SMB_MINUS>:
     37f:	2d 00                                               -.

00000381 <LNG_SMB_POINT>:
     381:	2e 00                                               ..

00000383 <LNG_SMB_COLON>:
     383:	3a 00                                               :.

00000385 <LNG_SMB_ANGLE_BRACKET_RIGHT>:
     385:	3e 00                                               >.

00000387 <LNG_DM_MAIN_S4>:
     387:	20 20 20 df 43 20 20 20 20 25 20 20 20 20 20 20        .C    %      
     397:	20 70 70 6d 00                                       ppm.

0000039c <LNG_DM1_S4>:
     39c:	20 2d 3e 20 43 4f 32 20 2e 2e 2e 00                  -> CO2 ....

000003a8 <LNG_DM1_S3>:
     3a8:	20 2d 3e 20 44 48 54 20 2e 2e 2e 0d 0a 00            -> DHT ......

000003b6 <LNG_DM1_S2>:
     3b6:	20 2d 3e 20 52 54 43 20 2e 2e 2e 0d 0a 00            -> RTC ......

000003c4 <LNG_DM1_S1>:
     3c4:	50 65 72 69 70 68 65 72 61 6c 20 70 72 65 73 65     Peripheral prese
     3d4:	6e 63 65 3a 0d 0a 00                                nce:...

000003db <LNG_SW_VERSION>:
     3db:	53 57 3a 20 31 2e 30 00                             SW: 1.0.

000003e3 <LNG_HW_VERSION>:
     3e3:	48 57 3a 20 31 2e 30 00                             HW: 1.0.

000003eb <LNG_SPLASH_LOGO_S4>:
     3eb:	53 45 4d 41 50 48 4f 52 45 00                       SEMAPHORE.

000003f5 <LNG_SPLASH_LOGO_S1_1>:
     3f5:	32 00                                               2.

000003f7 <LNG_SPLASH_LOGO_S1>:
     3f7:	43 30 00                                            C0.

000003fa <__ctors_end>:
     3fa:	11 24       	eor	r1, r1
     3fc:	1f be       	out	0x3f, r1	; 63
     3fe:	cf ef       	ldi	r28, 0xFF	; 255
     400:	d8 e0       	ldi	r29, 0x08	; 8
     402:	de bf       	out	0x3e, r29	; 62
     404:	cd bf       	out	0x3d, r28	; 61

00000406 <__do_copy_data>:
     406:	11 e0       	ldi	r17, 0x01	; 1
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b1 e0       	ldi	r27, 0x01	; 1
     40c:	e4 ee       	ldi	r30, 0xE4	; 228
     40e:	f1 e2       	ldi	r31, 0x21	; 33
     410:	02 c0       	rjmp	.+4      	; 0x416 <__do_copy_data+0x10>
     412:	05 90       	lpm	r0, Z+
     414:	0d 92       	st	X+, r0
     416:	ae 39       	cpi	r26, 0x9E	; 158
     418:	b1 07       	cpc	r27, r17
     41a:	d9 f7       	brne	.-10     	; 0x412 <__do_copy_data+0xc>

0000041c <__do_clear_bss>:
     41c:	23 e0       	ldi	r18, 0x03	; 3
     41e:	ae e9       	ldi	r26, 0x9E	; 158
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	01 c0       	rjmp	.+2      	; 0x426 <.do_clear_bss_start>

00000424 <.do_clear_bss_loop>:
     424:	1d 92       	st	X+, r1

00000426 <.do_clear_bss_start>:
     426:	a8 3d       	cpi	r26, 0xD8	; 216
     428:	b2 07       	cpc	r27, r18
     42a:	e1 f7       	brne	.-8      	; 0x424 <.do_clear_bss_loop>
     42c:	0e 94 1f 10 	call	0x203e	; 0x203e <main>
     430:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <_exit>

00000434 <__bad_interrupt>:
     434:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000438 <DoNothing>:
	}
}


void DoNothing(void)
{
     438:	08 95       	ret

0000043a <I2C_TWIService>:
/************************************************************************/
/* FUNCTIONS                                                            */
/************************************************************************/
inline void I2C_TWIService(void)
{
	switch(TWSR & 0xF8) {
     43a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     43e:	88 7f       	andi	r24, 0xF8	; 248
     440:	88 32       	cpi	r24, 0x28	; 40
     442:	09 f4       	brne	.+2      	; 0x446 <I2C_TWIService+0xc>
     444:	5e c0       	rjmp	.+188    	; 0x502 <I2C_TWIService+0xc8>
     446:	70 f4       	brcc	.+28     	; 0x464 <I2C_TWIService+0x2a>
     448:	80 31       	cpi	r24, 0x10	; 16
     44a:	91 f1       	breq	.+100    	; 0x4b0 <I2C_TWIService+0x76>
     44c:	28 f4       	brcc	.+10     	; 0x458 <I2C_TWIService+0x1e>
     44e:	88 23       	and	r24, r24
     450:	f1 f0       	breq	.+60     	; 0x48e <I2C_TWIService+0x54>
     452:	88 30       	cpi	r24, 0x08	; 8
     454:	31 f1       	breq	.+76     	; 0x4a2 <I2C_TWIService+0x68>
     456:	08 95       	ret
     458:	88 31       	cpi	r24, 0x18	; 24
     45a:	d1 f1       	breq	.+116    	; 0x4d0 <I2C_TWIService+0x96>
     45c:	80 32       	cpi	r24, 0x20	; 32
     45e:	09 f4       	brne	.+2      	; 0x462 <I2C_TWIService+0x28>
     460:	41 c0       	rjmp	.+130    	; 0x4e4 <I2C_TWIService+0xaa>
     462:	08 95       	ret
     464:	80 34       	cpi	r24, 0x40	; 64
     466:	09 f4       	brne	.+2      	; 0x46a <I2C_TWIService+0x30>
     468:	a9 c0       	rjmp	.+338    	; 0x5bc <I2C_TWIService+0x182>
     46a:	38 f4       	brcc	.+14     	; 0x47a <I2C_TWIService+0x40>
     46c:	80 33       	cpi	r24, 0x30	; 48
     46e:	09 f4       	brne	.+2      	; 0x472 <I2C_TWIService+0x38>
     470:	89 c0       	rjmp	.+274    	; 0x584 <I2C_TWIService+0x14a>
     472:	88 33       	cpi	r24, 0x38	; 56
     474:	09 f4       	brne	.+2      	; 0x478 <I2C_TWIService+0x3e>
     476:	92 c0       	rjmp	.+292    	; 0x59c <I2C_TWIService+0x162>
     478:	08 95       	ret
     47a:	80 35       	cpi	r24, 0x50	; 80
     47c:	09 f4       	brne	.+2      	; 0x480 <I2C_TWIService+0x46>
     47e:	a1 c0       	rjmp	.+322    	; 0x5c2 <I2C_TWIService+0x188>
     480:	88 35       	cpi	r24, 0x58	; 88
     482:	09 f4       	brne	.+2      	; 0x486 <I2C_TWIService+0x4c>
     484:	ba c0       	rjmp	.+372    	; 0x5fa <I2C_TWIService+0x1c0>
     486:	88 34       	cpi	r24, 0x48	; 72
     488:	09 f0       	breq	.+2      	; 0x48c <I2C_TWIService+0x52>
     48a:	d0 c0       	rjmp	.+416    	; 0x62c <I2C_TWIService+0x1f2>
     48c:	2b c0       	rjmp	.+86     	; 0x4e4 <I2C_TWIService+0xaa>

		// Bus error due to an illegal START or STOP condition
		case I2C_STATE_M_BUS_FAIL: {
			// Set I2C Error
			i2c.error = I2C_ERROR_BUS_FAIL;
     48e:	84 e0       	ldi	r24, 0x04	; 4
     490:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <i2c+0x5>
			// Set TWI register flags
			TWCR	=	0<<TWSTA |					// Not START
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						1<<TWINT |					// Flush TWI interrupt flag
						I2C_SLAVE_MODE<<TWEA |		// Enable ACK if SLAVE mode enabled
						1<<TWEN |					// Enable TWI operation
						1<<TWIE;					// Enable TWI interrupt
			// Flush I2C busy flag
			i2c._busy = 0;
     49a:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <i2c>
			// Set I2C error flag
			i2c._error = 1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	29 c0       	rjmp	.+82     	; 0x4f4 <I2C_TWIService+0xba>
		}

		// A START condition has been transmitted
		case I2C_STATE_M_START: {
			// Set R/W flag by mode
			if(i2c.transmit_type == I2C_TRANSMIT_TYPE_SARP) {
     4a2:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <i2c+0x4>
     4a6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <i2c+0x6>
     4aa:	91 11       	cpse	r25, r1
     4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <I2C_TWIService+0x86>
     4ae:	06 c0       	rjmp	.+12     	; 0x4bc <I2C_TWIService+0x82>
		}

		// A repeated START condition has been transmitted
		case I2C_STATE_M_RESTART: {
			// Set R/W flag by mode
			if(i2c.transmit_type == I2C_TRANSMIT_TYPE_SAWSARP) {
     4b0:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <i2c+0x4>
     4b4:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <i2c+0x6>
     4b8:	92 30       	cpi	r25, 0x02	; 2
     4ba:	11 f4       	brne	.+4      	; 0x4c0 <I2C_TWIService+0x86>
				// Set to 1(W) lower bit in address - READ MODE
				i2c.master.slave_addr |= 0x01;
     4bc:	81 60       	ori	r24, 0x01	; 1
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <I2C_TWIService+0x88>
				} else {
				// Set to 0(R) lower bit in address - WRITE MODE
				i2c.master.slave_addr &= 0xFE;
     4c0:	8e 7f       	andi	r24, 0xFE	; 254
     4c2:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <i2c+0x6>
			}
			// Set SLAVE address
			TWDR = i2c.master.slave_addr;
     4c6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <i2c+0x6>
     4ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     4ce:	56 c0       	rjmp	.+172    	; 0x57c <I2C_TWIService+0x142>
		}

		// SLA+W has been transmitted; ACK has been received
		case I2C_STATE_M_SLA_W_ACK: {
			// Prepare and send data by mode
			if(i2c.page.q_length) { // <- Need to send start page address word
     4d0:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <i2c+0x2e>
     4d4:	91 11       	cpse	r25, r1
     4d6:	3e c0       	rjmp	.+124    	; 0x554 <I2C_TWIService+0x11a>
				TWDR = i2c.page.buff[i2c.page.p_buff];
				// Increment page address buffer and control overflow
				if(i2c.page.p_buff++ >= I2C_PAGE_WORD_LENGTH) i2c.page.p_buff=0;
				// Decrement page address queue
				i2c.page.q_length--;
				} else if(i2c.master.q_length) { // <- Directly send data
     4d8:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <i2c+0xa>
     4dc:	91 11       	cpse	r25, r1
     4de:	1e c0       	rjmp	.+60     	; 0x51c <I2C_TWIService+0xe2>
				// Decrement data byte counter queue
				i2c.master.q_length--;
				} else { // <- Another state is wrong - send STOP
				//> The byte is last
				// Set TWI register flags
				TWCR	=	0<<TWSTA |					// Not START
     4e0:	85 e9       	ldi	r24, 0x95	; 149
     4e2:	88 c0       	rjmp	.+272    	; 0x5f4 <I2C_TWIService+0x1ba>
		}

		// SLA+W has been transmitted; NOT ACK has been received
		case I2C_STATE_M_SLA_W_NACK: {
			// Set I2C Error
			i2c.error = I2C_ERROR_DEVICE_NOT_FOUND;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <i2c+0x5>
			// Set TWI register flags
			TWCR	=	0<<TWSTA |							// Not START
     4ea:	95 e9       	ldi	r25, 0x95	; 149
     4ec:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						1<<TWINT |							// Flush TWI interrupt flag
						I2C_SLAVE_MODE<<TWEA |				// Enable ACK if SLAVE mode enabled
						1<<TWEN |							// Enable TWI operation
						1<<TWIE;							// Enable TWI interrupt
			// Flush I2C busy flag
			i2c._busy = 0;
     4f0:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <i2c>
			// Set I2C error flag
			i2c._error = 1;
     4f4:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <i2c+0x2>
			// Run error handling process
			I2C_PROC_ERROR_OUT();
     4f8:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <i2c+0x2b>
     4fc:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <i2c+0x2c>
     500:	94 c0       	rjmp	.+296    	; 0x62a <I2C_TWIService+0x1f0>
		}

		// Data byte has been transmitted to slave; ACK has been received
		case I2C_STATE_M_BYTE_ACK: {
			// Prepare and send data by mode
			if(i2c.transmit_type == I2C_TRANSMIT_TYPE_SAWP) {
     502:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <i2c+0x4>
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	f1 f4       	brne	.+60     	; 0x546 <I2C_TWIService+0x10c>
				// If all data was transmitted
				if(i2c.page.q_length == 0 && i2c.master.q_length == 0) { // <- Send STOP condition
     50a:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <i2c+0x2e>
     50e:	91 11       	cpse	r25, r1
     510:	21 c0       	rjmp	.+66     	; 0x554 <I2C_TWIService+0x11a>
     512:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <i2c+0xa>
     516:	99 23       	and	r25, r25
     518:	09 f4       	brne	.+2      	; 0x51c <I2C_TWIService+0xe2>
     51a:	7c c0       	rjmp	.+248    	; 0x614 <I2C_TWIService+0x1da>
					// Decrement page address queue
					i2c.page.q_length--;
				} else if(i2c.master.q_length) { // <- Send next data byte
					//> The byte is not last
					// Load data from buffer to I2C output register
					TWDR = i2c.master.tx_buff[i2c.master.p_buff];
     51c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <i2c+0x7>
     520:	e8 2f       	mov	r30, r24
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	e7 51       	subi	r30, 0x17	; 23
     526:	fe 4f       	sbci	r31, 0xFE	; 254
     528:	23 85       	ldd	r18, Z+11	; 0x0b
     52a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
					// Increment buffer send index and control overflow
					if(i2c.master.p_buff++ >= I2C_M_LENGTH_TX_BUFFER) i2c.master.p_buff = 0;
     52e:	84 31       	cpi	r24, 0x14	; 20
     530:	20 f4       	brcc	.+8      	; 0x53a <I2C_TWIService+0x100>
     532:	8f 5f       	subi	r24, 0xFF	; 255
     534:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <i2c+0x7>
     538:	02 c0       	rjmp	.+4      	; 0x53e <I2C_TWIService+0x104>
     53a:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <i2c+0x7>
					// Decrement data byte counter queue
					i2c.master.q_length--;
     53e:	91 50       	subi	r25, 0x01	; 1
     540:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <i2c+0xa>
     544:	1b c0       	rjmp	.+54     	; 0x57c <I2C_TWIService+0x142>
							I2C_SLAVE_MODE<<TWEA |		// Enable ACK if SLAVE mode enabled
							1<<TWEN |					// Enable TWI operation
							1<<TWIE;					// Enable TWI interrupt
			}
			// Prepare and send data by mode
			if(i2c.transmit_type == I2C_TRANSMIT_TYPE_SAWSARP) {
     546:	82 30       	cpi	r24, 0x02	; 2
     548:	09 f0       	breq	.+2      	; 0x54c <I2C_TWIService+0x112>
     54a:	70 c0       	rjmp	.+224    	; 0x62c <I2C_TWIService+0x1f2>
				// Send page address by page address byte count
				if(i2c.page.q_length) {
     54c:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <i2c+0x2e>
     550:	99 23       	and	r25, r25
     552:	b1 f0       	breq	.+44     	; 0x580 <I2C_TWIService+0x146>
					//> The page address byte was not last
					// Load page address from page address buffer to I2C output register
					TWDR = i2c.page.buff[i2c.page.p_buff];
     554:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <i2c+0x2d>
     558:	e8 2f       	mov	r30, r24
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	e7 51       	subi	r30, 0x17	; 23
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	27 a5       	ldd	r18, Z+47	; 0x2f
     562:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
					// Increment page address buffer
					if(i2c.page.p_buff++ >= I2C_PAGE_WORD_LENGTH) i2c.page.p_buff=0;
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	20 f4       	brcc	.+8      	; 0x572 <I2C_TWIService+0x138>
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <i2c+0x2d>
     570:	02 c0       	rjmp	.+4      	; 0x576 <I2C_TWIService+0x13c>
     572:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <i2c+0x2d>
					// Decrement page address queue
					i2c.page.q_length--;
     576:	91 50       	subi	r25, 0x01	; 1
     578:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <i2c+0x2e>
					// Set TWI register flags
					TWCR	=	0<<TWSTA |					// Not START
     57c:	85 e8       	ldi	r24, 0x85	; 133
     57e:	3a c0       	rjmp	.+116    	; 0x5f4 <I2C_TWIService+0x1ba>
								1<<TWEN |					// Enable TWI operation
								1<<TWIE;					// Enable TWI interrupt
				} else {
					//> Last byte of page address was send
					// Set TWI register flags
					TWCR	=	1<<TWSTA |					// Set RESTART condition
     580:	85 ea       	ldi	r24, 0xA5	; 165
     582:	38 c0       	rjmp	.+112    	; 0x5f4 <I2C_TWIService+0x1ba>
		}

		// Data byte has been transmitted; NOT ACK has been received
		case I2C_STATE_M_BYTE_NACK: {
			// Set I2C Error
			i2c.error = I2C_ERROR_RECEIVED_NACK;
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <i2c+0x5>
			// Set TWI register flags
			TWCR	=	0<<TWSTA |							// Not START
     58a:	85 e9       	ldi	r24, 0x95	; 149
     58c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						1<<TWINT |							// Flush TWI interrupt flag
						I2C_SLAVE_MODE<<TWEA |				// Enable ACK if SLAVE mode enabled
						1<<TWEN |							// Enable TWI operation
						1<<TWIE;							// Enable TWI interrupt
			// Flush I2C busy flag
			i2c._busy = 0;
     590:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <i2c>
			// Set I2C error flag
			i2c._error = 1;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <i2c+0x2>
     59a:	43 c0       	rjmp	.+134    	; 0x622 <I2C_TWIService+0x1e8>
		}

		// Arbitration lost in SLA+W or data bytes
		case I2C_STATE_M_COLLISION: {
			// Set I2C Error
			i2c.error = I2C_ERROR_LOW_PRIORITY;
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <i2c+0x5>
			// Flush buffer pointers
			i2c.master.p_buff = 0;
     5a2:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <i2c+0x7>
			i2c.page.p_buff = 0;
     5a6:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <i2c+0x2d>
			// Set TWI register flags
			TWCR	=	1<<TWSTA |							// Set START condition
     5aa:	85 ea       	ldi	r24, 0xA5	; 165
     5ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						1<<TWINT |							// Flush TWI interrupt flag
						I2C_SLAVE_MODE<<TWEA |				// Enable ACK if SLAVE mode enabled
						1<<TWEN |							// Enable TWI operation
						1<<TWIE;							// Enable TWI interrupt
			// Flush I2C busy flag
			i2c._busy = 0;
     5b0:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <i2c>
			// Set I2C error flag
			i2c._error = 1;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <i2c+0x2>
			break;
     5ba:	08 95       	ret
		}

		// SLA+R has been transmitted; ACK has been received
		case I2C_STATE_M_SLA_R_ACK: {
			// If next byte will be last for receive
			if(i2c.master.q_length == 1) {
     5bc:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <i2c+0xa>
     5c0:	16 c0       	rjmp	.+44     	; 0x5ee <I2C_TWIService+0x1b4>
		}

		// Data byte has been received by master; ACK has been returned
		case I2C_STATE_M_RECEIVE_BYTE: {
			// Store received byte into buffer
			i2c.master.rx_buff[i2c.master.p_buff] = TWDR;
     5c2:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <i2c+0x7>
     5c6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5ca:	e8 2f       	mov	r30, r24
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	e7 51       	subi	r30, 0x17	; 23
     5d0:	fe 4f       	sbci	r31, 0xFE	; 254
     5d2:	97 8f       	std	Z+31, r25	; 0x1f
			// Increment buffer index
			if(i2c.master.p_buff++ >= I2C_M_LENGTH_RX_BUFFER) i2c.master.p_buff = 0;
     5d4:	8a 30       	cpi	r24, 0x0A	; 10
     5d6:	20 f4       	brcc	.+8      	; 0x5e0 <I2C_TWIService+0x1a6>
     5d8:	8f 5f       	subi	r24, 0xFF	; 255
     5da:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <i2c+0x7>
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <I2C_TWIService+0x1aa>
     5e0:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <i2c+0x7>
			// Decrement receive queue counter
			i2c.master.q_length--;
     5e4:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <i2c+0xa>
     5e8:	81 50       	subi	r24, 0x01	; 1
     5ea:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <i2c+0xa>
			// Receive next byte with ACK/NACK state
			if(i2c.master.q_length == 1) {
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	29 f2       	breq	.-118    	; 0x57c <I2C_TWIService+0x142>
							1<<TWEN |						// Enable TWI operation
							1<<TWIE;						// Enable TWI interrupt
			} else {
				//> Next byte will not be last for receive
				// Set TWI register flags
				TWCR	=	0<<TWSTA |						// Not START
     5f2:	85 ec       	ldi	r24, 0xC5	; 197
     5f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5f8:	08 95       	ret
		}

		// Data byte has been received; NOT ACK has been returned
		case I2C_STATE_M_RECEIVE_BYTE_NACK: {
			// Store received byte into buffer
			i2c.master.rx_buff[i2c.master.p_buff] = TWDR;
     5fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5fe:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <i2c+0x7>
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	e7 51       	subi	r30, 0x17	; 23
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	87 8f       	std	Z+31, r24	; 0x1f
			// Decrement receive queue counter
			i2c.master.q_length--;
     60a:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <i2c+0xa>
     60e:	81 50       	subi	r24, 0x01	; 1
     610:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <i2c+0xa>
			// Set TWI register flags
			TWCR	=	0<<TWSTA |							// Not START
     614:	85 e9       	ldi	r24, 0x95	; 149
     616:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						1<<TWINT |							// Flush TWI interrupt flag
						I2C_SLAVE_MODE<<TWEA |				// Enable ACK if SLAVE mode enabled
						1<<TWEN |							// Enable TWI operation
						1<<TWIE;							// Enable TWI interrupt
			// Flush I2C busy flag
			i2c._busy = 0;
     61a:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <i2c>
			// Flush I2C error flag
			i2c._error = 0;
     61e:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <i2c+0x2>
			// Run normal handling process
			I2C_PROC_MASTER_OUT();
     622:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <i2c+0x29>
     626:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <i2c+0x2a>
     62a:	09 94       	ijmp
     62c:	08 95       	ret

0000062e <I2C_Init>:
}

void I2C_Init(void)
{
	// Enabling pull up resistors on port pins
	I2C_PORT |= 1<<I2C_PIN_SCL|1<<I2C_PIN_SDA;
     62e:	88 b1       	in	r24, 0x08	; 8
     630:	80 63       	ori	r24, 0x30	; 48
     632:	88 b9       	out	0x08, r24	; 8
	I2C_DDR &= ~(1<<I2C_PIN_SCL|1<<I2C_PIN_SDA);
     634:	87 b1       	in	r24, 0x07	; 7
     636:	8f 7c       	andi	r24, 0xCF	; 207
     638:	87 b9       	out	0x07, r24	; 7
	// Setup I2C bit rate
	TWBR = I2C_TWBR_VALUE;
     63a:	85 e0       	ldi	r24, 0x05	; 5
     63c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR = I2C_TWSR_VALUE;
     640:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     644:	08 95       	ret

00000646 <I2C_RequestFrom>:
}

uint8_t I2C_RequestFrom(uint8_t addr, uint8_t length, uint8_t word_length, uint16_t word_addr)
{
	// Check last request buffer processed
	if(i2c._rx_lock) return 0;
     646:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <i2c+0x1>
     64a:	91 11       	cpse	r25, r1
     64c:	31 c0       	rjmp	.+98     	; 0x6b0 <I2C_RequestFrom+0x6a>
	// Lock I2C to work with our byte
	i2c._busy = 1;
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <i2c>
	// Lock RX buffer
	i2c._rx_lock = 1;
     654:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <i2c+0x1>
	// Preparing page address word by his length
	if(word_length > 0) {
     658:	44 23       	and	r20, r20
     65a:	89 f0       	breq	.+34     	; 0x67e <I2C_RequestFrom+0x38>
		i2c.transmit_type = I2C_TRANSMIT_TYPE_SAWSARP;
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <i2c+0x4>
		if(word_length == 2) {
     662:	42 30       	cpi	r20, 0x02	; 2
     664:	29 f4       	brne	.+10     	; 0x670 <I2C_RequestFrom+0x2a>
			i2c.page.buff[0] = HI(word_addr);
     666:	30 93 18 02 	sts	0x0218, r19	; 0x800218 <i2c+0x2f>
			i2c.page.buff[1] = LO(word_addr);
     66a:	20 93 19 02 	sts	0x0219, r18	; 0x800219 <i2c+0x30>
     66e:	02 c0       	rjmp	.+4      	; 0x674 <I2C_RequestFrom+0x2e>
			} else {
			i2c.page.buff[0] = LO(word_addr);
     670:	20 93 18 02 	sts	0x0218, r18	; 0x800218 <i2c+0x2f>
		}
		// Flush page word buffer pointer
		i2c.page.p_buff = 0;
     674:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <i2c+0x2d>
		// Set page address word length
		i2c.page.q_length = word_length;
     678:	40 93 17 02 	sts	0x0217, r20	; 0x800217 <i2c+0x2e>
     67c:	02 c0       	rjmp	.+4      	; 0x682 <I2C_RequestFrom+0x3c>
	} else {
		i2c.transmit_type = I2C_TRANSMIT_TYPE_SARP;
     67e:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <i2c+0x4>
	}
	// Setup M41T00S slave I2C address
	i2c.master.slave_addr = addr;
     682:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <i2c+0x6>
	// Set asynchronous function state
	i2c.master.onSuccess = &DoNothing;
     686:	8c e1       	ldi	r24, 0x1C	; 28
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <i2c+0x2a>
     68e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <i2c+0x29>
	i2c.master.onError = &DoNothing;
     692:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <i2c+0x2c>
     696:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <i2c+0x2b>
	// Flush buffer pointer - nothing to transmit
	i2c.master.p_buff = 0;
     69a:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <i2c+0x7>
	// Flush read buffer pointer
	i2c.master.p_read = 0;
     69e:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <i2c+0x9>
	// Set RX queue length
	i2c.master.q_length = length;
     6a2:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <i2c+0xa>
	// Start transmitter with START
	TWCR = 	1<<TWSTA|						// Set START condition
     6a6:	85 ea       	ldi	r24, 0xA5	; 165
     6a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			1<<TWINT|						// Flush TWI interrupt flag
			I2C_SLAVE_MODE<<TWEA|			// Not ACK
			1<<TWEN|						// Enable TWI operation
			1<<TWIE;						// Enable TWI interrupt
	// Return 1 if buffer is clear
	return 1;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	08 95       	ret
}

uint8_t I2C_RequestFrom(uint8_t addr, uint8_t length, uint8_t word_length, uint16_t word_addr)
{
	// Check last request buffer processed
	if(i2c._rx_lock) return 0;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
			I2C_SLAVE_MODE<<TWEA|			// Not ACK
			1<<TWEN|						// Enable TWI operation
			1<<TWIE;						// Enable TWI interrupt
	// Return 1 if buffer is clear
	return 1;
}
     6b2:	08 95       	ret

000006b4 <I2C_TransmitTo>:

void I2C_TransmitTo(uint8_t *data, uint8_t addr, uint8_t length, uint8_t word_length, uint16_t word_addr)
{
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	dc 01       	movw	r26, r24
	// Store data for write to I2C write buffer
	uint8_t *p_data = (void *)data;
	// Flush write buffer pointer
	i2c.master.p_write=0;
     6ba:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <i2c+0x8>
	// Flush queue length
	i2c.master.q_length=0;
     6be:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <i2c+0xa>
	// Prepare data for transmit
	for(uint8_t i=length; i; i--) {
     6c2:	94 2f       	mov	r25, r20
     6c4:	99 23       	and	r25, r25
     6c6:	81 f0       	breq	.+32     	; 0x6e8 <I2C_TransmitTo+0x34>
		// Overflow control
		if(i2c.master.p_write >= I2C_M_LENGTH_TX_BUFFER) continue;
     6c8:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <i2c+0x8>
     6cc:	e4 31       	cpi	r30, 0x14	; 20
     6ce:	50 f4       	brcc	.+20     	; 0x6e4 <I2C_TransmitTo+0x30>
		// Store data into TX buffer
		i2c.master.tx_buff[i2c.master.p_write++] = *(p_data++);
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	8e 0f       	add	r24, r30
     6d4:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <i2c+0x8>
     6d8:	8c 91       	ld	r24, X
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	e7 51       	subi	r30, 0x17	; 23
     6de:	fe 4f       	sbci	r31, 0xFE	; 254
     6e0:	83 87       	std	Z+11, r24	; 0x0b
     6e2:	11 96       	adiw	r26, 0x01	; 1
	// Flush write buffer pointer
	i2c.master.p_write=0;
	// Flush queue length
	i2c.master.q_length=0;
	// Prepare data for transmit
	for(uint8_t i=length; i; i--) {
     6e4:	91 50       	subi	r25, 0x01	; 1
     6e6:	ee cf       	rjmp	.-36     	; 0x6c4 <I2C_TransmitTo+0x10>
		if(i2c.master.p_write >= I2C_M_LENGTH_TX_BUFFER) continue;
		// Store data into TX buffer
		i2c.master.tx_buff[i2c.master.p_write++] = *(p_data++);
	}
	// Lock I2C to work with our byte
	i2c._busy = 1;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <i2c>
	// Set I2C mode to SLA+R mode
	i2c.transmit_type = I2C_TRANSMIT_TYPE_SAWP;
     6ee:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <i2c+0x4>
	// Setup M41T00S slave I2C address
	i2c.master.slave_addr = addr;
     6f2:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <i2c+0x6>
	// Preparing page address word by his length
	if(word_length == 2) {
     6f6:	22 30       	cpi	r18, 0x02	; 2
     6f8:	29 f4       	brne	.+10     	; 0x704 <I2C_TransmitTo+0x50>
		i2c.page.buff[0] = HI(word_addr);
     6fa:	10 93 18 02 	sts	0x0218, r17	; 0x800218 <i2c+0x2f>
		i2c.page.buff[1] = LO(word_addr);
     6fe:	00 93 19 02 	sts	0x0219, r16	; 0x800219 <i2c+0x30>
     702:	02 c0       	rjmp	.+4      	; 0x708 <I2C_TransmitTo+0x54>
	} else {
		i2c.page.buff[0] = LO(word_addr);
     704:	00 93 18 02 	sts	0x0218, r16	; 0x800218 <i2c+0x2f>
	}
	// Flush page word buffer pointer
	i2c.page.p_buff = 0;
     708:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <i2c+0x2d>
	// Set page address word length
	i2c.page.q_length = word_length;
     70c:	20 93 17 02 	sts	0x0217, r18	; 0x800217 <i2c+0x2e>
	// Set asynchronous function state
	i2c.master.onSuccess = &DoNothing;
     710:	8c e1       	ldi	r24, 0x1C	; 28
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <i2c+0x2a>
     718:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <i2c+0x29>
	i2c.master.onError = &DoNothing;
     71c:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <i2c+0x2c>
     720:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <i2c+0x2b>
	// Flush buffer pointer - nothing to transmit
	i2c.master.p_buff = 0;
     724:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <i2c+0x7>
	// Set RX queue length
	i2c.master.q_length = length;
     728:	40 93 f3 01 	sts	0x01F3, r20	; 0x8001f3 <i2c+0xa>
	// Start transmitter with START
	TWCR = 	1<<TWSTA|						// Set START condition
     72c:	85 ea       	ldi	r24, 0xA5	; 165
     72e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			0<<TWSTO|						// Not STOP
			1<<TWINT|						// Flush TWI interrupt flag
			I2C_SLAVE_MODE<<TWEA|			// Not ACK
			1<<TWEN|						// Enable TWI operation
			1<<TWIE;						// Enable TWI interrupt
}
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <I2C_Read>:

uint8_t I2C_Read(void)
{
	// Flush RX lock flag
	i2c._rx_lock = 0;
     738:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <i2c+0x1>
	// Overflow control
	if(i2c.master.p_read >= I2C_M_LENGTH_RX_BUFFER) return 0;
     73c:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <i2c+0x9>
     740:	ea 30       	cpi	r30, 0x0A	; 10
     742:	48 f4       	brcc	.+18     	; 0x756 <I2C_Read+0x1e>
	// Return byte of RX buffer
	return i2c.master.rx_buff[i2c.master.p_read++];
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	8e 0f       	add	r24, r30
     748:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <i2c+0x9>
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	e7 51       	subi	r30, 0x17	; 23
     750:	fe 4f       	sbci	r31, 0xFE	; 254
     752:	87 8d       	ldd	r24, Z+31	; 0x1f
     754:	08 95       	ret
uint8_t I2C_Read(void)
{
	// Flush RX lock flag
	i2c._rx_lock = 0;
	// Overflow control
	if(i2c.master.p_read >= I2C_M_LENGTH_RX_BUFFER) return 0;
     756:	80 e0       	ldi	r24, 0x00	; 0
	// Return byte of RX buffer
	return i2c.master.rx_buff[i2c.master.p_read++];
}
     758:	08 95       	ret

0000075a <UART_SendDataFromFlash>:
	#else
	uint8_t		q_length=0;
	#endif

	// Disable UART UDRE Interrupt
	UART_TX_INTERRUPT_DISABLE();
     75a:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     75e:	2f 7d       	andi	r18, 0xDF	; 223
     760:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	q_length = uart.tx.q_length;
     764:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <uart+0x4>
	// Enable UART_UDRE Interrupt
	UART_TX_INTERRUPT_ENABLE();
     768:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     76c:	20 62       	ori	r18, 0x20	; 32
     76e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	if(data_length <= (UART_TX_BUFSIZE - q_length)) {
     772:	46 2f       	mov	r20, r22
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	24 e1       	ldi	r18, 0x14	; 20
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	27 1b       	sub	r18, r23
     77c:	31 09       	sbc	r19, r1
     77e:	24 17       	cp	r18, r20
     780:	35 07       	cpc	r19, r21
     782:	24 f1       	brlt	.+72     	; 0x7cc <UART_SendDataFromFlash+0x72>
     784:	fc 01       	movw	r30, r24
		while(data_length--) {
     786:	61 50       	subi	r22, 0x01	; 1
     788:	08 f1       	brcs	.+66     	; 0x7cc <UART_SendDataFromFlash+0x72>
			// Load char from FLASH string into TX buffer with offset
			uart.tx.buff[uart.tx.p_write++] = pgm_read_byte(data++);
     78a:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <uart+0x3>
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	9a 0f       	add	r25, r26
     792:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <uart+0x3>
     796:	84 91       	lpm	r24, Z
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	a6 5e       	subi	r26, 0xE6	; 230
     79c:	bd 4f       	sbci	r27, 0xFD	; 253
     79e:	15 96       	adiw	r26, 0x05	; 5
     7a0:	8c 93       	st	X, r24
			// Detect loop back in TX buffer offset
			if(uart.tx.p_write >= UART_TX_BUFSIZE) uart.tx.p_write=0;
     7a2:	94 31       	cpi	r25, 0x14	; 20
     7a4:	10 f0       	brcs	.+4      	; 0x7aa <UART_SendDataFromFlash+0x50>
     7a6:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <uart+0x3>
			UART_TX_INTERRUPT_DISABLE();
     7aa:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     7ae:	8f 7d       	andi	r24, 0xDF	; 223
     7b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
			// Increment TX queue counter length
			uart.tx.q_length++;
     7b4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <uart+0x4>
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <uart+0x4>
			UART_TX_INTERRUPT_ENABLE();
     7be:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     7c2:	80 62       	ori	r24, 0x20	; 32
     7c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     7c8:	31 96       	adiw	r30, 0x01	; 1
     7ca:	dd cf       	rjmp	.-70     	; 0x786 <UART_SendDataFromFlash+0x2c>
     7cc:	08 95       	ret

000007ce <UART_UDRE_TX_Service>:
}

/* ISR Service for UDRE interrupt */
void UART_UDRE_TX_Service(void)
{
	if(uart.tx.q_length) {
     7ce:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <uart+0x4>
     7d2:	88 23       	and	r24, r24
     7d4:	a1 f0       	breq	.+40     	; 0x7fe <UART_UDRE_TX_Service+0x30>
		// Copy char from TX buffer to UDR register
		UDR0 = uart.tx.buff[uart.tx.p_send++];
     7d6:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <uart+0x2>
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	9e 0f       	add	r25, r30
     7de:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <uart+0x2>
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	e6 5e       	subi	r30, 0xE6	; 230
     7e6:	fd 4f       	sbci	r31, 0xFD	; 253
     7e8:	25 81       	ldd	r18, Z+5	; 0x05
     7ea:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		// Detect loop back in TX sent offset
		if(uart.tx.p_send >= UART_TX_BUFSIZE) uart.tx.p_send=0;
     7ee:	94 31       	cpi	r25, 0x14	; 20
     7f0:	10 f0       	brcs	.+4      	; 0x7f6 <UART_UDRE_TX_Service+0x28>
     7f2:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <uart+0x2>
		// Decrement TX queue
		uart.tx.q_length--;
     7f6:	81 50       	subi	r24, 0x01	; 1
     7f8:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <uart+0x4>
     7fc:	08 95       	ret
	} else {
		UART_TX_INTERRUPT_DISABLE();
     7fe:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     802:	8f 7d       	andi	r24, 0xDF	; 223
     804:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     808:	08 95       	ret

0000080a <UART_RX_Service>:

/* ISR Service for RX interrupt */
void UART_RX_Service(void)
{
	// Read UART data
	int8_t	data = UDR0;
     80a:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	if(!uart.rx.data_length) {
     80e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <uart+0x1f>
     812:	91 11       	cpse	r25, r1
     814:	02 c0       	rjmp	.+4      	; 0x81a <UART_RX_Service+0x10>
		switch(data) {
     816:	3d 30       	cpi	r19, 0x0D	; 13
     818:	01 f1       	breq	.+64     	; 0x85a <UART_RX_Service+0x50>

			default: break;
		}
	}
	// If buffer not full - processing
	if(uart.rx.q_length <= UART_RX_BUFSIZE) {
     81a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <uart+0x1e>
     81e:	8b 30       	cpi	r24, 0x0B	; 11
     820:	08 f5       	brcc	.+66     	; 0x864 <UART_RX_Service+0x5a>
		// Echo data into UART
		#if (UART_RX_ECHO)
		UDR0 = data;
		#endif
		// Add data to RX buffer
		uart.rx.buff[uart.rx.p_read++] = data;
     822:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <uart+0x1d>
     826:	21 e0       	ldi	r18, 0x01	; 1
     828:	2e 0f       	add	r18, r30
     82a:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <uart+0x1d>
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	e6 5e       	subi	r30, 0xE6	; 230
     832:	fd 4f       	sbci	r31, 0xFD	; 253
     834:	30 a3       	std	Z+32, r19	; 0x20
		// If getting tail buffer, then point to start buffer
		if(uart.rx.p_read == UART_RX_BUFSIZE) uart.rx.p_read = 0;
     836:	2a 30       	cpi	r18, 0x0A	; 10
     838:	11 f4       	brne	.+4      	; 0x83e <UART_RX_Service+0x34>
     83a:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <uart+0x1d>
		// Increment data counter
		uart.rx.q_length++;
     83e:	8f 5f       	subi	r24, 0xFF	; 255
     840:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <uart+0x1e>
		// If we received all data bytes - call event function
		if(uart.rx.data_length && uart.rx.q_length == uart.rx.data_length) {
     844:	99 23       	and	r25, r25
     846:	e9 f0       	breq	.+58     	; 0x882 <UART_RX_Service+0x78>
     848:	98 13       	cpse	r25, r24
     84a:	1b c0       	rjmp	.+54     	; 0x882 <UART_RX_Service+0x78>
			// Disable RX interrupt
			UART_RX_INTERRUPT_DISABLE();
     84c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     850:	8f 76       	andi	r24, 0x6F	; 111
     852:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
			// Reset buffer pointer
			uart.rx.p_read=0;
     856:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <uart+0x1d>
			// Call event procedure
			(uart.rx.eventRxComplete)();
     85a:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <uart+0x2a>
     85e:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <uart+0x2b>
     862:	0e c0       	rjmp	.+28     	; 0x880 <UART_RX_Service+0x76>
		}
	} else {
		// Set error flag
		uart._error = 1;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <uart>
		// Set error identificator
		uart.error = UART_ERROR_RX_BUFF_OVERFLOW;
     86a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <uart+0x1>
		// Disable RX interrupt
		UART_RX_INTERRUPT_DISABLE();
     86e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     872:	8f 76       	andi	r24, 0x6F	; 111
     874:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		// Call error handler
		(uart.rx.eventError)();
     878:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <uart+0x2c>
     87c:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <uart+0x2d>
     880:	09 94       	ijmp
     882:	08 95       	ret

00000884 <UART_Read>:
}

uint8_t UART_Read()
{
	// Check buffer overflow
	if(uart.rx.p_read > UART_RX_BUFSIZE) uart.rx.p_read=0;
     884:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <uart+0x1d>
     888:	8b 30       	cpi	r24, 0x0B	; 11
     88a:	10 f0       	brcs	.+4      	; 0x890 <UART_Read+0xc>
     88c:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <uart+0x1d>
	// Read buffer value
	return uart.rx.buff[uart.rx.p_read++];
     890:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <uart+0x1d>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	8e 0f       	add	r24, r30
     898:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <uart+0x1d>
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	e6 5e       	subi	r30, 0xE6	; 230
     8a0:	fd 4f       	sbci	r31, 0xFD	; 253
}
     8a2:	80 a1       	ldd	r24, Z+32	; 0x20
     8a4:	08 95       	ret

000008a6 <UART_DefferedReadData>:
#else
void UART_DefferedReadData(uint8_t length, UART_F complete_handler, UART_F error_handler)
#endif
{
	// Reset buffer pointer
	uart.rx.p_read=0;
     8a6:	ea e1       	ldi	r30, 0x1A	; 26
     8a8:	f2 e0       	ldi	r31, 0x02	; 2
     8aa:	15 8e       	std	Z+29, r1	; 0x1d
	// Reset queue length data
	uart.rx.q_length=0;
     8ac:	16 8e       	std	Z+30, r1	; 0x1e
	// Set data length
	uart.rx.data_length = length;
     8ae:	87 8f       	std	Z+31, r24	; 0x1f
	// Set event procedure
	uart.rx.eventRxComplete = complete_handler;
     8b0:	73 a7       	std	Z+43, r23	; 0x2b
     8b2:	62 a7       	std	Z+42, r22	; 0x2a
	// Set event ERROR
	uart.rx.eventError = error_handler;
     8b4:	55 a7       	std	Z+45, r21	; 0x2d
     8b6:	44 a7       	std	Z+44, r20	; 0x2c
	// Enable RX interrupt
	UART_RX_INTERRUPT_ENABLE();
     8b8:	e1 ec       	ldi	r30, 0xC1	; 193
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	80 69       	ori	r24, 0x90	; 144
     8c0:	80 83       	st	Z, r24
     8c2:	08 95       	ret

000008c4 <FSM_BUTTON_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_BUTTON_Init(void)
{
	// Set default state for FSM
	FSM_state = BUTTON_STATE_UP;
     8c4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <FSM_state>
	// Flush current and last events
	button.event = button.last_event = BUTTON_EVENT_NOT_PRESSED;
     8c8:	ee e9       	ldi	r30, 0x9E	; 158
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	11 82       	std	Z+1, r1	; 0x01
     8ce:	10 82       	st	Z, r1
     8d0:	08 95       	ret

000008d2 <FSM_BUTTON_Process>:
}

void FSM_BUTTON_Process(void)
{
     8d2:	cf 93       	push	r28
	switch (FSM_state) {
     8d4:	c0 91 a1 01 	lds	r28, 0x01A1	; 0x8001a1 <FSM_state>
     8d8:	c1 30       	cpi	r28, 0x01	; 1
     8da:	d1 f0       	breq	.+52     	; 0x910 <__stack+0x11>
     8dc:	18 f0       	brcs	.+6      	; 0x8e4 <FSM_BUTTON_Process+0x12>
     8de:	c2 30       	cpi	r28, 0x02	; 2
     8e0:	91 f1       	breq	.+100    	; 0x946 <__stack+0x47>
     8e2:	37 c0       	rjmp	.+110    	; 0x952 <__stack+0x53>

		case BUTTON_STATE_UP: {
			// If button pressed
			if(BTN_PRESSED) {
     8e4:	32 99       	sbic	0x06, 2	; 6
     8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <FSM_BUTTON_Process+0x22>
				// Set current state
				button.event = BUTTON_EVENT_NOT_PRESSED;
     8e8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
				// Flush long press counter
				button.lp_counter=0;
     8ec:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end+0x2>
				// Set next FSM state
				FSM_state = BUTTON_STATE_DN;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	20 c0       	rjmp	.+64     	; 0x934 <__stack+0x35>
				// Reset timer for next button scan
				ResetTimer(TIMER_BUTTON);
				} else if(button.event != BUTTON_EVENT_NOT_PRESSED) {
     8f4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
     8f8:	88 23       	and	r24, r24
     8fa:	59 f1       	breq	.+86     	; 0x952 <__stack+0x53>
				// Store last button event
				button.last_event = button.event;
     8fc:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <__data_end+0x1>
				// If we have event from button - send message
				SendMessageWParam(MSG_BTN_KEY_PRESSED, &button.last_event);
     900:	6f e9       	ldi	r22, 0x9F	; 159
     902:	71 e0       	ldi	r23, 0x01	; 1
     904:	87 e0       	ldi	r24, 0x07	; 7
     906:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <SendMessageWParam>
				// Flush current event
				button.event = BUTTON_EVENT_NOT_PRESSED;
     90a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
     90e:	21 c0       	rjmp	.+66     	; 0x952 <__stack+0x53>
			return;
		}

		case BUTTON_STATE_DN: {
			// Debounce delay check
			if(GetTimer(TIMER_BUTTON) >= BUTTON_DEBOUNCE_DELAY) {
     910:	87 e0       	ldi	r24, 0x07	; 7
     912:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
     916:	0a 97       	sbiw	r24, 0x0a	; 10
     918:	e0 f0       	brcs	.+56     	; 0x952 <__stack+0x53>
				// If key also pressed - processing long press
				if(BTN_PRESSED) {
     91a:	32 99       	sbic	0x06, 2	; 6
     91c:	0e c0       	rjmp	.+28     	; 0x93a <__stack+0x3b>
					// Set button event to SHORT PRESS
					button.event = BUTTON_EVENT_SHORT_PRESS;
     91e:	c0 93 9e 01 	sts	0x019E, r28	; 0x80019e <__data_end>
					// Long press counter check
					if(button.lp_counter++ >= BUTTON_LONG_PRESS_COUNT) {
     922:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end+0x2>
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	98 0f       	add	r25, r24
     92a:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <__data_end+0x2>
     92e:	8c 33       	cpi	r24, 0x3C	; 60
     930:	30 f0       	brcs	.+12     	; 0x93e <__stack+0x3f>
						// Set next FSM state
						FSM_state = BUTTON_STATE_AL;
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <FSM_state>
     938:	02 c0       	rjmp	.+4      	; 0x93e <__stack+0x3f>
					}
					} else {
					// Set next FSM state
					FSM_state = BUTTON_STATE_UP;
     93a:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <FSM_state>
				}
				// Flush timer for next debounce cycle
				ResetTimer(TIMER_BUTTON);
     93e:	87 e0       	ldi	r24, 0x07	; 7
			return;
		}

		default: break;
	}
}
     940:	cf 91       	pop	r28
					} else {
					// Set next FSM state
					FSM_state = BUTTON_STATE_UP;
				}
				// Flush timer for next debounce cycle
				ResetTimer(TIMER_BUTTON);
     942:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <ResetTimer>
			}
			return;
		}

		case BUTTON_STATE_AL: {
			if(!BTN_PRESSED) {
     946:	32 9b       	sbis	0x06, 2	; 6
     948:	04 c0       	rjmp	.+8      	; 0x952 <__stack+0x53>
				// Set current button event
				button.event = BUTTON_EVENT_LONG_PRESS;
     94a:	c0 93 9e 01 	sts	0x019E, r28	; 0x80019e <__data_end>
				// Set next FSM state
				FSM_state = BUTTON_STATE_UP;
     94e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <FSM_state>
			return;
		}

		default: break;
	}
}
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <FSM_BUZZER_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/

void FSM_BUZZER_Init(void)
{
	FSM_state = FSM_BUZZER_STATE_IDLE;
     956:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <FSM_state>
     95a:	08 95       	ret

0000095c <FSM_BUZZER_Process>:
}

void FSM_BUZZER_Process(void)
{
	switch(FSM_state) {
     95c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <FSM_state>
     960:	81 11       	cpse	r24, r1
     962:	08 c0       	rjmp	.+16     	; 0x974 <FSM_BUZZER_Process+0x18>

			return;
		}

		case FSM_BUZZER_STATE_IDLE: {
			if(GetMessage(MSG_BUZZER_PROCESSING)) {
     964:	8a e0       	ldi	r24, 0x0A	; 10
     966:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GetMessage>
     96a:	88 23       	and	r24, r24
     96c:	19 f0       	breq	.+6      	; 0x974 <FSM_BUZZER_Process+0x18>

				FSM_state = FSM_BUZZER_STATE_PGM_PROCESSING;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <FSM_state>
     974:	08 95       	ret

00000976 <FSM_DHT_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_DHT_Init(void)
{
	// Initialize error var
	dht._failed = 0;
     976:	ef e9       	ldi	r30, 0x9F	; 159
     978:	f3 e0       	ldi	r31, 0x03	; 3
     97a:	10 82       	st	Z, r1
	dht.error = DHT_ERROR_NO_ERROR;
     97c:	11 82       	std	Z+1, r1	; 0x01
	// Set next FSM state
	FSM_state = FSM_DHT_STATE_IDLE;
     97e:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <FSM_state>
	// Flush FSM timer
	ResetTimer(TIMER_DHT);
     982:	84 e0       	ldi	r24, 0x04	; 4
     984:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <ResetTimer>

00000988 <FSM_DHT_Process>:
}


void FSM_DHT_Process(void)
{
	switch(FSM_state) {
     988:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <FSM_state>
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	b1 f1       	breq	.+108    	; 0x9fc <FSM_DHT_Process+0x74>
     990:	18 f1       	brcs	.+70     	; 0x9d8 <FSM_DHT_Process+0x50>
     992:	83 30       	cpi	r24, 0x03	; 3
     994:	09 f0       	breq	.+2      	; 0x998 <FSM_DHT_Process+0x10>
     996:	94 c0       	rjmp	.+296    	; 0xac0 <FSM_DHT_Process+0x138>

			uint8_t *p_data = (void *)&dht.data;
			uint8_t *p_buff = rx_buff;

			for(uint8_t i=5; i; i--) {
				*(p_data++) = *(p_buff++);
     998:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <rx_buff>
     99c:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <dht+0x2>
     9a0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <rx_buff+0x1>
     9a4:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <dht+0x3>
     9a8:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <rx_buff+0x2>
     9ac:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <dht+0x4>
     9b0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <rx_buff+0x3>
     9b4:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <dht+0x5>
     9b8:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <rx_buff+0x4>
     9bc:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <dht+0x6>
			}

			// Calculating DHT data values
			dht.temperature.sign = 0;
     9c0:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <dht+0x7>
			if(dht.data.t & 0x8000) {
     9c4:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <dht+0x3>
     9c8:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <dht+0x4>
     9cc:	97 ff       	sbrs	r25, 7
     9ce:	62 c0       	rjmp	.+196    	; 0xa94 <FSM_DHT_Process+0x10c>
				dht.temperature.sign = 1;
     9d0:	21 e0       	ldi	r18, 0x01	; 1
     9d2:	20 93 a6 03 	sts	0x03A6, r18	; 0x8003a6 <dht+0x7>
     9d6:	5e c0       	rjmp	.+188    	; 0xa94 <FSM_DHT_Process+0x10c>
{
	switch(FSM_state) {

		case FSM_DHT_STATE_IDLE: {
			// If no error before and time to refresh data
			if(!dht._failed && GetTimer(TIMER_DHT) > DHT_REFRESH_PERIOD) {
     9d8:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <dht>
     9dc:	81 11       	cpse	r24, r1
     9de:	70 c0       	rjmp	.+224    	; 0xac0 <FSM_DHT_Process+0x138>
     9e0:	84 e0       	ldi	r24, 0x04	; 4
     9e2:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
     9e6:	89 3e       	cpi	r24, 0xE9	; 233
     9e8:	93 40       	sbci	r25, 0x03	; 3
     9ea:	08 f4       	brcc	.+2      	; 0x9ee <FSM_DHT_Process+0x66>
     9ec:	69 c0       	rjmp	.+210    	; 0xac0 <FSM_DHT_Process+0x138>
				// Set port pin in OUT mode
				DHT_DDR |= DHT_PIN_MASK;
     9ee:	56 9a       	sbi	0x0a, 6	; 10
				// Set port pin in low level
				DHT_PORT &= ~DHT_PIN_MASK;
     9f0:	5e 98       	cbi	0x0b, 6	; 11
				// Flush FSM timer
				ResetTimer(TIMER_DHT);
     9f2:	84 e0       	ldi	r24, 0x04	; 4
     9f4:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <ResetTimer>
				// Set next FSM state
				FSM_state = FSM_DHT_STATE_GET_DATA;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	49 c0       	rjmp	.+146    	; 0xa8e <FSM_DHT_Process+0x106>
			return;
		}

		case FSM_DHT_STATE_GET_DATA: {

			if(GetTimer(TIMER_DHT) > 5) {
     9fc:	84 e0       	ldi	r24, 0x04	; 4
     9fe:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
     a02:	06 97       	sbiw	r24, 0x06	; 6
     a04:	08 f4       	brcc	.+2      	; 0xa08 <FSM_DHT_Process+0x80>
     a06:	5c c0       	rjmp	.+184    	; 0xac0 <FSM_DHT_Process+0x138>

				ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a08:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a0a:	f8 94       	cli
					// Set port pin in HIGH level
					DHT_PORT |= DHT_PIN_MASK;
     a0c:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a0e:	80 e5       	ldi	r24, 0x50	; 80
     a10:	8a 95       	dec	r24
     a12:	f1 f7       	brne	.-4      	; 0xa10 <FSM_DHT_Process+0x88>
					// Technology timeout ~20uS
					_delay_us(30);
					// Set port pin in IN mode
					DHT_DDR &= ~DHT_PIN_MASK;
     a14:	56 98       	cbi	0x0a, 6	; 10
					// Flush timer counter reg
					MEASURING_TMR_CNT = 0;
     a16:	16 bc       	out	0x26, r1	; 38
					// Waiting while level changed from LOW to HIGH
					while(!DHT_PIN_STATE) {
     a18:	4e 99       	sbic	0x09, 6	; 9
     a1a:	07 c0       	rjmp	.+14     	; 0xa2a <FSM_DHT_Process+0xa2>
						// Timeout control
						if(MEASURING_TMR_CNT > DHT_TIMESLOT_TIMEOUT) {
     a1c:	86 b5       	in	r24, 0x26	; 38
     a1e:	85 36       	cpi	r24, 0x65	; 101
     a20:	d8 f3       	brcs	.-10     	; 0xa18 <FSM_DHT_Process+0x90>
							// Set error handler
							dht._failed = 1;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <dht>
     a28:	1e c0       	rjmp	.+60     	; 0xa66 <FSM_DHT_Process+0xde>
							return;
						}
					}

					// Flush timer counter reg
					MEASURING_TMR_CNT = 0;
     a2a:	16 bc       	out	0x26, r1	; 38
					// Waiting while level changed from LOW to HIGH
					while(DHT_PIN_STATE) {
     a2c:	4e 9b       	sbis	0x09, 6	; 9
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <FSM_DHT_Process+0xb0>
						// Timeout control
						if(MEASURING_TMR_CNT > DHT_TIMESLOT_TIMEOUT) {
     a30:	86 b5       	in	r24, 0x26	; 38
     a32:	85 36       	cpi	r24, 0x65	; 101
     a34:	d8 f3       	brcs	.-10     	; 0xa2c <FSM_DHT_Process+0xa4>
     a36:	13 c0       	rjmp	.+38     	; 0xa5e <FSM_DHT_Process+0xd6>
     a38:	e8 ea       	ldi	r30, 0xA8	; 168
     a3a:	f1 e0       	ldi	r31, 0x01	; 1
     a3c:	1a c0       	rjmp	.+52     	; 0xa72 <FSM_DHT_Process+0xea>
									FSM_state = FSM_DHT_STATE_IDLE;
									return;
								}
							}
							// Flush timer counter reg
							MEASURING_TMR_CNT = 0;
     a3e:	16 bc       	out	0x26, r1	; 38
							// Waiting while level changed from HIGH to LOW
							while(DHT_PIN_STATE) {
     a40:	4e 99       	sbic	0x09, 6	; 9
     a42:	1a c0       	rjmp	.+52     	; 0xa78 <FSM_DHT_Process+0xf0>
									FSM_state = FSM_DHT_STATE_IDLE;
									return;
								}
							}
							// Shift data bit in receive byte
							tmp <<= 1;
     a44:	88 0f       	add	r24, r24
							// If slot has time over 50uS - is 1, else - 0
							if(MEASURING_TMR_CNT > 50) {
     a46:	36 b5       	in	r19, 0x26	; 38
     a48:	33 33       	cpi	r19, 0x33	; 51
     a4a:	08 f0       	brcs	.+2      	; 0xa4e <FSM_DHT_Process+0xc6>
								tmp |= 0x1;
     a4c:	81 60       	ori	r24, 0x01	; 1
     a4e:	91 50       	subi	r25, 0x01	; 1
					// Receiving 5 bytes from DHT
					//uint8_t		*p_buff = (void *)&dht.data;
					for(int8_t i=4; i>=0; i--) {
						// Receiving procedure bit by bit
						uint8_t	tmp=0;
						for(uint8_t b=8; b>0; b--) {
     a50:	b9 f0       	breq	.+46     	; 0xa80 <FSM_DHT_Process+0xf8>
							// Flush timer counter reg
							MEASURING_TMR_CNT = 0;
     a52:	16 bc       	out	0x26, r1	; 38
							// Waiting while level changed from LOW to HIGH
							while(!DHT_PIN_STATE) {
     a54:	4e 99       	sbic	0x09, 6	; 9
     a56:	f3 cf       	rjmp	.-26     	; 0xa3e <FSM_DHT_Process+0xb6>
								// Timeout control
								if(MEASURING_TMR_CNT > DHT_TIMESLOT_TIMEOUT) {
     a58:	36 b5       	in	r19, 0x26	; 38
     a5a:	35 36       	cpi	r19, 0x65	; 101
     a5c:	d8 f3       	brcs	.-10     	; 0xa54 <FSM_DHT_Process+0xcc>
							// Waiting while level changed from HIGH to LOW
							while(DHT_PIN_STATE) {
								// Timeout control
								if(MEASURING_TMR_CNT > DHT_TIMESLOT_TIMEOUT) {
									// Set error handler
									dht._failed = 1;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <dht>
									dht.error = DHT_ERROR_TIMEOUT;
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <dht+0x1>
									// Set next FSM state
									FSM_state = FSM_DHT_STATE_IDLE;
     a6a:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <FSM_state>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a6e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     a70:	08 95       	ret
	ResetTimer(TIMER_DHT);
}


void FSM_DHT_Process(void)
{
     a72:	98 e0       	ldi	r25, 0x08	; 8
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	ed cf       	rjmp	.-38     	; 0xa52 <FSM_DHT_Process+0xca>
							// Flush timer counter reg
							MEASURING_TMR_CNT = 0;
							// Waiting while level changed from HIGH to LOW
							while(DHT_PIN_STATE) {
								// Timeout control
								if(MEASURING_TMR_CNT > DHT_TIMESLOT_TIMEOUT) {
     a78:	36 b5       	in	r19, 0x26	; 38
     a7a:	35 36       	cpi	r19, 0x65	; 101
     a7c:	08 f3       	brcs	.-62     	; 0xa40 <FSM_DHT_Process+0xb8>
     a7e:	ef cf       	rjmp	.-34     	; 0xa5e <FSM_DHT_Process+0xd6>
							if(MEASURING_TMR_CNT > 50) {
								tmp |= 0x1;
							}
						}
						// Store received byte to the buffer
						rx_buff[i] = tmp;
     a80:	82 93       	st	-Z, r24
						}
					}

					// Receiving 5 bytes from DHT
					//uint8_t		*p_buff = (void *)&dht.data;
					for(int8_t i=4; i>=0; i--) {
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	e3 3a       	cpi	r30, 0xA3	; 163
     a86:	f8 07       	cpc	r31, r24
     a88:	a1 f7       	brne	.-24     	; 0xa72 <FSM_DHT_Process+0xea>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a8a:	2f bf       	out	0x3f, r18	; 63
						}
						// Store received byte to the buffer
						rx_buff[i] = tmp;
					}
				}
				FSM_state = FSM_DHT_STATE_PROCESSING;
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <FSM_state>
     a92:	08 95       	ret
			// Calculating DHT data values
			dht.temperature.sign = 0;
			if(dht.data.t & 0x8000) {
				dht.temperature.sign = 1;
			}
			dht.temperature.value = dht.data.t / 10;
     a94:	2a e0       	ldi	r18, 0x0A	; 10
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	b9 01       	movw	r22, r18
     a9a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__udivmodhi4>
     a9e:	60 93 a7 03 	sts	0x03A7, r22	; 0x8003a7 <dht+0x8>
			dht.temperature.mantissa = dht.data.t % 10;
     aa2:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <dht+0x9>
			dht.humidity.value = dht.data.h / 10;
     aa6:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <dht+0x5>
     aaa:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <dht+0x6>
     aae:	b9 01       	movw	r22, r18
     ab0:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__udivmodhi4>
     ab4:	60 93 a9 03 	sts	0x03A9, r22	; 0x8003a9 <dht+0xa>
			dht.humidity.mantissa = dht.data.h % 10;
     ab8:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <dht+0xb>
			// Set next FSM state
			FSM_state = FSM_DHT_STATE_IDLE;
     abc:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <FSM_state>
     ac0:	08 95       	ret

00000ac2 <FSM_ENC_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_ENC_Init(void)
{
	// Set default FSM state
	FSM_state = FSM_ENC_STATE_IDLE;
     ac2:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <FSM_state>
	// Flush FSM timer
	ResetTimer(TIMER_ENC);
     ac6:	86 e0       	ldi	r24, 0x06	; 6
     ac8:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <ResetTimer>

00000acc <FSM_ENC_Process>:
}

void FSM_ENC_Process(void)
{
	switch(FSM_state) {
     acc:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <FSM_state>
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	89 f0       	breq	.+34     	; 0xaf6 <FSM_ENC_Process+0x2a>
     ad4:	20 f0       	brcs	.+8      	; 0xade <FSM_ENC_Process+0x12>
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	09 f4       	brne	.+2      	; 0xadc <FSM_ENC_Process+0x10>
     ada:	41 c0       	rjmp	.+130    	; 0xb5e <FSM_ENC_Process+0x92>
     adc:	08 95       	ret

		case FSM_ENC_STATE_IDLE: {
			if(GetTimer(TIMER_ENC) >= 1) {
     ade:	86 e0       	ldi	r24, 0x06	; 6
     ae0:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
     ae4:	89 2b       	or	r24, r25
     ae6:	09 f4       	brne	.+2      	; 0xaea <FSM_ENC_Process+0x1e>
     ae8:	47 c0       	rjmp	.+142    	; 0xb78 <FSM_ENC_Process+0xac>
				// Set next FSM state
				FSM_state = FSM_ENC_STATE_SCAN;
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <FSM_state>
				// Flush FSM timer
				ResetTimer(TIMER_ENC);
     af0:	86 e0       	ldi	r24, 0x06	; 6
     af2:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <ResetTimer>
			return;
		}

		case FSM_ENC_STATE_SCAN: {
			// Getting current encoder pin state
			uint8_t curr_state = ENC_STATE;
     af6:	86 b1       	in	r24, 0x06	; 6
     af8:	83 70       	andi	r24, 0x03	; 3
			// Processing state
			switch(encoder.prev_state) {
     afa:	20 91 a9 01 	lds	r18, 0x01A9	; 0x8001a9 <encoder>
     afe:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <encoder+0x1>
     b02:	21 30       	cpi	r18, 0x01	; 1
     b04:	99 f0       	breq	.+38     	; 0xb2c <FSM_ENC_Process+0x60>
     b06:	1c f4       	brge	.+6      	; 0xb0e <FSM_ENC_Process+0x42>
     b08:	22 23       	and	r18, r18
     b0a:	31 f0       	breq	.+12     	; 0xb18 <FSM_ENC_Process+0x4c>
     b0c:	1d c0       	rjmp	.+58     	; 0xb48 <FSM_ENC_Process+0x7c>
     b0e:	22 30       	cpi	r18, 0x02	; 2
     b10:	91 f0       	breq	.+36     	; 0xb36 <FSM_ENC_Process+0x6a>
     b12:	23 30       	cpi	r18, 0x03	; 3
     b14:	a9 f0       	breq	.+42     	; 0xb40 <FSM_ENC_Process+0x74>
     b16:	18 c0       	rjmp	.+48     	; 0xb48 <FSM_ENC_Process+0x7c>
				case 0: {
					if(curr_state == 2) encoder.value--;
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	11 f4       	brne	.+4      	; 0xb20 <FSM_ENC_Process+0x54>
     b1c:	91 50       	subi	r25, 0x01	; 1
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <FSM_ENC_Process+0x5a>
					if(curr_state == 1) encoder.value++;
     b20:	81 30       	cpi	r24, 0x01	; 1
     b22:	91 f4       	brne	.+36     	; 0xb48 <FSM_ENC_Process+0x7c>
     b24:	9f 5f       	subi	r25, 0xFF	; 255
     b26:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <encoder+0x1>
     b2a:	0e c0       	rjmp	.+28     	; 0xb48 <FSM_ENC_Process+0x7c>
					break;
				}

				case 1: {
					if(curr_state == 0) encoder.value--;
     b2c:	88 23       	and	r24, r24
     b2e:	b1 f3       	breq	.-20     	; 0xb1c <FSM_ENC_Process+0x50>
					if(curr_state == 3) encoder.value++;
     b30:	83 30       	cpi	r24, 0x03	; 3
     b32:	c1 f3       	breq	.-16     	; 0xb24 <FSM_ENC_Process+0x58>
     b34:	09 c0       	rjmp	.+18     	; 0xb48 <FSM_ENC_Process+0x7c>
					break;
				}


				case 2: {
					if(curr_state == 3) encoder.value--;
     b36:	83 30       	cpi	r24, 0x03	; 3
     b38:	89 f3       	breq	.-30     	; 0xb1c <FSM_ENC_Process+0x50>
					if(curr_state == 0) encoder.value++;
     b3a:	88 23       	and	r24, r24
     b3c:	99 f3       	breq	.-26     	; 0xb24 <FSM_ENC_Process+0x58>
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <FSM_ENC_Process+0x7c>
					break;
				}

				case 3: {
					if(curr_state == 1) encoder.value--;
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	61 f3       	breq	.-40     	; 0xb1c <FSM_ENC_Process+0x50>
					if(curr_state == 2) encoder.value++;
     b44:	82 30       	cpi	r24, 0x02	; 2
     b46:	71 f3       	breq	.-36     	; 0xb24 <FSM_ENC_Process+0x58>
					break;
				}
			}
			// Save last state of encoder pin
			encoder.prev_state = curr_state;
     b48:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <encoder>
			// If counter not null
			if(encoder.value > 3 || encoder.value < -3) {
     b4c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <encoder+0x1>
     b50:	8d 5f       	subi	r24, 0xFD	; 253
     b52:	87 30       	cpi	r24, 0x07	; 7
     b54:	78 f0       	brcs	.+30     	; 0xb74 <FSM_ENC_Process+0xa8>
				// Set next FSM state
				FSM_state = FSM_ENC_STATE_PROCESSING;
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <FSM_state>
				return;
     b5c:	08 95       	ret
			return;
		}

		case FSM_ENC_STATE_PROCESSING: {
			// Store last rotate value
			encoder.last_value = encoder.value;
     b5e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <encoder+0x1>
     b62:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <encoder+0x2>
			// Flush encoder counter
			encoder.value = 0;
     b66:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <encoder+0x1>
			// Send message with encoder rotate angel
			SendMessageWParam(MSG_ENC_ROTATE, &encoder.last_value);
     b6a:	6b ea       	ldi	r22, 0xAB	; 171
     b6c:	71 e0       	ldi	r23, 0x01	; 1
     b6e:	86 e0       	ldi	r24, 0x06	; 6
     b70:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <SendMessageWParam>
			// Set next FSM state
			FSM_state = FSM_ENC_STATE_IDLE;
     b74:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <FSM_state>
     b78:	08 95       	ret

00000b7a <FSM_LCD_Init>:
#endif

void FSM_LCD_Init(void)
{
	// Set next FSM state
	FSM_state = FSM_LCD_STATE_LCD_INIT;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <FSM_state>
	// Flush FSM timer
	ResetTimer(TIMER_LCD);
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <ResetTimer>

00000b86 <FSM_LCD_CreateCustomChars>:


#if (LCD_SUPPORT_CUSTOM_CHARS_SIZE > 1)
void FSM_LCD_CreateCustomChars(void)
{
	FSM_PCF8574_CreateCharacterFromFlash(0, cc_smb1);
     b86:	68 ed       	ldi	r22, 0xD8	; 216
     b88:	71 e0       	ldi	r23, 0x01	; 1
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	0e 94 10 0b 	call	0x1620	; 0x1620 <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(1, cc_smb2);
     b90:	60 ed       	ldi	r22, 0xD0	; 208
     b92:	71 e0       	ldi	r23, 0x01	; 1
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	0e 94 10 0b 	call	0x1620	; 0x1620 <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(2, cc_smb3);
     b9a:	68 ec       	ldi	r22, 0xC8	; 200
     b9c:	71 e0       	ldi	r23, 0x01	; 1
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	0e 94 10 0b 	call	0x1620	; 0x1620 <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(3, cc_smb4);
     ba4:	60 ec       	ldi	r22, 0xC0	; 192
     ba6:	71 e0       	ldi	r23, 0x01	; 1
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	0e 94 10 0b 	call	0x1620	; 0x1620 <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(4, cc_smb5);
     bae:	68 eb       	ldi	r22, 0xB8	; 184
     bb0:	71 e0       	ldi	r23, 0x01	; 1
     bb2:	84 e0       	ldi	r24, 0x04	; 4
     bb4:	0e 94 10 0b 	call	0x1620	; 0x1620 <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(5, cc_smb6);
     bb8:	60 eb       	ldi	r22, 0xB0	; 176
     bba:	71 e0       	ldi	r23, 0x01	; 1
     bbc:	85 e0       	ldi	r24, 0x05	; 5
     bbe:	0e 94 10 0b 	call	0x1620	; 0x1620 <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(6, cc_smb7);
     bc2:	68 ea       	ldi	r22, 0xA8	; 168
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	86 e0       	ldi	r24, 0x06	; 6
     bc8:	0e 94 10 0b 	call	0x1620	; 0x1620 <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(7, cc_smb8);
     bcc:	60 ea       	ldi	r22, 0xA0	; 160
     bce:	71 e0       	ldi	r23, 0x01	; 1
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <FSM_PCF8574_CreateCharacterFromFlash>

00000bd6 <FSM_LCD_DrawCustomChar>:
}

uint8_t FSM_LCD_DrawCustomChar(char chr, uint8_t start_row, uint8_t start_col)
{
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	f6 2e       	mov	r15, r22
     be2:	c4 2f       	mov	r28, r20
     be4:	80 52       	subi	r24, 0x20	; 32
     be6:	87 34       	cpi	r24, 0x47	; 71
     be8:	20 f5       	brcc	.+72     	; 0xc32 <FSM_LCD_DrawCustomChar+0x5c>
     bea:	e8 2f       	mov	r30, r24
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	e1 5f       	subi	r30, 0xF1	; 241
     bf4:	fe 4f       	sbci	r31, 0xFE	; 254
     bf6:	00 81       	ld	r16, Z
     bf8:	11 81       	ldd	r17, Z+1	; 0x01
		case ':': { pChr = cc_char_colon; break; }
		case ' ': { pChr = cc_char_space; break; }
		default: break;
	}

	if(pChr != NULL) {
     bfa:	01 15       	cp	r16, r1
     bfc:	11 05       	cpc	r17, r1
     bfe:	c9 f0       	breq	.+50     	; 0xc32 <FSM_LCD_DrawCustomChar+0x5c>
		// Go to start position ROW & COL
		FSM_PCF8574_GoToXY(i,j);
     c00:	64 2f       	mov	r22, r20
     c02:	8f 2d       	mov	r24, r15
     c04:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>

uint8_t FSM_LCD_DrawCustomChar(char chr, uint8_t start_row, uint8_t start_col)
{
	const char * pChr = NULL;
	char c;
	uint8_t		i=start_row, j=start_col;
     c08:	dc 2f       	mov	r29, r28

	if(pChr != NULL) {
		// Go to start position ROW & COL
		FSM_PCF8574_GoToXY(i,j);
		// Draw processing line by line
		while((c = pgm_read_byte(pChr)) != '$') {
     c0a:	f8 01       	movw	r30, r16
     c0c:	84 91       	lpm	r24, Z
     c0e:	84 32       	cpi	r24, 0x24	; 36
     c10:	79 f0       	breq	.+30     	; 0xc30 <FSM_LCD_DrawCustomChar+0x5a>
			if(c == '&') { // <- Next line sybol
     c12:	86 32       	cpi	r24, 0x26	; 38
     c14:	39 f4       	brne	.+14     	; 0xc24 <FSM_LCD_DrawCustomChar+0x4e>
				// Increment ROW position
				i++;
     c16:	f3 94       	inc	r15
				// Store COL position
				j=start_col;
				// Go to next ROW
				FSM_PCF8574_GoToXY(i, j);
     c18:	6c 2f       	mov	r22, r28
     c1a:	8f 2d       	mov	r24, r15
     c1c:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
		while((c = pgm_read_byte(pChr)) != '$') {
			if(c == '&') { // <- Next line sybol
				// Increment ROW position
				i++;
				// Store COL position
				j=start_col;
     c20:	dc 2f       	mov	r29, r28
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <FSM_LCD_DrawCustomChar+0x54>
				// Go to next ROW
				FSM_PCF8574_GoToXY(i, j);
			} else {
				// Change col position to the end
				j++;
     c24:	df 5f       	subi	r29, 0xFF	; 255
				// Draw char
				FSM_PCF8574_AddRAWChar(c);
     c26:	0e 94 b9 0b 	call	0x1772	; 0x1772 <FSM_PCF8574_AddRAWChar>
			}
			pChr++;
     c2a:	0f 5f       	subi	r16, 0xFF	; 255
     c2c:	1f 4f       	sbci	r17, 0xFF	; 255
     c2e:	ed cf       	rjmp	.-38     	; 0xc0a <FSM_LCD_DrawCustomChar+0x34>
     c30:	cd 2f       	mov	r28, r29
		}
	}
	// Return last position by Y axis with char size include
	return j;
}
     c32:	8c 2f       	mov	r24, r28
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	08 95       	ret

00000c40 <FSM_LCD_AddCustomCharStringToXY>:


uint8_t FSM_LCD_AddCustomCharStringToXY(char * str, uint8_t start_row, uint8_t start_col)
{
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	16 2f       	mov	r17, r22
     c48:	ec 01       	movw	r28, r24
	uint8_t pos_col = start_col;

	while(*str) {
     c4a:	89 91       	ld	r24, Y+
     c4c:	88 23       	and	r24, r24
     c4e:	29 f0       	breq	.+10     	; 0xc5a <FSM_LCD_AddCustomCharStringToXY+0x1a>
		// Store col position for the next SYMBOL
		pos_col = FSM_LCD_DrawCustomChar(*str, start_row, pos_col);
     c50:	61 2f       	mov	r22, r17
     c52:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <FSM_LCD_DrawCustomChar>
     c56:	48 2f       	mov	r20, r24
     c58:	f8 cf       	rjmp	.-16     	; 0xc4a <FSM_LCD_AddCustomCharStringToXY+0xa>
		str++;
	}
	// Return last column position
	return pos_col;
}
     c5a:	84 2f       	mov	r24, r20
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	08 95       	ret

00000c64 <FSM_LCD_AddCustomCharStringToXYFromFlash>:

uint8_t FSM_LCD_AddCustomCharStringToXYFromFlash(const char * str, uint8_t start_row, uint8_t start_col)
{
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ec 01       	movw	r28, r24
     c6c:	16 2f       	mov	r17, r22
	char chr;
	uint8_t pos_col = start_col;

	while((chr = pgm_read_byte(str))) {
     c6e:	fe 01       	movw	r30, r28
     c70:	84 91       	lpm	r24, Z
     c72:	88 23       	and	r24, r24
     c74:	31 f0       	breq	.+12     	; 0xc82 <FSM_LCD_AddCustomCharStringToXYFromFlash+0x1e>
		// Store col position for the next SYMBOL
		pos_col = FSM_LCD_DrawCustomChar(chr, start_row, pos_col);
     c76:	61 2f       	mov	r22, r17
     c78:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <FSM_LCD_DrawCustomChar>
     c7c:	48 2f       	mov	r20, r24
		str++;
     c7e:	21 96       	adiw	r28, 0x01	; 1
     c80:	f6 cf       	rjmp	.-20     	; 0xc6e <FSM_LCD_AddCustomCharStringToXYFromFlash+0xa>
	}
	// Return last column position
	return pos_col;
}
     c82:	84 2f       	mov	r24, r20
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	08 95       	ret

00000c8c <FSM_LCD_Process>:
	// Flush FSM timer
	ResetTimer(TIMER_LCD);
}

void FSM_LCD_Process(void)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	00 d0       	rcall	.+0      	; 0xc96 <FSM_LCD_Process+0xa>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <FSM_LCD_Process+0xc>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <FSM_LCD_Process+0xe>
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t _presence;
	char buff[6];

	switch(FSM_state) {
     c9e:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <FSM_state>
     ca2:	8e 2f       	mov	r24, r30
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	88 30       	cpi	r24, 0x08	; 8
     ca8:	91 05       	cpc	r25, r1
     caa:	08 f0       	brcs	.+2      	; 0xcae <FSM_LCD_Process+0x22>
     cac:	f3 c1       	rjmp	.+998    	; 0x1094 <FSM_LCD_Process+0x408>
     cae:	fc 01       	movw	r30, r24
     cb0:	ec 5c       	subi	r30, 0xCC	; 204
     cb2:	ff 4f       	sbci	r31, 0xFF	; 255
     cb4:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__tablejump2__>
		/* Waiting LCD init instruction will be send */
		case FSM_LCD_STATE_LCD_INIT: {
			if(GetBCMessage(MSG_BC_PCF8574_INIT_CMD_SEND_COMPLETE)) {
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <GetBCMessage>
     cbe:	88 23       	and	r24, r24
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <FSM_LCD_Process+0x38>
     cc2:	e8 c1       	rjmp	.+976    	; 0x1094 <FSM_LCD_Process+0x408>
				// Load into display custom chars
				FSM_LCD_CreateCustomChars();
     cc4:	0e 94 c3 05 	call	0xb86	; 0xb86 <FSM_LCD_CreateCustomChars>
				// Goto SPLASH screen load
				FSM_state = FSM_LCD_STATE_SPLASH_DRAW;
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	2a c0       	rjmp	.+84     	; 0xd20 <FSM_LCD_Process+0x94>
		case FSM_LCD_STATE_SPLASH_DRAW: {
			//   ### ###2   HW: x.x
			//   #   # #    SW: x.x
			//   ### ###
			//  SEMAPHORE
			FSM_LCD_AddCustomCharStringToXYFromFlash(LNG_SPLASH_LOGO_S1, 0, 3);
     ccc:	43 e0       	ldi	r20, 0x03	; 3
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	87 ef       	ldi	r24, 0xF7	; 247
     cd2:	93 e0       	ldi	r25, 0x03	; 3
     cd4:	0e 94 32 06 	call	0xc64	; 0xc64 <FSM_LCD_AddCustomCharStringToXYFromFlash>
			FSM_PCF8574_GoToXY(0,9);
     cd8:	69 e0       	ldi	r22, 0x09	; 9
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
			FSM_PCF8574_AddStringFromFlash(LNG_SPLASH_LOGO_S1_1);
     ce0:	85 ef       	ldi	r24, 0xF5	; 245
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_GoToXY(3,2);
     ce8:	62 e0       	ldi	r22, 0x02	; 2
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
			FSM_PCF8574_AddStringFromFlash(LNG_SPLASH_LOGO_S4);
     cf0:	8b ee       	ldi	r24, 0xEB	; 235
     cf2:	93 e0       	ldi	r25, 0x03	; 3
     cf4:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_GoToXY(0,13);
     cf8:	6d e0       	ldi	r22, 0x0D	; 13
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
			FSM_PCF8574_AddStringFromFlash(LNG_HW_VERSION);
     d00:	83 ee       	ldi	r24, 0xE3	; 227
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_GoToXY(1,13);
     d08:	6d e0       	ldi	r22, 0x0D	; 13
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
			FSM_PCF8574_AddStringFromFlash(LNG_SW_VERSION);
     d10:	8b ed       	ldi	r24, 0xDB	; 219
     d12:	93 e0       	ldi	r25, 0x03	; 3
     d14:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
			// Prepare SPLASH show timeout countdown
			ResetTimer(TIMER_LCD);
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <ResetTimer>
			// Goto waiting SHOW timeout
			FSM_state = FSM_LCD_STATE_SPLASH_SHOW;
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <FSM_state>
			return;
     d24:	b7 c1       	rjmp	.+878    	; 0x1094 <FSM_LCD_Process+0x408>
		}

		/* Splash show delay */
		case FSM_LCD_STATE_SPLASH_SHOW: {
			// Waiting for SPLASH showing timeout
			if(GetTimer(TIMER_LCD) > LCD_SPLASH_SPLASH_HIDE_TIMEOUT) {
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
     d2c:	81 3d       	cpi	r24, 0xD1	; 209
     d2e:	97 40       	sbci	r25, 0x07	; 7
     d30:	08 f4       	brcc	.+2      	; 0xd34 <FSM_LCD_Process+0xa8>
     d32:	b0 c1       	rjmp	.+864    	; 0x1094 <FSM_LCD_Process+0x408>
				// Goto SPLASH hide animation
				FSM_state = FSM_LCD_STATE_SPLASH_HIDE_ANIMATION;
     d34:	84 e0       	ldi	r24, 0x04	; 4
     d36:	f4 cf       	rjmp	.-24     	; 0xd20 <FSM_LCD_Process+0x94>
		}

		/* Animated splash hiding */
		case FSM_LCD_STATE_SPLASH_HIDE_ANIMATION: {
			// Animation timeout
			if(GetTimer(TIMER_LCD) >= LCD_SPLASH_SLIDE_PERIOD) {
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
     d3e:	49 97       	sbiw	r24, 0x19	; 25
     d40:	08 f4       	brcc	.+2      	; 0xd44 <FSM_LCD_Process+0xb8>
     d42:	a8 c1       	rjmp	.+848    	; 0x1094 <FSM_LCD_Process+0x408>
				if(splash_length--) {
     d44:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d48:	9f ef       	ldi	r25, 0xFF	; 255
     d4a:	98 0f       	add	r25, r24
     d4c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
     d50:	88 23       	and	r24, r24
     d52:	69 f0       	breq	.+26     	; 0xd6e <FSM_LCD_Process+0xe2>
     d54:	10 e0       	ldi	r17, 0x00	; 0
					for(i=0; i<4; i++) {
						FSM_PCF8574_GoToXY(i,splash_length);
     d56:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     d5a:	81 2f       	mov	r24, r17
     d5c:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
						FSM_PCF8574_AddRAWChar(0x20);
     d60:	80 e2       	ldi	r24, 0x20	; 32
     d62:	0e 94 b9 0b 	call	0x1772	; 0x1772 <FSM_PCF8574_AddRAWChar>
		/* Animated splash hiding */
		case FSM_LCD_STATE_SPLASH_HIDE_ANIMATION: {
			// Animation timeout
			if(GetTimer(TIMER_LCD) >= LCD_SPLASH_SLIDE_PERIOD) {
				if(splash_length--) {
					for(i=0; i<4; i++) {
     d66:	1f 5f       	subi	r17, 0xFF	; 255
     d68:	14 30       	cpi	r17, 0x04	; 4
     d6a:	a9 f7       	brne	.-22     	; 0xd56 <FSM_LCD_Process+0xca>
     d6c:	8a c1       	rjmp	.+788    	; 0x1082 <FSM_LCD_Process+0x3f6>
					// Flush FSM timer
					ResetTimer(TIMER_LCD);
					return;
				}
				// When last position is 0, send command to change shift source to cursor
				FSM_PCF8574_AddByteToQueue(PCF8574_OPT_SHIFT_CURSOR | PCF8574_OPT_SHIFT_LEFT, PCF8574_COMMAND, PCF8574_BYTE_FULL, 1);
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	80 e1       	ldi	r24, 0x10	; 16
     d76:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
				// Clear display after animation
				FSM_PCF8574_Clear();
     d7a:	0e 94 be 0b 	call	0x177c	; 0x177c <FSM_PCF8574_Clear>
				// Goto sensor check state
				FSM_state = FSM_LCD_STATE_DRAW_SENSORS_STATE_SCREEN;
     d7e:	85 e0       	ldi	r24, 0x05	; 5
     d80:	cf cf       	rjmp	.-98     	; 0xd20 <FSM_LCD_Process+0x94>
		case FSM_LCD_STATE_DRAW_SENSORS_STATE_SCREEN: {
			// Peripheral presence:
			//  -> RTC ...
			//  -> DHT ...
			//  -> CO2 ...
			FSM_PCF8574_AddStringFromFlash(LNG_DM1_S1);
     d82:	84 ec       	ldi	r24, 0xC4	; 196
     d84:	93 e0       	ldi	r25, 0x03	; 3
     d86:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_AddStringFromFlash(LNG_DM1_S2);
     d8a:	86 eb       	ldi	r24, 0xB6	; 182
     d8c:	93 e0       	ldi	r25, 0x03	; 3
     d8e:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_AddStringFromFlash(LNG_DM1_S3);
     d92:	88 ea       	ldi	r24, 0xA8	; 168
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_AddStringFromFlash(LNG_DM1_S4);
     d9a:	8c e9       	ldi	r24, 0x9C	; 156
     d9c:	93 e0       	ldi	r25, 0x03	; 3
     d9e:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
			// Goto sensors test result
			FSM_state = FSM_LCD_STATE_ANIMATION_SENSORS_STATE_SCREEN;
     da2:	86 e0       	ldi	r24, 0x06	; 6
     da4:	6c c1       	rjmp	.+728    	; 0x107e <FSM_LCD_Process+0x3f2>
		}

		/* Animation sensors check list */
		case FSM_LCD_STATE_ANIMATION_SENSORS_STATE_SCREEN: {
			uint16_t curr_timeout = 500;
			if(current_row == 2) {
     da6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <current_row>
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	19 f4       	brne	.+6      	; 0xdb4 <FSM_LCD_Process+0x128>
				curr_timeout = MHZ19B_REFRESH_PERIOD + 1000;
     dae:	08 e0       	ldi	r16, 0x08	; 8
     db0:	12 e5       	ldi	r17, 0x52	; 82
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <FSM_LCD_Process+0x12c>
			return;
		}

		/* Animation sensors check list */
		case FSM_LCD_STATE_ANIMATION_SENSORS_STATE_SCREEN: {
			uint16_t curr_timeout = 500;
     db4:	04 ef       	ldi	r16, 0xF4	; 244
     db6:	11 e0       	ldi	r17, 0x01	; 1
			if(current_row == 2) {
				curr_timeout = MHZ19B_REFRESH_PERIOD + 1000;
			}

			/* Animate row by row with delay */
			if(GetTimer(TIMER_LCD) > curr_timeout) {
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
     dbe:	08 17       	cp	r16, r24
     dc0:	19 07       	cpc	r17, r25
     dc2:	08 f0       	brcs	.+2      	; 0xdc6 <FSM_LCD_Process+0x13a>
     dc4:	67 c1       	rjmp	.+718    	; 0x1094 <FSM_LCD_Process+0x408>
				// Showing sensors state
				switch(++current_row) {
     dc6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <current_row>
     dca:	8f 5f       	subi	r24, 0xFF	; 255
     dcc:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <current_row>
     dd0:	82 30       	cpi	r24, 0x02	; 2
     dd2:	49 f0       	breq	.+18     	; 0xde6 <FSM_LCD_Process+0x15a>
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	51 f0       	breq	.+20     	; 0xdec <FSM_LCD_Process+0x160>
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	69 f4       	brne	.+26     	; 0xdf6 <FSM_LCD_Process+0x16a>
						FSM_state = FSM_LCD_STATE_IDLE;
						return;
					}
				}
				/* Draw state */
				if(_presence) {
     ddc:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <rtc>
     de0:	99 23       	and	r25, r25
     de2:	99 f0       	breq	.+38     	; 0xe0a <FSM_LCD_Process+0x17e>
     de4:	0c c0       	rjmp	.+24     	; 0xdfe <FSM_LCD_Process+0x172>
						_presence = rtc._presence;
						break;
					}
					/* DHT sensor */
					case 2: {
						if(!dht._failed) {
     de6:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <dht>
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <FSM_LCD_Process+0x164>
						}
						break;
					}
					/* CO2 sensor */
					case 3: {
						if(!mhz19b._error) {
     dec:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <mhz19b+0x1>
     df0:	99 23       	and	r25, r25
     df2:	29 f0       	breq	.+10     	; 0xdfe <FSM_LCD_Process+0x172>
     df4:	0a c0       	rjmp	.+20     	; 0xe0a <FSM_LCD_Process+0x17e>
						break;
					}
					/* Exit to idle state */
					default: {
						// Send message for complete startup detect
						SendMessageWOParam(MSG_CHK_SENSORS_COMPLETE);
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <SendMessageWOParam>
     dfc:	36 c1       	rjmp	.+620    	; 0x106a <FSM_LCD_Process+0x3de>
						return;
					}
				}
				/* Draw state */
				if(_presence) {
					FSM_PCF8574_GoToXY(current_row, PCF8574_COLS-2);
     dfe:	62 e1       	ldi	r22, 0x12	; 18
     e00:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddStringFromFlash(LNG_OK);
     e04:	85 e7       	ldi	r24, 0x75	; 117
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <FSM_LCD_Process+0x188>
				} else {
					FSM_PCF8574_GoToXY(current_row, PCF8574_COLS-4);
     e0a:	60 e1       	ldi	r22, 0x10	; 16
     e0c:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddStringFromFlash(LNG_FAIL);
     e10:	88 e7       	ldi	r24, 0x78	; 120
     e12:	93 e0       	ldi	r25, 0x03	; 3
     e14:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
     e18:	34 c1       	rjmp	.+616    	; 0x1082 <FSM_LCD_Process+0x3f6>
			}
			return;
		}

		case FSM_LCD_STATE_REFRESH_SCREEN: {
			uint8_t _full_refresh = (device.mode != device.last_mode);
     e1a:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <device+0x3>
     e1e:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <device+0x4>
			device.last_mode = device.mode;
     e22:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <device+0x4>

			switch(device.mode) {
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	21 f0       	breq	.+8      	; 0xe32 <FSM_LCD_Process+0x1a6>
     e2a:	82 30       	cpi	r24, 0x02	; 2
     e2c:	09 f4       	brne	.+2      	; 0xe30 <FSM_LCD_Process+0x1a4>
     e2e:	ba c0       	rjmp	.+372    	; 0xfa4 <FSM_LCD_Process+0x318>
     e30:	17 c1       	rjmp	.+558    	; 0x1060 <FSM_LCD_Process+0x3d4>

				case DEVICE_MODE_IDLE: {
					// @TODO: Need optimization

					// If mode was changed - full refresh LCD screen
					if(_full_refresh) {
     e32:	91 30       	cpi	r25, 0x01	; 1
     e34:	91 f0       	breq	.+36     	; 0xe5a <FSM_LCD_Process+0x1ce>
						// Clear display
						FSM_PCF8574_Clear();
     e36:	0e 94 be 0b 	call	0x177c	; 0x177c <FSM_PCF8574_Clear>
						// Load first line of splash string to display
						FSM_PCF8574_GoToXY(0, PCF8574_COLS-3);
     e3a:	61 e1       	ldi	r22, 0x11	; 17
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_POINT);
     e42:	81 e8       	ldi	r24, 0x81	; 129
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
						FSM_PCF8574_GoToXY(3, 0);
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	83 e0       	ldi	r24, 0x03	; 3
     e4e:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
						FSM_PCF8574_AddStringFromFlash(LNG_DM_MAIN_S4);
     e52:	87 e8       	ldi	r24, 0x87	; 135
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
					}

					// Draw date data
					FSM_PCF8574_GoToXY(0, PCF8574_COLS-5);
     e5a:	6f e0       	ldi	r22, 0x0F	; 15
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddString(utoa_cycle_sub8(rtc.day, buff, 0, 2));
     e62:	22 e0       	ldi	r18, 0x02	; 2
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	be 01       	movw	r22, r28
     e68:	6f 5f       	subi	r22, 0xFF	; 255
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <rtc+0x5>
     e70:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <utoa_cycle_sub8>
     e74:	0e 94 4c 0b 	call	0x1698	; 0x1698 <FSM_PCF8574_AddString>
					FSM_PCF8574_GoToXY(0, PCF8574_COLS-2);
     e78:	62 e1       	ldi	r22, 0x12	; 18
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddString(utoa_cycle_sub8(rtc.month, buff, 0, 2));
     e80:	22 e0       	ldi	r18, 0x02	; 2
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	be 01       	movw	r22, r28
     e86:	6f 5f       	subi	r22, 0xFF	; 255
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <rtc+0x6>
     e8e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <utoa_cycle_sub8>
     e92:	0e 94 4c 0b 	call	0x1698	; 0x1698 <FSM_PCF8574_AddString>
					FSM_PCF8574_GoToXY(1, PCF8574_COLS-4);
     e96:	60 e1       	ldi	r22, 0x10	; 16
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddStringFromFlash((char *)LNG_DOW[rtc.dow]);
     e9e:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <rtc+0x4>
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	ee 0f       	add	r30, r30
     ea6:	ff 1f       	adc	r31, r31
     ea8:	ef 5f       	subi	r30, 0xFF	; 255
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
					// Draw T data
					FSM_PCF8574_GoToXY(3, 0);
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
					if(dht.temperature.sign) {
     ebc:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <dht+0x7>
     ec0:	88 23       	and	r24, r24
     ec2:	19 f0       	breq	.+6      	; 0xeca <FSM_LCD_Process+0x23e>
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_MINUS);
     ec4:	8f e7       	ldi	r24, 0x7F	; 127
     ec6:	93 e0       	ldi	r25, 0x03	; 3
     ec8:	02 c0       	rjmp	.+4      	; 0xece <FSM_LCD_Process+0x242>
					} else {
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_SPACE);
     eca:	8d e7       	ldi	r24, 0x7D	; 125
     ecc:	93 e0       	ldi	r25, 0x03	; 3
     ece:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
					}
					FSM_PCF8574_AddString(utoa_cycle_sub8(dht.temperature.value, buff, 1, 2));
     ed2:	22 e0       	ldi	r18, 0x02	; 2
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	be 01       	movw	r22, r28
     ed8:	6f 5f       	subi	r22, 0xFF	; 255
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <dht+0x8>
     ee0:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <utoa_cycle_sub8>
     ee4:	0e 94 4c 0b 	call	0x1698	; 0x1698 <FSM_PCF8574_AddString>
					// Draw H data
					FSM_PCF8574_GoToXY(3, 7);
     ee8:	67 e0       	ldi	r22, 0x07	; 7
     eea:	83 e0       	ldi	r24, 0x03	; 3
     eec:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddString(utoa_cycle_sub8(dht.humidity.value, buff, 1, 2));
     ef0:	22 e0       	ldi	r18, 0x02	; 2
     ef2:	41 e0       	ldi	r20, 0x01	; 1
     ef4:	be 01       	movw	r22, r28
     ef6:	6f 5f       	subi	r22, 0xFF	; 255
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <dht+0xa>
     efe:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <utoa_cycle_sub8>
     f02:	0e 94 4c 0b 	call	0x1698	; 0x1698 <FSM_PCF8574_AddString>
					// Draw CO2 data
					FSM_PCF8574_GoToXY(3,13);
     f06:	6d e0       	ldi	r22, 0x0D	; 13
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddString(utoa_cycle_sub16(mhz19b.value, buff, 4));
     f0e:	44 e0       	ldi	r20, 0x04	; 4
     f10:	be 01       	movw	r22, r28
     f12:	6f 5f       	subi	r22, 0xFF	; 255
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <mhz19b+0x3>
     f1a:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <mhz19b+0x4>
     f1e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <utoa_cycle_sub16>
     f22:	0e 94 4c 0b 	call	0x1698	; 0x1698 <FSM_PCF8574_AddString>
					FSM_PCF8574_GoToXY(3,12);
     f26:	6c e0       	ldi	r22, 0x0C	; 12
     f28:	83 e0       	ldi	r24, 0x03	; 3
     f2a:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
					if(mhz19b._error) {
     f2e:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <mhz19b+0x1>
     f32:	88 23       	and	r24, r24
     f34:	19 f0       	breq	.+6      	; 0xf3c <FSM_LCD_Process+0x2b0>
						FSM_PCF8574_AddStringFromFlash(PSTR("!"));
     f36:	8e e8       	ldi	r24, 0x8E	; 142
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <FSM_LCD_Process+0x2b4>
					} else {
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_SPACE);
     f3c:	8d e7       	ldi	r24, 0x7D	; 125
     f3e:	93 e0       	ldi	r25, 0x03	; 3
     f40:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
					}
					// Draw big clock data
					uint8_t pos = FSM_LCD_AddCustomCharStringToXY(utoa_cycle_sub8(rtc.hour, buff, 1, 2), 0, 0);
     f44:	22 e0       	ldi	r18, 0x02	; 2
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	be 01       	movw	r22, r28
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <rtc+0x3>
     f52:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <utoa_cycle_sub8>
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	0e 94 20 06 	call	0xc40	; 0xc40 <FSM_LCD_AddCustomCharStringToXY>
     f5e:	18 2f       	mov	r17, r24
					FSM_LCD_AddCustomCharStringToXY(utoa_cycle_sub8(rtc.min, buff, 0, 2), 0, ++pos);
     f60:	22 e0       	ldi	r18, 0x02	; 2
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	be 01       	movw	r22, r28
     f66:	6f 5f       	subi	r22, 0xFF	; 255
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <rtc+0x2>
     f6e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <utoa_cycle_sub8>
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	41 0f       	add	r20, r17
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	0e 94 20 06 	call	0xc40	; 0xc40 <FSM_LCD_AddCustomCharStringToXY>
					// Draw blinking colon
					FSM_PCF8574_GoToXY(1,6);
     f7c:	66 e0       	ldi	r22, 0x06	; 6
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
					if((_colon_blink ^= 0x1)) {
     f84:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_colon_blink>
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	89 27       	eor	r24, r25
     f8c:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <_colon_blink>
     f90:	88 23       	and	r24, r24
     f92:	19 f0       	breq	.+6      	; 0xf9a <FSM_LCD_Process+0x30e>
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_COLON);
     f94:	83 e8       	ldi	r24, 0x83	; 131
     f96:	93 e0       	ldi	r25, 0x03	; 3
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <FSM_LCD_Process+0x312>
					} else {
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_SPACE);
     f9a:	8d e7       	ldi	r24, 0x7D	; 125
     f9c:	93 e0       	ldi	r25, 0x03	; 3
     f9e:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
     fa2:	60 c0       	rjmp	.+192    	; 0x1064 <FSM_LCD_Process+0x3d8>
					// /@TODO: Need optimization
					break;
				}

				case DEVICE_MODE_SHOW_MENU: {
					if(device.flags._menu_changed) {
     fa4:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <device+0x7>
     fa8:	88 23       	and	r24, r24
     faa:	09 f4       	brne	.+2      	; 0xfae <FSM_LCD_Process+0x322>
     fac:	5b c0       	rjmp	.+182    	; 0x1064 <FSM_LCD_Process+0x3d8>
						// Flush menu change flag
						device.flags._menu_changed = 0;
     fae:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <device+0x7>
						// Clear display
						FSM_PCF8574_Clear();
     fb2:	0e 94 be 0b 	call	0x177c	; 0x177c <FSM_PCF8574_Clear>
						// Cursor movement procedure
						if((menu_item_t *)pgm_read_word(&last_menu_item->Previous) == (void *)selected_menu_item) {
     fb6:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <last_menu_item>
     fba:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <last_menu_item+0x1>
     fbe:	fc 01       	movw	r30, r24
     fc0:	32 96       	adiw	r30, 0x02	; 2
     fc2:	25 91       	lpm	r18, Z+
     fc4:	34 91       	lpm	r19, Z
     fc6:	40 91 8f 03 	lds	r20, 0x038F	; 0x80038f <selected_menu_item>
     fca:	50 91 90 03 	lds	r21, 0x0390	; 0x800390 <selected_menu_item+0x1>
     fce:	42 17       	cp	r20, r18
     fd0:	53 07       	cpc	r21, r19
     fd2:	39 f4       	brne	.+14     	; 0xfe2 <FSM_LCD_Process+0x356>
							if(device.menu_cursor > 0) {
     fd4:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <device+0x2>
     fd8:	22 23       	and	r18, r18
     fda:	19 f0       	breq	.+6      	; 0xfe2 <FSM_LCD_Process+0x356>
								device.menu_cursor--;
     fdc:	21 50       	subi	r18, 0x01	; 1
     fde:	20 93 ad 03 	sts	0x03AD, r18	; 0x8003ad <device+0x2>
							}
						}
						if((menu_item_t *)pgm_read_word(&last_menu_item->Next) == (void *)selected_menu_item) {
     fe2:	fc 01       	movw	r30, r24
     fe4:	85 91       	lpm	r24, Z+
     fe6:	94 91       	lpm	r25, Z
     fe8:	48 17       	cp	r20, r24
     fea:	59 07       	cpc	r21, r25
     fec:	39 f4       	brne	.+14     	; 0xffc <FSM_LCD_Process+0x370>
							if(device.menu_cursor < PCF8574_ROWS-1) {
     fee:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <device+0x2>
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	18 f4       	brcc	.+6      	; 0xffc <FSM_LCD_Process+0x370>
								device.menu_cursor++;
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <device+0x2>

		/* Animation sensors check list */
		case FSM_LCD_STATE_ANIMATION_SENSORS_STATE_SCREEN: {
			uint16_t curr_timeout = 500;
			if(current_row == 2) {
				curr_timeout = MHZ19B_REFRESH_PERIOD + 1000;
     ffc:	10 e0       	ldi	r17, 0x00	; 0
							}
						}
						// Draw menu on the LCD line by line
						for(uint8_t i=0; i < PCF8574_ROWS; i++) {
							// Draw cursor
							FSM_PCF8574_GoToXY(i,0);
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	81 2f       	mov	r24, r17
    1002:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
							if(device.menu_cursor == i) {
    1006:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <device+0x2>
    100a:	81 13       	cpse	r24, r17
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <FSM_LCD_Process+0x388>
								FSM_PCF8574_AddStringFromFlash(LNG_SMB_ANGLE_BRACKET_RIGHT);
    100e:	85 e8       	ldi	r24, 0x85	; 133
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <FSM_LCD_Process+0x38c>
							} else {
								FSM_PCF8574_AddStringFromFlash(LNG_SMB_SPACE);
    1014:	8d e7       	ldi	r24, 0x7D	; 125
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
							}
							// Draw menu item title
							uint8_t shift = i-device.menu_cursor;
    101c:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <device+0x2>
    1020:	01 2f       	mov	r16, r17
    1022:	08 1b       	sub	r16, r24
							FSM_PCF8574_GoToXY(i,1);
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	81 2f       	mov	r24, r17
    1028:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
							FSM_PCF8574_AddStringFromFlash(MENU_GetMenuTextByShift(shift));
    102c:	80 2f       	mov	r24, r16
    102e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <MENU_GetMenuTextByShift>
    1032:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
							// Draw subcategory symbol
							FSM_PCF8574_GoToXY(i,PCF8574_COLS-2);
    1036:	62 e1       	ldi	r22, 0x12	; 18
    1038:	81 2f       	mov	r24, r17
    103a:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
							FSM_PCF8574_AddStringFromFlash(MENU_GetChildMenuSymbolByShift(shift));
    103e:	80 2f       	mov	r24, r16
    1040:	0e 94 9b 10 	call	0x2136	; 0x2136 <MENU_GetChildMenuSymbolByShift>
    1044:	0e 94 82 0b 	call	0x1704	; 0x1704 <FSM_PCF8574_AddStringFromFlash>
							if(device.menu_cursor < PCF8574_ROWS-1) {
								device.menu_cursor++;
							}
						}
						// Draw menu on the LCD line by line
						for(uint8_t i=0; i < PCF8574_ROWS; i++) {
    1048:	1f 5f       	subi	r17, 0xFF	; 255
    104a:	14 30       	cpi	r17, 0x04	; 4
    104c:	c1 f6       	brne	.-80     	; 0xffe <FSM_LCD_Process+0x372>
							// Draw subcategory symbol
							FSM_PCF8574_GoToXY(i,PCF8574_COLS-2);
							FSM_PCF8574_AddStringFromFlash(MENU_GetChildMenuSymbolByShift(shift));
						}
						// Store last menu item pointer
						last_menu_item = selected_menu_item;
    104e:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <selected_menu_item>
    1052:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <selected_menu_item+0x1>
    1056:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <last_menu_item+0x1>
    105a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <last_menu_item>
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <FSM_LCD_Process+0x3d8>
					}
					break;
				}

				default: {
					FSM_PCF8574_Clear();
    1060:	0e 94 be 0b 	call	0x177c	; 0x177c <FSM_PCF8574_Clear>
					break;
				}
			}
			// Flush FSM timer
			ResetTimer(TIMER_LCD);
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <ResetTimer>
			// Goto idle state
			FSM_state = FSM_LCD_STATE_IDLE;
    106a:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <FSM_state>
			return;
    106e:	12 c0       	rjmp	.+36     	; 0x1094 <FSM_LCD_Process+0x408>
		}

		/* Default work state */
		case FSM_LCD_STATE_IDLE: {
			if(GetTimer(TIMER_LCD) >= LCD_REFRESH_PERIOD || GetMessage(MSG_LCD_REFRESH_DISPLAY)) {
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    1076:	84 3f       	cpi	r24, 0xF4	; 244
    1078:	91 40       	sbci	r25, 0x01	; 1
    107a:	38 f0       	brcs	.+14     	; 0x108a <FSM_LCD_Process+0x3fe>
				// Set next FSM state
				FSM_state = FSM_LCD_STATE_REFRESH_SCREEN;
    107c:	87 e0       	ldi	r24, 0x07	; 7
    107e:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <FSM_state>
				ResetTimer(TIMER_LCD);
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <ResetTimer>
    1088:	05 c0       	rjmp	.+10     	; 0x1094 <FSM_LCD_Process+0x408>
			return;
		}

		/* Default work state */
		case FSM_LCD_STATE_IDLE: {
			if(GetTimer(TIMER_LCD) >= LCD_REFRESH_PERIOD || GetMessage(MSG_LCD_REFRESH_DISPLAY)) {
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GetMessage>
    1090:	81 11       	cpse	r24, r1
    1092:	f4 cf       	rjmp	.-24     	; 0x107c <FSM_LCD_Process+0x3f0>
			return;
		}

		default: break;
	}
}
    1094:	26 96       	adiw	r28, 0x06	; 6
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	08 95       	ret

000010aa <FSM_LEDS_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_LEDS_Init(void)
{
	// Set next FSM state
	FSM_state = FSM_LEDS_STATE_IDLE;
    10aa:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <FSM_state>
	// Initialize leds bitmap
	led_bitmap=0;
    10ae:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <led_bitmap>
    10b2:	08 95       	ret

000010b4 <FSM_LEDS_Process>:
}

void FSM_LEDS_Process(void)
{
    10b4:	cf 93       	push	r28
	switch(FSM_state) {
    10b6:	c0 91 b5 01 	lds	r28, 0x01B5	; 0x8001b5 <FSM_state>
    10ba:	c1 30       	cpi	r28, 0x01	; 1
    10bc:	29 f0       	breq	.+10     	; 0x10c8 <FSM_LEDS_Process+0x14>
    10be:	a8 f1       	brcs	.+106    	; 0x112a <FSM_LEDS_Process+0x76>
    10c0:	c2 30       	cpi	r28, 0x02	; 2
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <FSM_LEDS_Process+0x12>
    10c4:	53 c0       	rjmp	.+166    	; 0x116c <FSM_LEDS_Process+0xb8>
    10c6:	b6 c0       	rjmp	.+364    	; 0x1234 <FSM_LEDS_Process+0x180>

		case FSM_LEDS_PGM_STARTUP: {

			if(GetBCMessage(MSG_BC_SYSTEM_STARTUP_COMPLETE)) {
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <GetBCMessage>
    10ce:	88 23       	and	r24, r24
    10d0:	31 f0       	breq	.+12     	; 0x10de <FSM_LEDS_Process+0x2a>
				// Set next FSM state
				FSM_state = FSM_LEDS_STATE_IDLE;
    10d2:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <FSM_state>
				// Turn OFF RED LED
				LED_RED_OFF();
    10d6:	2a 98       	cbi	0x05, 2	; 5
				// Turn OFF YELLOW LED
				LED_YELLOW_OFF();
    10d8:	29 98       	cbi	0x05, 1	; 5
				// Turn OFF GREEN LED
				LED_GRN_OFF();
    10da:	28 98       	cbi	0x05, 0	; 5
				return;
    10dc:	ab c0       	rjmp	.+342    	; 0x1234 <FSM_LEDS_Process+0x180>
			}

			if(GetTimer(TIMER_LEDS) >= LEDS_CHANGE_PERIOD) {
    10de:	88 e0       	ldi	r24, 0x08	; 8
    10e0:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    10e4:	84 3f       	cpi	r24, 0xF4	; 244
    10e6:	91 40       	sbci	r25, 0x01	; 1
    10e8:	08 f4       	brcc	.+2      	; 0x10ec <FSM_LEDS_Process+0x38>
    10ea:	a4 c0       	rjmp	.+328    	; 0x1234 <FSM_LEDS_Process+0x180>
				// Change color mechanism
				if(led_bitmap++ > 2) { led_bitmap=1;}
    10ec:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <led_bitmap>
    10f0:	83 30       	cpi	r24, 0x03	; 3
    10f2:	20 f4       	brcc	.+8      	; 0x10fc <FSM_LEDS_Process+0x48>
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <led_bitmap>
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <FSM_LEDS_Process+0x4c>
    10fc:	c0 93 b4 01 	sts	0x01B4, r28	; 0x8001b4 <led_bitmap>

				switch(led_bitmap) {
    1100:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <led_bitmap>
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	31 f0       	breq	.+12     	; 0x1114 <FSM_LEDS_Process+0x60>
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	39 f0       	breq	.+14     	; 0x111a <FSM_LEDS_Process+0x66>
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	49 f4       	brne	.+18     	; 0x1122 <FSM_LEDS_Process+0x6e>
					// Switch ON RED
					case 1: {
						LED_RED_ON();
    1110:	2a 9a       	sbi	0x05, 2	; 5
    1112:	08 c0       	rjmp	.+16     	; 0x1124 <FSM_LEDS_Process+0x70>
						LED_GRN_OFF();
						break;
					}
					// Switch ON YELLOW
					case 2: {
						LED_RED_OFF();
    1114:	2a 98       	cbi	0x05, 2	; 5
						LED_YELLOW_ON();
    1116:	29 9a       	sbi	0x05, 1	; 5
    1118:	06 c0       	rjmp	.+12     	; 0x1126 <FSM_LEDS_Process+0x72>
						LED_GRN_OFF();
						break;
					}
					// Switch ON GREEN
					case 3: {
						LED_RED_OFF();
    111a:	2a 98       	cbi	0x05, 2	; 5
						LED_YELLOW_OFF();
    111c:	29 98       	cbi	0x05, 1	; 5
						LED_GRN_ON();
    111e:	28 9a       	sbi	0x05, 0	; 5
						break;
    1120:	0c c0       	rjmp	.+24     	; 0x113a <FSM_LEDS_Process+0x86>
					}
					// Switch OFF all leds
					default: {
						LED_RED_OFF();
    1122:	2a 98       	cbi	0x05, 2	; 5
						LED_YELLOW_OFF();
    1124:	29 98       	cbi	0x05, 1	; 5
						LED_GRN_OFF();
    1126:	28 98       	cbi	0x05, 0	; 5
						break;
    1128:	08 c0       	rjmp	.+16     	; 0x113a <FSM_LEDS_Process+0x86>
			return;
		}

		case FSM_LEDS_STATE_IDLE: {

			if(GetBCMessage(MSG_BC_SYSTEM_STARTUP_RUN)) {
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <GetBCMessage>
    1130:	88 23       	and	r24, r24
    1132:	29 f0       	breq	.+10     	; 0x113e <FSM_LEDS_Process+0x8a>
				// Set next FSM state
				FSM_state = FSM_LEDS_PGM_STARTUP;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <FSM_state>
				// Reset FSM timer
				ResetTimer(TIMER_LEDS);
    113a:	88 e0       	ldi	r24, 0x08	; 8
    113c:	78 c0       	rjmp	.+240    	; 0x122e <FSM_LEDS_Process+0x17a>
				return;
			}

			if(GetMessage(MSG_LEDS_PROCESSING)) {
    113e:	88 e0       	ldi	r24, 0x08	; 8
    1140:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GetMessage>
    1144:	88 23       	and	r24, r24
    1146:	09 f4       	brne	.+2      	; 0x114a <FSM_LEDS_Process+0x96>
    1148:	75 c0       	rjmp	.+234    	; 0x1234 <FSM_LEDS_Process+0x180>
				//
				led_params = GetMessageParam(MSG_LEDS_PROCESSING);
    114a:	88 e0       	ldi	r24, 0x08	; 8
    114c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <GetMessageParam>
    1150:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <led_params+0x1>
    1154:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <led_params>
				//
				led_params->_active = 1;
    1158:	21 e0       	ldi	r18, 0x01	; 1
    115a:	fc 01       	movw	r30, r24
    115c:	21 83       	std	Z+1, r18	; 0x01
				//
				FSM_state = FSM_LEDS_PGM_PROCESSING;
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <FSM_state>
				//
				ResetTimer(TIMER_LEDS);
    1164:	88 e0       	ldi	r24, 0x08	; 8
    1166:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <ResetTimer>
    116a:	60 c0       	rjmp	.+192    	; 0x122c <FSM_LEDS_Process+0x178>
		}

		case FSM_LEDS_PGM_PROCESSING: {

			if(
				(led_params->glow_time_ms != 0xFFFF && GetTimer(TIMER_LEDS) >= led_params->glow_time_ms) ||
    116c:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    1170:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
			return;
		}

		case FSM_LEDS_PGM_PROCESSING: {

			if(
    1174:	85 81       	ldd	r24, Z+5	; 0x05
    1176:	96 81       	ldd	r25, Z+6	; 0x06
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	31 f4       	brne	.+12     	; 0x1188 <FSM_LEDS_Process+0xd4>
				(led_params->glow_time_ms != 0xFFFF && GetTimer(TIMER_LEDS) >= led_params->glow_time_ms) ||
				GetMessage(MSG_LEDS_TURN_OFF)
    117c:	89 e0       	ldi	r24, 0x09	; 9
    117e:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GetMessage>
		}

		case FSM_LEDS_PGM_PROCESSING: {

			if(
				(led_params->glow_time_ms != 0xFFFF && GetTimer(TIMER_LEDS) >= led_params->glow_time_ms) ||
    1182:	88 23       	and	r24, r24
    1184:	99 f0       	breq	.+38     	; 0x11ac <FSM_LEDS_Process+0xf8>
    1186:	0c c0       	rjmp	.+24     	; 0x11a0 <FSM_LEDS_Process+0xec>
    1188:	88 e0       	ldi	r24, 0x08	; 8
    118a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    118e:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    1192:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    1196:	25 81       	ldd	r18, Z+5	; 0x05
    1198:	36 81       	ldd	r19, Z+6	; 0x06
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	70 f3       	brcs	.-36     	; 0x117c <FSM_LEDS_Process+0xc8>
				GetMessage(MSG_LEDS_TURN_OFF)
			) {
				//
				LED_RED_OFF();
    11a0:	2a 98       	cbi	0x05, 2	; 5
				LED_YELLOW_OFF();
    11a2:	29 98       	cbi	0x05, 1	; 5
				LED_GRN_OFF();
    11a4:	28 98       	cbi	0x05, 0	; 5
				//
				FSM_state = FSM_LEDS_STATE_IDLE;
    11a6:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <FSM_state>
				return;
    11aa:	44 c0       	rjmp	.+136    	; 0x1234 <FSM_LEDS_Process+0x180>
			}


			if(led_params->_active) {
    11ac:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    11b0:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    11b4:	81 81       	ldd	r24, Z+1	; 0x01
    11b6:	88 23       	and	r24, r24
    11b8:	19 f1       	breq	.+70     	; 0x1200 <FSM_LEDS_Process+0x14c>
				switch(led_params->color) {
    11ba:	83 81       	ldd	r24, Z+3	; 0x03
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	51 f0       	breq	.+20     	; 0x11d4 <FSM_LEDS_Process+0x120>
    11c0:	30 f0       	brcs	.+12     	; 0x11ce <FSM_LEDS_Process+0x11a>
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	51 f4       	brne	.+20     	; 0x11da <FSM_LEDS_Process+0x126>
						LED_GRN_OFF();
						break;
					}

					case GREEN: {
						LED_RED_OFF();
    11c6:	2a 98       	cbi	0x05, 2	; 5
						LED_YELLOW_OFF();
    11c8:	29 98       	cbi	0x05, 1	; 5
						LED_GRN_ON();
    11ca:	28 9a       	sbi	0x05, 0	; 5
						break;
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <FSM_LEDS_Process+0x126>

			if(led_params->_active) {
				switch(led_params->color) {

					case RED: {
						LED_RED_ON();
    11ce:	2a 9a       	sbi	0x05, 2	; 5
						LED_YELLOW_OFF();
    11d0:	29 98       	cbi	0x05, 1	; 5
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <FSM_LEDS_Process+0x124>
						LED_GRN_OFF();
						break;
					}

					case YELLOW: {
						LED_RED_OFF();
    11d4:	2a 98       	cbi	0x05, 2	; 5
						LED_YELLOW_ON();
    11d6:	29 9a       	sbi	0x05, 1	; 5
						LED_GRN_OFF();
    11d8:	28 98       	cbi	0x05, 0	; 5
						break;
					}
					default: break;
				}

				if(led_params->_blinking && GetTimer(TIMER_LEDS_BLINK) >= LEDS_TURN_ON_PERIOD) {
    11da:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    11de:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	88 23       	and	r24, r24
    11e6:	31 f1       	breq	.+76     	; 0x1234 <FSM_LEDS_Process+0x180>
    11e8:	89 e0       	ldi	r24, 0x09	; 9
    11ea:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    11ee:	84 3f       	cpi	r24, 0xF4	; 244
    11f0:	91 40       	sbci	r25, 0x01	; 1
    11f2:	00 f1       	brcs	.+64     	; 0x1234 <FSM_LEDS_Process+0x180>
					//
					led_params->_active = 0;
    11f4:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    11f8:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    11fc:	11 82       	std	Z+1, r1	; 0x01
    11fe:	16 c0       	rjmp	.+44     	; 0x122c <FSM_LEDS_Process+0x178>
					ResetTimer(TIMER_LEDS_BLINK);
				}

			} else {
				//
				LED_RED_OFF();
    1200:	2a 98       	cbi	0x05, 2	; 5
				LED_YELLOW_OFF();
    1202:	29 98       	cbi	0x05, 1	; 5
				LED_GRN_OFF();
    1204:	28 98       	cbi	0x05, 0	; 5


				if(led_params->_blinking && GetTimer(TIMER_LEDS_BLINK) >= LEDS_TURN_OFF_PERIOD) {
    1206:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    120a:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	88 23       	and	r24, r24
    1212:	81 f0       	breq	.+32     	; 0x1234 <FSM_LEDS_Process+0x180>
    1214:	89 e0       	ldi	r24, 0x09	; 9
    1216:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    121a:	84 3f       	cpi	r24, 0xF4	; 244
    121c:	91 40       	sbci	r25, 0x01	; 1
    121e:	50 f0       	brcs	.+20     	; 0x1234 <FSM_LEDS_Process+0x180>
					//
					led_params->_active = 1;
    1220:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    1224:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	81 83       	std	Z+1, r24	; 0x01
					//
					ResetTimer(TIMER_LEDS_BLINK);
    122c:	89 e0       	ldi	r24, 0x09	; 9
		}

		default: break;
	}

}
    122e:	cf 91       	pop	r28

				if(led_params->_blinking && GetTimer(TIMER_LEDS_BLINK) >= LEDS_TURN_OFF_PERIOD) {
					//
					led_params->_active = 1;
					//
					ResetTimer(TIMER_LEDS_BLINK);
    1230:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <ResetTimer>
		}

		default: break;
	}

}
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <FSM_MHZ19B_ReadDataComplete>:
	return calc_crc;
}

void FSM_MHZ19B_ReadDataComplete(void)
{
	SendMessageWOParam(MSG_MHZ19B_DATA_RECEIVED);
    1238:	84 e0       	ldi	r24, 0x04	; 4
    123a:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <SendMessageWOParam>

0000123e <FSM_MHZ19B_ReadDataError>:
}

void FSM_MHZ19B_ReadDataError(void)
{
	SendMessageWOParam(MSG_MHZ19B_DATA_RECEIVE_ERROR);
    123e:	85 e0       	ldi	r24, 0x05	; 5
    1240:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <SendMessageWOParam>

00001244 <FSM_MHZ19B_Init>:

/* Initialize FSM */
void FSM_MHZ19B_Init(void)
{
	// Flush flags
	mhz19b._presence=0;
    1244:	ea e9       	ldi	r30, 0x9A	; 154
    1246:	f3 e0       	ldi	r31, 0x03	; 3
    1248:	10 82       	st	Z, r1
	mhz19b._error=0;
    124a:	11 82       	std	Z+1, r1	; 0x01
	_first_run=1;
	// Goto initialization FSM
	FSM_state = FSM_MHZ19B_STATE_STARTUP_INIT;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <FSM_state>
    1252:	08 95       	ret

00001254 <FSM_MHZ19B_crc>:
		default: break;
	}
}

uint8_t FSM_MHZ19B_crc(uint8_t *buffer, uint8_t length)
{
    1254:	fc 01       	movw	r30, r24
    1256:	31 96       	adiw	r30, 0x01	; 1
	uint8_t calc_crc=0;
	for(uint8_t i=1; i<length; i++) {
    1258:	91 e0       	ldi	r25, 0x01	; 1
	}
}

uint8_t FSM_MHZ19B_crc(uint8_t *buffer, uint8_t length)
{
	uint8_t calc_crc=0;
    125a:	80 e0       	ldi	r24, 0x00	; 0
	for(uint8_t i=1; i<length; i++) {
    125c:	96 17       	cp	r25, r22
    125e:	20 f4       	brcc	.+8      	; 0x1268 <FSM_MHZ19B_crc+0x14>
		calc_crc += buffer[i];
    1260:	21 91       	ld	r18, Z+
    1262:	82 0f       	add	r24, r18
}

uint8_t FSM_MHZ19B_crc(uint8_t *buffer, uint8_t length)
{
	uint8_t calc_crc=0;
	for(uint8_t i=1; i<length; i++) {
    1264:	9f 5f       	subi	r25, 0xFF	; 255
    1266:	fa cf       	rjmp	.-12     	; 0x125c <FSM_MHZ19B_crc+0x8>
		calc_crc += buffer[i];
	}
	calc_crc = ~calc_crc + 1;
	return calc_crc;
}
    1268:	81 95       	neg	r24
    126a:	08 95       	ret

0000126c <FSM_MHZ19B_Process>:
	FSM_state = FSM_MHZ19B_STATE_STARTUP_INIT;
}

/* Processing FSM */
void FSM_MHZ19B_Process(void)
{
    126c:	cf 92       	push	r12
    126e:	df 92       	push	r13
    1270:	ef 92       	push	r14
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	29 97       	sbiw	r28, 0x09	; 9
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
	switch(FSM_state) {
    128c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <FSM_state>
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	81 f0       	breq	.+32     	; 0x12b4 <FSM_MHZ19B_Process+0x48>
    1294:	08 f1       	brcs	.+66     	; 0x12d8 <FSM_MHZ19B_Process+0x6c>
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	09 f4       	brne	.+2      	; 0x129c <FSM_MHZ19B_Process+0x30>
    129a:	45 c0       	rjmp	.+138    	; 0x1326 <FSM_MHZ19B_Process+0xba>
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	09 f0       	breq	.+2      	; 0x12a2 <FSM_MHZ19B_Process+0x36>
    12a0:	88 c0       	rjmp	.+272    	; 0x13b2 <FSM_MHZ19B_Process+0x146>
    12a2:	8e 01       	movw	r16, r28
    12a4:	0f 5f       	subi	r16, 0xFF	; 255
    12a6:	1f 4f       	sbci	r17, 0xFF	; 255
    12a8:	6e 01       	movw	r12, r28
    12aa:	89 e0       	ldi	r24, 0x09	; 9
    12ac:	c8 0e       	add	r12, r24
    12ae:	d1 1c       	adc	r13, r1
    12b0:	78 01       	movw	r14, r16
    12b2:	5a c0       	rjmp	.+180    	; 0x1368 <FSM_MHZ19B_Process+0xfc>
		/* Send initialization command to the MH-Z19B */
		case FSM_MHZ19B_STATE_STARTUP_INIT: {
			UART_RX_INTERRUPT_DISABLE();
    12b4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    12b8:	8f 76       	andi	r24, 0x6F	; 111
    12ba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
			// Sending set range CMD to the sensor
			UART_SendDataFromFlash(cmd_set_range, 9);
    12be:	69 e0       	ldi	r22, 0x09	; 9
    12c0:	82 ea       	ldi	r24, 0xA2	; 162
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 ad 03 	call	0x75a	; 0x75a <UART_SendDataFromFlash>
			// Sending ABC calibration settings to the sensor
			UART_SendDataFromFlash(cmd_set_abc, 9);
    12c8:	69 e0       	ldi	r22, 0x09	; 9
    12ca:	89 e9       	ldi	r24, 0x99	; 153
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 ad 03 	call	0x75a	; 0x75a <UART_SendDataFromFlash>
			// Goto waiting timeout before other actions
			FSM_state = FSM_MHZ19B_STATE_IDLE;
    12d2:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <FSM_state>
    12d6:	16 c0       	rjmp	.+44     	; 0x1304 <FSM_MHZ19B_Process+0x98>
			return;
		}
		/* Main state */
		case FSM_MHZ19B_STATE_IDLE: {
			/* Prepare read data from MH-Z19B by first run or timeout 20s */
			if(GetTimer(TIMER_MHZ19B) > MHZ19B_REFRESH_PERIOD) {
    12d8:	85 e0       	ldi	r24, 0x05	; 5
    12da:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    12de:	81 32       	cpi	r24, 0x21	; 33
    12e0:	9e 44       	sbci	r25, 0x4E	; 78
    12e2:	08 f4       	brcc	.+2      	; 0x12e6 <FSM_MHZ19B_Process+0x7a>
    12e4:	66 c0       	rjmp	.+204    	; 0x13b2 <FSM_MHZ19B_Process+0x146>
				// Get data command for MH-Z19B
				UART_SendDataFromFlash(cmd_get_data, 9);
    12e6:	69 e0       	ldi	r22, 0x09	; 9
    12e8:	80 e9       	ldi	r24, 0x90	; 144
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 ad 03 	call	0x75a	; 0x75a <UART_SendDataFromFlash>
				// Setup data length and process handlers
				UART_DefferedReadData(9, &FSM_MHZ19B_ReadDataComplete, &FSM_MHZ19B_ReadDataError);
    12f0:	4f e1       	ldi	r20, 0x1F	; 31
    12f2:	59 e0       	ldi	r21, 0x09	; 9
    12f4:	6c e1       	ldi	r22, 0x1C	; 28
    12f6:	79 e0       	ldi	r23, 0x09	; 9
    12f8:	89 e0       	ldi	r24, 0x09	; 9
    12fa:	0e 94 53 04 	call	0x8a6	; 0x8a6 <UART_DefferedReadData>
				// Goto waiting data from MH-Z19B
				FSM_state = FSM_MHZ19B_STATE_GET_DATA;
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <FSM_state>
				ResetTimer(TIMER_MHZ19B);
    1304:	85 e0       	ldi	r24, 0x05	; 5
			FSM_state = FSM_MHZ19B_STATE_IDLE;
			return;
		}
		default: break;
	}
}
    1306:	29 96       	adiw	r28, 0x09	; 9
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	cf 90       	pop	r12
				UART_SendDataFromFlash(cmd_get_data, 9);
				// Setup data length and process handlers
				UART_DefferedReadData(9, &FSM_MHZ19B_ReadDataComplete, &FSM_MHZ19B_ReadDataError);
				// Goto waiting data from MH-Z19B
				FSM_state = FSM_MHZ19B_STATE_GET_DATA;
				ResetTimer(TIMER_MHZ19B);
    1322:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <ResetTimer>
		}

		/* Waiting data and processing */
		case FSM_MHZ19B_STATE_GET_DATA: {
			// Data was received without errors
			if(GetMessage(MSG_MHZ19B_DATA_RECEIVED)) {
    1326:	84 e0       	ldi	r24, 0x04	; 4
    1328:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GetMessage>
    132c:	88 23       	and	r24, r24
    132e:	31 f0       	breq	.+12     	; 0x133c <FSM_MHZ19B_Process+0xd0>
				// Flush error flag
				mhz19b._error=0;
    1330:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <mhz19b+0x1>
				// Goto data processing state
				FSM_state = FSM_MHZ19B_STATE_PROCESSING_DATA;
    1334:	84 e0       	ldi	r24, 0x04	; 4
    1336:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <FSM_state>
				return;
    133a:	3b c0       	rjmp	.+118    	; 0x13b2 <FSM_MHZ19B_Process+0x146>
			}
			// Data was not received correctly
			if(GetMessage(MSG_MHZ19B_DATA_RECEIVE_ERROR)) {
    133c:	85 e0       	ldi	r24, 0x05	; 5
    133e:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GetMessage>
    1342:	88 23       	and	r24, r24
    1344:	41 f0       	breq	.+16     	; 0x1356 <FSM_MHZ19B_Process+0xea>
				// Set error flag
				mhz19b._error=1;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <mhz19b+0x1>
				// Set error handle - DATA CORRUPT
				mhz19b.error=MHZ19B_ERROR_DATA_CORRUPT;
    134c:	82 e0       	ldi	r24, 0x02	; 2
    134e:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <mhz19b+0x2>
				FSM_state = FSM_MHZ19B_STATE_IDLE;
    1352:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <FSM_state>
			}
			// Data was not received to the timeout end
			if(GetTimer(TIMER_MHZ19B) > MHZ19B_REFRESH_TIMEOUT) {
    1356:	85 e0       	ldi	r24, 0x05	; 5
    1358:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    135c:	c3 97       	sbiw	r24, 0x33	; 51
    135e:	48 f1       	brcs	.+82     	; 0x13b2 <FSM_MHZ19B_Process+0x146>
				// Set error flag
				mhz19b._error=1;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <mhz19b+0x1>
    1366:	15 c0       	rjmp	.+42     	; 0x1392 <FSM_MHZ19B_Process+0x126>
		case FSM_MHZ19B_STATE_PROCESSING_DATA: {
			uint8_t buff[9];
			uint8_t curr_crc;
			// Copy received data to temporary buffer
			for(uint8_t i=0; i<8; i++) {
				buff[i] = UART_Read();
    1368:	0e 94 42 04 	call	0x884	; 0x884 <UART_Read>
    136c:	f8 01       	movw	r30, r16
    136e:	81 93       	st	Z+, r24
    1370:	8f 01       	movw	r16, r30
		/* Processing received data */
		case FSM_MHZ19B_STATE_PROCESSING_DATA: {
			uint8_t buff[9];
			uint8_t curr_crc;
			// Copy received data to temporary buffer
			for(uint8_t i=0; i<8; i++) {
    1372:	ec 15       	cp	r30, r12
    1374:	fd 05       	cpc	r31, r13
    1376:	c1 f7       	brne	.-16     	; 0x1368 <FSM_MHZ19B_Process+0xfc>
				buff[i] = UART_Read();
			}
			curr_crc = UART_Read();
    1378:	0e 94 42 04 	call	0x884	; 0x884 <UART_Read>
    137c:	18 2f       	mov	r17, r24
			// Check CRC match
			if(curr_crc != FSM_MHZ19B_crc(buff, 8)) {
    137e:	68 e0       	ldi	r22, 0x08	; 8
    1380:	c7 01       	movw	r24, r14
    1382:	0e 94 2a 09 	call	0x1254	; 0x1254 <FSM_MHZ19B_crc>
    1386:	18 17       	cp	r17, r24
    1388:	39 f0       	breq	.+14     	; 0x1398 <FSM_MHZ19B_Process+0x12c>
				// Set error flag
				mhz19b._error=1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <mhz19b+0x1>
				// Set error handle - CRC ERROR
				mhz19b.error=MHZ19B_ERROR_CRC;
    1390:	84 e0       	ldi	r24, 0x04	; 4
    1392:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <mhz19b+0x2>
    1396:	0b c0       	rjmp	.+22     	; 0x13ae <FSM_MHZ19B_Process+0x142>
				FSM_state = FSM_MHZ19B_STATE_IDLE;
				return;
			}
			// Get sensor value
			mhz19b.value = ((buff[2]<<8) + buff[3]);
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	98 2f       	mov	r25, r24
    139e:	88 27       	eor	r24, r24
    13a0:	2c 81       	ldd	r18, Y+4	; 0x04
    13a2:	82 0f       	add	r24, r18
    13a4:	91 1d       	adc	r25, r1
    13a6:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <mhz19b+0x4>
    13aa:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <mhz19b+0x3>
			FSM_state = FSM_MHZ19B_STATE_IDLE;
    13ae:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <FSM_state>
			return;
		}
		default: break;
	}
}
    13b2:	29 96       	adiw	r28, 0x09	; 9
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	ff 90       	pop	r15
    13c8:	ef 90       	pop	r14
    13ca:	df 90       	pop	r13
    13cc:	cf 90       	pop	r12
    13ce:	08 95       	ret

000013d0 <FSM_PCF8574_Init>:

/* Add char from flash to LCD */
void FSM_PCF8574_AddRAWCharFromFlash(const char *chr)
{
	char c = pgm_read_byte(*chr);
	FSM_PCF8574_AddRAWChar(c);
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <FSM_state>
    13d6:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <ResetTimer>

000013da <FSM_PCF8574_AddByteToQueue>:
    13da:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <pcf8574+0x4>
    13de:	90 3a       	cpi	r25, 0xA0	; 160
    13e0:	38 f5       	brcc	.+78     	; 0x1430 <FSM_PCF8574_AddByteToQueue+0x56>
    13e2:	5f b7       	in	r21, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <pcf8574+0x2>
    13ea:	30 91 4c 02 	lds	r19, 0x024C	; 0x80024c <pcf8574+0x4>
    13ee:	e9 2f       	mov	r30, r25
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	df 01       	movw	r26, r30
    13f4:	aa 0f       	add	r26, r26
    13f6:	bb 1f       	adc	r27, r27
    13f8:	a8 5b       	subi	r26, 0xB8	; 184
    13fa:	bd 4f       	sbci	r27, 0xFD	; 253
    13fc:	15 96       	adiw	r26, 0x05	; 5
    13fe:	8c 93       	st	X, r24
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	e2 5b       	subi	r30, 0xB2	; 178
    1406:	fd 4f       	sbci	r31, 0xFD	; 253
    1408:	46 2b       	or	r20, r22
    140a:	2f 73       	andi	r18, 0x3F	; 63
    140c:	42 2b       	or	r20, r18
    140e:	40 83       	st	Z, r20
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	83 0f       	add	r24, r19
    1414:	90 3a       	cpi	r25, 0xA0	; 160
    1416:	38 f4       	brcc	.+14     	; 0x1426 <FSM_PCF8574_AddByteToQueue+0x4c>
    1418:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <pcf8574+0x4>
    141c:	9f 5f       	subi	r25, 0xFF	; 255
    141e:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <pcf8574+0x2>
    1422:	5f bf       	out	0x3f, r21	; 63
    1424:	08 95       	ret
    1426:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <pcf8574+0x2>
    142a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <pcf8574+0x4>
    142e:	f9 cf       	rjmp	.-14     	; 0x1422 <FSM_PCF8574_AddByteToQueue+0x48>
    1430:	08 95       	ret

00001432 <FSM_PCF8574_Process>:
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	00 d0       	rcall	.+0      	; 0x143c <FSM_PCF8574_Process+0xa>
    143c:	00 d0       	rcall	.+0      	; 0x143e <FSM_PCF8574_Process+0xc>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <FSM_state>
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	09 f4       	brne	.+2      	; 0x144c <FSM_PCF8574_Process+0x1a>
    144a:	92 c0       	rjmp	.+292    	; 0x1570 <FSM_PCF8574_Process+0x13e>
    144c:	30 f0       	brcs	.+12     	; 0x145a <FSM_PCF8574_Process+0x28>
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	61 f0       	breq	.+24     	; 0x146a <FSM_PCF8574_Process+0x38>
    1452:	83 30       	cpi	r24, 0x03	; 3
    1454:	09 f4       	brne	.+2      	; 0x1458 <FSM_PCF8574_Process+0x26>
    1456:	58 c0       	rjmp	.+176    	; 0x1508 <FSM_PCF8574_Process+0xd6>
    1458:	da c0       	rjmp	.+436    	; 0x160e <FSM_PCF8574_Process+0x1dc>
    145a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <pcf8574+0x4>
    145e:	88 23       	and	r24, r24
    1460:	09 f4       	brne	.+2      	; 0x1464 <FSM_PCF8574_Process+0x32>
    1462:	d5 c0       	rjmp	.+426    	; 0x160e <FSM_PCF8574_Process+0x1dc>
    1464:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <pcf8574_byte+0x2>
    1468:	81 c0       	rjmp	.+258    	; 0x156c <FSM_PCF8574_Process+0x13a>
    146a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <i2c>
    146e:	88 23       	and	r24, r24
    1470:	21 f0       	breq	.+8      	; 0x147a <FSM_PCF8574_Process+0x48>
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <ResetTimer>
    1478:	ca c0       	rjmp	.+404    	; 0x160e <FSM_PCF8574_Process+0x1dc>
    147a:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pcf8574_byte+0x2>
    147e:	81 11       	cpse	r24, r1
    1480:	05 c0       	rjmp	.+10     	; 0x148c <FSM_PCF8574_Process+0x5a>
    1482:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <pcf8574+0x4>
    1486:	81 11       	cpse	r24, r1
    1488:	0b c0       	rjmp	.+22     	; 0x14a0 <FSM_PCF8574_Process+0x6e>
    148a:	39 c0       	rjmp	.+114    	; 0x14fe <FSM_PCF8574_Process+0xcc>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    1492:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <pcf8574_byte+0x2>
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	28 17       	cp	r18, r24
    149a:	39 07       	cpc	r19, r25
    149c:	90 f3       	brcs	.-28     	; 0x1482 <FSM_PCF8574_Process+0x50>
    149e:	b7 c0       	rjmp	.+366    	; 0x160e <FSM_PCF8574_Process+0x1dc>
    14a0:	81 50       	subi	r24, 0x01	; 1
    14a2:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <pcf8574+0x4>
    14a6:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <pcf8574+0x3>
    14aa:	82 2f       	mov	r24, r18
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	fc 01       	movw	r30, r24
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	e2 5b       	subi	r30, 0xB2	; 178
    14b6:	fd 4f       	sbci	r31, 0xFD	; 253
    14b8:	30 81       	ld	r19, Z
    14ba:	43 2f       	mov	r20, r19
    14bc:	40 78       	andi	r20, 0x80	; 128
    14be:	40 93 b8 01 	sts	0x01B8, r20	; 0x8001b8 <pcf8574_byte+0x1>
    14c2:	43 2f       	mov	r20, r19
    14c4:	40 74       	andi	r20, 0x40	; 64
    14c6:	40 93 b7 01 	sts	0x01B7, r20	; 0x8001b7 <pcf8574_byte>
    14ca:	3f 73       	andi	r19, 0x3F	; 63
    14cc:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <pcf8574_byte+0x2>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	fc 01       	movw	r30, r24
    14d6:	e8 5b       	subi	r30, 0xB8	; 184
    14d8:	fd 4f       	sbci	r31, 0xFD	; 253
    14da:	85 81       	ldd	r24, Z+5	; 0x05
    14dc:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <pcf8574_byte+0x3>
    14e0:	20 3a       	cpi	r18, 0xA0	; 160
    14e2:	20 f4       	brcc	.+8      	; 0x14ec <FSM_PCF8574_Process+0xba>
    14e4:	2f 5f       	subi	r18, 0xFF	; 255
    14e6:	20 93 4b 02 	sts	0x024B, r18	; 0x80024b <pcf8574+0x3>
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <FSM_PCF8574_Process+0xbe>
    14ec:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <pcf8574+0x3>
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pcf8574>
    14f6:	83 e0       	ldi	r24, 0x03	; 3
    14f8:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <FSM_state>
    14fc:	88 c0       	rjmp	.+272    	; 0x160e <FSM_PCF8574_Process+0x1dc>
    14fe:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <pcf8574>
    1502:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <FSM_state>
    1506:	83 c0       	rjmp	.+262    	; 0x160e <FSM_PCF8574_Process+0x1dc>
    1508:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <i2c>
    150c:	81 11       	cpse	r24, r1
    150e:	7f c0       	rjmp	.+254    	; 0x160e <FSM_PCF8574_Process+0x1dc>
    1510:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <pcf8574_byte>
    1514:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <pcf8574_byte+0x3>
    1518:	68 2f       	mov	r22, r24
    151a:	62 95       	swap	r22
    151c:	60 7f       	andi	r22, 0xF0	; 240
    151e:	28 2f       	mov	r18, r24
    1520:	20 7f       	andi	r18, 0xF0	; 240
    1522:	70 91 b8 01 	lds	r23, 0x01B8	; 0x8001b8 <pcf8574_byte+0x1>
    1526:	fe 01       	movw	r30, r28
    1528:	31 96       	adiw	r30, 0x01	; 1
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	cf 01       	movw	r24, r30
    152e:	55 23       	and	r21, r21
    1530:	11 f0       	breq	.+4      	; 0x1536 <FSM_PCF8574_Process+0x104>
    1532:	42 30       	cpi	r20, 0x02	; 2
    1534:	a9 f0       	breq	.+42     	; 0x1560 <FSM_PCF8574_Process+0x12e>
    1536:	3e ef       	ldi	r19, 0xFE	; 254
    1538:	34 0f       	add	r19, r20
    153a:	32 30       	cpi	r19, 0x02	; 2
    153c:	10 f0       	brcs	.+4      	; 0x1542 <FSM_PCF8574_Process+0x110>
    153e:	20 83       	st	Z, r18
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <FSM_PCF8574_Process+0x112>
    1542:	60 83       	st	Z, r22
    1544:	70 38       	cpi	r23, 0x80	; 128
    1546:	19 f4       	brne	.+6      	; 0x154e <FSM_PCF8574_Process+0x11c>
    1548:	30 81       	ld	r19, Z
    154a:	31 60       	ori	r19, 0x01	; 1
    154c:	30 83       	st	Z, r19
    154e:	40 fd       	sbrc	r20, 0
    1550:	03 c0       	rjmp	.+6      	; 0x1558 <FSM_PCF8574_Process+0x126>
    1552:	30 81       	ld	r19, Z
    1554:	32 60       	ori	r19, 0x02	; 2
    1556:	30 83       	st	Z, r19
    1558:	4f 5f       	subi	r20, 0xFF	; 255
    155a:	31 96       	adiw	r30, 0x01	; 1
    155c:	44 30       	cpi	r20, 0x04	; 4
    155e:	39 f7       	brne	.-50     	; 0x152e <FSM_PCF8574_Process+0xfc>
    1560:	00 e0       	ldi	r16, 0x00	; 0
    1562:	10 e0       	ldi	r17, 0x00	; 0
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	60 e4       	ldi	r22, 0x40	; 64
    1568:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_TransmitTo>
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	c4 cf       	rjmp	.-120    	; 0x14f8 <FSM_PCF8574_Process+0xc6>
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    1576:	80 35       	cpi	r24, 0x50	; 80
    1578:	91 05       	cpc	r25, r1
    157a:	08 f4       	brcc	.+2      	; 0x157e <FSM_PCF8574_Process+0x14c>
    157c:	48 c0       	rjmp	.+144    	; 0x160e <FSM_PCF8574_Process+0x1dc>
    157e:	8f b7       	in	r24, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	e8 e4       	ldi	r30, 0x48	; 72
    1584:	f2 e0       	ldi	r31, 0x02	; 2
    1586:	28 e8       	ldi	r18, 0x88	; 136
    1588:	33 e0       	ldi	r19, 0x03	; 3
    158a:	15 82       	std	Z+5, r1	; 0x05
    158c:	16 82       	std	Z+6, r1	; 0x06
    158e:	32 96       	adiw	r30, 0x02	; 2
    1590:	2e 17       	cp	r18, r30
    1592:	3f 07       	cpc	r19, r31
    1594:	d1 f7       	brne	.-12     	; 0x158a <FSM_PCF8574_Process+0x158>
    1596:	8f bf       	out	0x3f, r24	; 63
    1598:	24 e1       	ldi	r18, 0x14	; 20
    159a:	40 e4       	ldi	r20, 0x40	; 64
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	80 e3       	ldi	r24, 0x30	; 48
    15a0:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    15a4:	25 e0       	ldi	r18, 0x05	; 5
    15a6:	40 e4       	ldi	r20, 0x40	; 64
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	80 e3       	ldi	r24, 0x30	; 48
    15ac:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	40 e4       	ldi	r20, 0x40	; 64
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	80 e3       	ldi	r24, 0x30	; 48
    15b8:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	40 e4       	ldi	r20, 0x40	; 64
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	80 e2       	ldi	r24, 0x20	; 32
    15c4:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	88 e2       	ldi	r24, 0x28	; 40
    15d0:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	88 e0       	ldi	r24, 0x08	; 8
    15dc:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    15e0:	22 e0       	ldi	r18, 0x02	; 2
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	8c e0       	ldi	r24, 0x0C	; 12
    15f4:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	86 e0       	ldi	r24, 0x06	; 6
    1600:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    1604:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <FSM_state>
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <SendBCMessage>
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	08 95       	ret

00001620 <FSM_PCF8574_CreateCharacterFromFlash>:
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	eb 01       	movw	r28, r22
    162a:	28 e0       	ldi	r18, 0x08	; 8
    162c:	82 9f       	mul	r24, r18
    162e:	c0 01       	movw	r24, r0
    1630:	11 24       	eor	r1, r1
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	80 64       	ori	r24, 0x40	; 64
    163a:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    163e:	8e 01       	movw	r16, r28
    1640:	08 5f       	subi	r16, 0xF8	; 248
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	fe 01       	movw	r30, r28
    1646:	84 91       	lpm	r24, Z
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	60 e8       	ldi	r22, 0x80	; 128
    164e:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    1652:	21 96       	adiw	r28, 0x01	; 1
    1654:	c0 17       	cp	r28, r16
    1656:	d1 07       	cpc	r29, r17
    1658:	a9 f7       	brne	.-22     	; 0x1644 <FSM_PCF8574_CreateCharacterFromFlash+0x24>
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	40 e0       	ldi	r20, 0x00	; 0
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	80 e8       	ldi	r24, 0x80	; 128
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	1f 91       	pop	r17
    1668:	0f 91       	pop	r16
    166a:	0c 94 ed 09 	jmp	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>

0000166e <FSM_PCF8574_GoToXY>:
    166e:	cf 93       	push	r28
    1670:	c8 2f       	mov	r28, r24
    1672:	80 ff       	sbrs	r24, 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <FSM_PCF8574_GoToXY+0xc>
    1676:	80 e4       	ldi	r24, 0x40	; 64
    1678:	01 c0       	rjmp	.+2      	; 0x167c <FSM_PCF8574_GoToXY+0xe>
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	c2 30       	cpi	r28, 0x02	; 2
    167e:	08 f0       	brcs	.+2      	; 0x1682 <FSM_PCF8574_GoToXY+0x14>
    1680:	8c 5e       	subi	r24, 0xEC	; 236
    1682:	86 0f       	add	r24, r22
    1684:	21 e0       	ldi	r18, 0x01	; 1
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	80 68       	ori	r24, 0x80	; 128
    168c:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    1690:	c0 93 49 02 	sts	0x0249, r28	; 0x800249 <pcf8574+0x1>
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <FSM_PCF8574_AddString>:
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	8c 01       	movw	r16, r24
    16a2:	f8 01       	movw	r30, r16
    16a4:	c1 91       	ld	r28, Z+
    16a6:	8f 01       	movw	r16, r30
    16a8:	cc 23       	and	r28, r28
    16aa:	39 f1       	breq	.+78     	; 0x16fa <FSM_PCF8574_AddString+0x62>
    16ac:	ca 30       	cpi	r28, 0x0A	; 10
    16ae:	31 f0       	breq	.+12     	; 0x16bc <FSM_PCF8574_AddString+0x24>
    16b0:	cd 30       	cpi	r28, 0x0D	; 13
    16b2:	71 f0       	breq	.+28     	; 0x16d0 <FSM_PCF8574_AddString+0x38>
    16b4:	c9 30       	cpi	r28, 0x09	; 9
    16b6:	d1 f4       	brne	.+52     	; 0x16ec <FSM_PCF8574_AddString+0x54>
    16b8:	d4 e0       	ldi	r29, 0x04	; 4
    16ba:	10 c0       	rjmp	.+32     	; 0x16dc <FSM_PCF8574_AddString+0x44>
    16bc:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <pcf8574+0x1>
    16c0:	84 30       	cpi	r24, 0x04	; 4
    16c2:	20 f4       	brcc	.+8      	; 0x16cc <FSM_PCF8574_AddString+0x34>
    16c4:	8f 5f       	subi	r24, 0xFF	; 255
    16c6:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <pcf8574+0x1>
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <FSM_PCF8574_AddString+0x38>
    16cc:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <pcf8574+0x1>
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <pcf8574+0x1>
    16d6:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
    16da:	e3 cf       	rjmp	.-58     	; 0x16a2 <FSM_PCF8574_AddString+0xa>
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	60 e8       	ldi	r22, 0x80	; 128
    16e2:	80 e2       	ldi	r24, 0x20	; 32
    16e4:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    16e8:	d1 50       	subi	r29, 0x01	; 1
    16ea:	c1 f7       	brne	.-16     	; 0x16dc <FSM_PCF8574_AddString+0x44>
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	60 e8       	ldi	r22, 0x80	; 128
    16f2:	8c 2f       	mov	r24, r28
    16f4:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    16f8:	d4 cf       	rjmp	.-88     	; 0x16a2 <FSM_PCF8574_AddString+0xa>
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	08 95       	ret

00001704 <FSM_PCF8574_AddStringFromFlash>:
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	8c 01       	movw	r16, r24
    170e:	f8 01       	movw	r30, r16
    1710:	c4 91       	lpm	r28, Z
    1712:	cc 23       	and	r28, r28
    1714:	49 f1       	breq	.+82     	; 0x1768 <FSM_PCF8574_AddStringFromFlash+0x64>
    1716:	ca 30       	cpi	r28, 0x0A	; 10
    1718:	31 f0       	breq	.+12     	; 0x1726 <FSM_PCF8574_AddStringFromFlash+0x22>
    171a:	cd 30       	cpi	r28, 0x0D	; 13
    171c:	71 f0       	breq	.+28     	; 0x173a <FSM_PCF8574_AddStringFromFlash+0x36>
    171e:	c9 30       	cpi	r28, 0x09	; 9
    1720:	d1 f4       	brne	.+52     	; 0x1756 <FSM_PCF8574_AddStringFromFlash+0x52>
    1722:	d4 e0       	ldi	r29, 0x04	; 4
    1724:	10 c0       	rjmp	.+32     	; 0x1746 <FSM_PCF8574_AddStringFromFlash+0x42>
    1726:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <pcf8574+0x1>
    172a:	84 30       	cpi	r24, 0x04	; 4
    172c:	20 f4       	brcc	.+8      	; 0x1736 <FSM_PCF8574_AddStringFromFlash+0x32>
    172e:	8f 5f       	subi	r24, 0xFF	; 255
    1730:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <pcf8574+0x1>
    1734:	02 c0       	rjmp	.+4      	; 0x173a <FSM_PCF8574_AddStringFromFlash+0x36>
    1736:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <pcf8574+0x1>
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <pcf8574+0x1>
    1740:	0e 94 37 0b 	call	0x166e	; 0x166e <FSM_PCF8574_GoToXY>
    1744:	0e c0       	rjmp	.+28     	; 0x1762 <FSM_PCF8574_AddStringFromFlash+0x5e>
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	60 e8       	ldi	r22, 0x80	; 128
    174c:	80 e2       	ldi	r24, 0x20	; 32
    174e:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    1752:	d1 50       	subi	r29, 0x01	; 1
    1754:	c1 f7       	brne	.-16     	; 0x1746 <FSM_PCF8574_AddStringFromFlash+0x42>
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	60 e8       	ldi	r22, 0x80	; 128
    175c:	8c 2f       	mov	r24, r28
    175e:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
    1762:	0f 5f       	subi	r16, 0xFF	; 255
    1764:	1f 4f       	sbci	r17, 0xFF	; 255
    1766:	d3 cf       	rjmp	.-90     	; 0x170e <FSM_PCF8574_AddStringFromFlash+0xa>
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	08 95       	ret

00001772 <FSM_PCF8574_AddRAWChar>:
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	60 e8       	ldi	r22, 0x80	; 128
    1778:	0c 94 ed 09 	jmp	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>

0000177c <FSM_PCF8574_Clear>:
}

/* Clear LCD display */
void FSM_PCF8574_Clear(void)
{
	FSM_PCF8574_AddByteToQueue(PCF8574_CMD_CLEAR_DISPLAY, PCF8574_COMMAND, PCF8574_BYTE_FULL, 2);
    177c:	22 e0       	ldi	r18, 0x02	; 2
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	0e 94 ed 09 	call	0x13da	; 0x13da <FSM_PCF8574_AddByteToQueue>
	pcf8574.last_row=0;
    1788:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <pcf8574+0x1>
    178c:	08 95       	ret

0000178e <FSM_SYSTEM_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_SYSTEM_Init(void)
{
	// Set default concentration level to unknown
	device.concentration_level = device.last_concentration_level = DEVICE_CONCENTRATION_UNKNOWN;
    178e:	eb ea       	ldi	r30, 0xAB	; 171
    1790:	f3 e0       	ldi	r31, 0x03	; 3
    1792:	16 82       	std	Z+6, r1	; 0x06
    1794:	15 82       	std	Z+5, r1	; 0x05
	// Set default FSM state
	FSM_state = FSM_SYSTEM_STATE_STARTUP;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <FSM_state>
	// Flush FSM timer
	ResetTimer(TIMER_SYSTEM);
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <ResetTimer>

000017a2 <FSM_SYSTEM_Process>:
}

void FSM_SYSTEM_Process(void)
{
	switch(FSM_state) {
    17a2:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <FSM_state>
    17a6:	21 30       	cpi	r18, 0x01	; 1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <FSM_SYSTEM_Process+0xa>
    17aa:	9d c0       	rjmp	.+314    	; 0x18e6 <FSM_SYSTEM_Process+0x144>
    17ac:	38 f0       	brcs	.+14     	; 0x17bc <FSM_SYSTEM_Process+0x1a>
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <FSM_SYSTEM_Process+0x12>
    17b2:	a6 c0       	rjmp	.+332    	; 0x1900 <FSM_SYSTEM_Process+0x15e>
    17b4:	23 30       	cpi	r18, 0x03	; 3
    17b6:	09 f4       	brne	.+2      	; 0x17ba <FSM_SYSTEM_Process+0x18>
    17b8:	b1 c0       	rjmp	.+354    	; 0x191c <FSM_SYSTEM_Process+0x17a>
    17ba:	08 95       	ret

		case FSM_SYSTEM_STATE_IDLE: {
			/************************************************************************/
			/* Button processing                                                    */
			/************************************************************************/
			if(GetMessage(MSG_BTN_KEY_PRESSED)) { // <- Press message processing
    17bc:	87 e0       	ldi	r24, 0x07	; 7
    17be:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GetMessage>
    17c2:	88 23       	and	r24, r24
    17c4:	69 f1       	breq	.+90     	; 0x1820 <FSM_SYSTEM_Process+0x7e>
				// Getting press type
				uint8_t *press_type = GetMessageParam(MSG_BTN_KEY_PRESSED);
    17c6:	87 e0       	ldi	r24, 0x07	; 7
    17c8:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <GetMessageParam>
				// Processing button press by press time
				if(*press_type == BUTTON_EVENT_LONG_PRESS) {
    17cc:	fc 01       	movw	r30, r24
    17ce:	90 81       	ld	r25, Z
    17d0:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <device+0x3>
    17d4:	92 30       	cpi	r25, 0x02	; 2
    17d6:	61 f4       	brne	.+24     	; 0x17f0 <FSM_SYSTEM_Process+0x4e>
					if(device.mode != DEVICE_MODE_SHOW_MENU) {
    17d8:	82 30       	cpi	r24, 0x02	; 2
    17da:	11 f1       	breq	.+68     	; 0x1820 <FSM_SYSTEM_Process+0x7e>
						// Set device mode
						device.mode = DEVICE_MODE_SHOW_MENU;
    17dc:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <device+0x3>
						device.menu_cursor=0;
    17e0:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <device+0x2>
						MENU_Start();
    17e4:	0e 94 67 10 	call	0x20ce	; 0x20ce <MENU_Start>
						SendMessageWOParam(MSG_LCD_REFRESH_DISPLAY);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <SendMessageWOParam>
    17ee:	18 c0       	rjmp	.+48     	; 0x1820 <FSM_SYSTEM_Process+0x7e>
					}
				} else {
					// Processing key press action by device modes
					switch(device.mode) {
    17f0:	82 30       	cpi	r24, 0x02	; 2
    17f2:	b1 f4       	brne	.+44     	; 0x1820 <FSM_SYSTEM_Process+0x7e>

						case DEVICE_MODE_SHOW_MENU: {
							switch(MENU_SELECT) {
    17f4:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <selected_menu_item>
    17f8:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <selected_menu_item+0x1>
    17fc:	fc 01       	movw	r30, r24
    17fe:	38 96       	adiw	r30, 0x08	; 8
    1800:	e4 91       	lpm	r30, Z
    1802:	e1 30       	cpi	r30, 0x01	; 1
    1804:	11 f4       	brne	.+4      	; 0x180a <FSM_SYSTEM_Process+0x68>
								case MENU_ACTION_CANCEL: { // <- EXIT menu action
									device.mode = DEVICE_MODE_IDLE;
    1806:	e0 93 ae 03 	sts	0x03AE, r30	; 0x8003ae <device+0x3>
								}

								default: break;
							}

							device.menu_cursor=0;
    180a:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <device+0x2>
							MENU_Change(MENU_CHILD);
    180e:	fc 01       	movw	r30, r24
    1810:	36 96       	adiw	r30, 0x06	; 6
    1812:	85 91       	lpm	r24, Z+
    1814:	94 91       	lpm	r25, Z
    1816:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <MENU_Change>
							SendMessageWOParam(MSG_LCD_REFRESH_DISPLAY);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <SendMessageWOParam>
			}

			/************************************************************************/
			/* Encoder processing                                                   */
			/************************************************************************/
			if(GetMessage(MSG_ENC_ROTATE)) {
    1820:	86 e0       	ldi	r24, 0x06	; 6
    1822:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GetMessage>
    1826:	88 23       	and	r24, r24
    1828:	b9 f0       	breq	.+46     	; 0x1858 <FSM_SYSTEM_Process+0xb6>
				// Get rotate direction
				int8_t *rotate = GetMessageParam(MSG_ENC_ROTATE);
    182a:	86 e0       	ldi	r24, 0x06	; 6
    182c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <GetMessageParam>
				// Processing rotate action by device modes
				switch(device.mode) {
    1830:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <device+0x3>
    1834:	22 30       	cpi	r18, 0x02	; 2
    1836:	81 f4       	brne	.+32     	; 0x1858 <FSM_SYSTEM_Process+0xb6>
					// SHOW MENU mode rotate processing
					case DEVICE_MODE_SHOW_MENU: {
						if(*rotate > 0) {
    1838:	fc 01       	movw	r30, r24
    183a:	80 81       	ld	r24, Z
    183c:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <selected_menu_item>
    1840:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <selected_menu_item+0x1>
    1844:	18 16       	cp	r1, r24
    1846:	0c f0       	brlt	.+2      	; 0x184a <FSM_SYSTEM_Process+0xa8>
							MENU_Change(MENU_NEXT);
						} else {
							MENU_Change(MENU_PREVIOUS);
    1848:	32 96       	adiw	r30, 0x02	; 2
    184a:	85 91       	lpm	r24, Z+
    184c:	94 91       	lpm	r25, Z
    184e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <MENU_Change>
						}
						// Send message to refresh display
						SendMessageWOParam(MSG_LCD_REFRESH_DISPLAY);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <SendMessageWOParam>
			}

			/************************************************************************/
			/* INDICATION CONTROL                                                   */
			/************************************************************************/
			if(!mhz19b._error && GetTimer(TIMER_SYSTEM) >= 1000) {
    1858:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <mhz19b+0x1>
    185c:	81 11       	cpse	r24, r1
    185e:	09 c0       	rjmp	.+18     	; 0x1872 <FSM_SYSTEM_Process+0xd0>
    1860:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    1864:	88 3e       	cpi	r24, 0xE8	; 232
    1866:	93 40       	sbci	r25, 0x03	; 3
    1868:	20 f0       	brcs	.+8      	; 0x1872 <FSM_SYSTEM_Process+0xd0>
				//
				FSM_state = FSM_SYSTEM_STATE_CONCENTRATION_PROCESSING;
    186a:	83 e0       	ldi	r24, 0x03	; 3
    186c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <FSM_state>
    1870:	37 c0       	rjmp	.+110    	; 0x18e0 <FSM_SYSTEM_Process+0x13e>
			}

			/************************************************************************/
			/* INDICATION CONTROL                                                   */
			/************************************************************************/
			if(device.concentration_level != device.last_concentration_level) {
    1872:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <device+0x5>
    1876:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <device+0x6>
    187a:	89 17       	cp	r24, r25
    187c:	09 f4       	brne	.+2      	; 0x1880 <FSM_SYSTEM_Process+0xde>
    187e:	75 c0       	rjmp	.+234    	; 0x196a <FSM_SYSTEM_Process+0x1c8>
				// Store last concentration state
				device.last_concentration_level = device.concentration_level;
    1880:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <device+0x6>
				// Activate led
				led_params._active = 1;
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <led_params+0x1>
				// Set glow time to infinity
				led_params.glow_time_ms = 0xFFFF;
    188a:	2f ef       	ldi	r18, 0xFF	; 255
    188c:	3f ef       	ldi	r19, 0xFF	; 255
    188e:	30 93 c2 01 	sts	0x01C2, r19	; 0x8001c2 <led_params+0x6>
    1892:	20 93 c1 01 	sts	0x01C1, r18	; 0x8001c1 <led_params+0x5>
				switch(device.concentration_level) {
    1896:	83 30       	cpi	r24, 0x03	; 3
    1898:	b9 f0       	breq	.+46     	; 0x18c8 <FSM_SYSTEM_Process+0x126>
    189a:	38 f4       	brcc	.+14     	; 0x18aa <FSM_SYSTEM_Process+0x108>
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	71 f0       	breq	.+28     	; 0x18bc <FSM_SYSTEM_Process+0x11a>
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	c9 f4       	brne	.+50     	; 0x18d6 <FSM_SYSTEM_Process+0x134>
						led_params.color = GREEN;
						break;
					}

					case DEVICE_CONCENTRATION_NORMAL_ABOVE: {
						led_params._blinking = 1;
    18a4:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <led_params+0x2>
    18a8:	0c c0       	rjmp	.+24     	; 0x18c2 <FSM_SYSTEM_Process+0x120>
				device.last_concentration_level = device.concentration_level;
				// Activate led
				led_params._active = 1;
				// Set glow time to infinity
				led_params.glow_time_ms = 0xFFFF;
				switch(device.concentration_level) {
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	81 f0       	breq	.+32     	; 0x18ce <FSM_SYSTEM_Process+0x12c>
    18ae:	85 30       	cpi	r24, 0x05	; 5
    18b0:	91 f4       	brne	.+36     	; 0x18d6 <FSM_SYSTEM_Process+0x134>
						led_params.color = YELLOW;
						break;
					}

					case DEVICE_CONCENTRATION_HIGH: {
						led_params._blinking = 0;
    18b2:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <led_params+0x2>
						led_params.color = RED;
    18b6:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <led_params+0x3>
						break;
    18ba:	0d c0       	rjmp	.+26     	; 0x18d6 <FSM_SYSTEM_Process+0x134>
				// Set glow time to infinity
				led_params.glow_time_ms = 0xFFFF;
				switch(device.concentration_level) {

					case DEVICE_CONCENTRATION_NORMAL: {
						led_params._blinking = 0;
    18bc:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <led_params+0x2>
						led_params.color = GREEN;
    18c0:	82 e0       	ldi	r24, 0x02	; 2
						break;
					}

					case DEVICE_CONCENTRATION_NORMAL_ABOVE: {
						led_params._blinking = 1;
						led_params.color = GREEN;
    18c2:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <led_params+0x3>
						break;
    18c6:	07 c0       	rjmp	.+14     	; 0x18d6 <FSM_SYSTEM_Process+0x134>
					}

					case DEVICE_CONCENTRATION_MIDDLE: {
						led_params._blinking = 0;
    18c8:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <led_params+0x2>
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <FSM_SYSTEM_Process+0x130>
						led_params.color = YELLOW;
						break;
					}

					case DEVICE_CONCENTRATION_MIDDLE_ABOVE: {
						led_params._blinking = 1;
    18ce:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <led_params+0x2>
						led_params.color = YELLOW;
    18d2:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <led_params+0x3>
					}

					default: break;
				}
				// Send message with params
				SendMessageWParam(MSG_LEDS_PROCESSING, (void *)&led_params);
    18d6:	6c eb       	ldi	r22, 0xBC	; 188
    18d8:	71 e0       	ldi	r23, 0x01	; 1
    18da:	88 e0       	ldi	r24, 0x08	; 8
    18dc:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <SendMessageWParam>
				ResetTimer(TIMER_SYSTEM);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <ResetTimer>
			return;
		}

		case FSM_SYSTEM_STATE_STARTUP: {
			// Waiting for system will be initialized
			if(GetTimer(TIMER_SYSTEM) > SYSTEM_INITIALIZATION_TIMEOUT) {
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    18ec:	85 36       	cpi	r24, 0x65	; 101
    18ee:	91 05       	cpc	r25, r1
    18f0:	e0 f1       	brcs	.+120    	; 0x196a <FSM_SYSTEM_Process+0x1c8>
				// Send BC message after
				SendBCMessage(MSG_BC_SYSTEM_STARTUP_RUN);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <SendBCMessage>
				// Goto waiting complete rules
				FSM_state = FSM_SYSTEM_STATE_STARTUP_COMPLETE;
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <FSM_state>
    18fe:	08 95       	ret
			return;
		}

		case FSM_SYSTEM_STATE_STARTUP_COMPLETE: {
			// Waiting splash screen will be hidden
			if(GetMessage(MSG_CHK_SENSORS_COMPLETE)) {
    1900:	83 e0       	ldi	r24, 0x03	; 3
    1902:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GetMessage>
    1906:	88 23       	and	r24, r24
    1908:	81 f1       	breq	.+96     	; 0x196a <FSM_SYSTEM_Process+0x1c8>
				// Send BC message after
				SendBCMessage(MSG_BC_SYSTEM_STARTUP_COMPLETE);
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <SendBCMessage>
				// Goto IDLE state
				FSM_state = FSM_SYSTEM_STATE_IDLE;
    1910:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <FSM_state>
				// Set default device mode
				device.mode = DEVICE_MODE_IDLE;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <device+0x3>
    191a:	08 95       	ret
			}
			return;
		}

		case FSM_SYSTEM_STATE_CONCENTRATION_PROCESSING: {
			if(mhz19b.value <= 900) {
    191c:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <mhz19b+0x3>
    1920:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <mhz19b+0x4>
    1924:	85 38       	cpi	r24, 0x85	; 133
    1926:	33 e0       	ldi	r19, 0x03	; 3
    1928:	93 07       	cpc	r25, r19
    192a:	10 f4       	brcc	.+4      	; 0x1930 <FSM_SYSTEM_Process+0x18e>
				device.concentration_level = DEVICE_CONCENTRATION_NORMAL;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	19 c0       	rjmp	.+50     	; 0x1962 <FSM_SYSTEM_Process+0x1c0>
			} else if(mhz19b.value > 900 && mhz19b.value < 1000) {
    1930:	ac 01       	movw	r20, r24
    1932:	45 58       	subi	r20, 0x85	; 133
    1934:	53 40       	sbci	r21, 0x03	; 3
    1936:	43 36       	cpi	r20, 0x63	; 99
    1938:	51 05       	cpc	r21, r1
    193a:	10 f4       	brcc	.+4      	; 0x1940 <FSM_SYSTEM_Process+0x19e>
				device.concentration_level = DEVICE_CONCENTRATION_NORMAL_ABOVE;
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	11 c0       	rjmp	.+34     	; 0x1962 <FSM_SYSTEM_Process+0x1c0>
			} else if(mhz19b.value >= 1000 && mhz19b.value < 1700) {
    1940:	ac 01       	movw	r20, r24
    1942:	48 5e       	subi	r20, 0xE8	; 232
    1944:	53 40       	sbci	r21, 0x03	; 3
    1946:	4c 3b       	cpi	r20, 0xBC	; 188
    1948:	52 40       	sbci	r21, 0x02	; 2
    194a:	18 f4       	brcc	.+6      	; 0x1952 <FSM_SYSTEM_Process+0x1b0>
				device.concentration_level = DEVICE_CONCENTRATION_MIDDLE;
    194c:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <device+0x5>
    1950:	0a c0       	rjmp	.+20     	; 0x1966 <FSM_SYSTEM_Process+0x1c4>
			} else if(mhz19b.value >= 1700 && mhz19b.value < 2000) {
    1952:	84 5a       	subi	r24, 0xA4	; 164
    1954:	96 40       	sbci	r25, 0x06	; 6
    1956:	8c 32       	cpi	r24, 0x2C	; 44
    1958:	91 40       	sbci	r25, 0x01	; 1
    195a:	10 f4       	brcc	.+4      	; 0x1960 <FSM_SYSTEM_Process+0x1be>
				device.concentration_level = DEVICE_CONCENTRATION_MIDDLE_ABOVE;
    195c:	84 e0       	ldi	r24, 0x04	; 4
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <FSM_SYSTEM_Process+0x1c0>
			} else {
				device.concentration_level = DEVICE_CONCENTRATION_HIGH;
    1960:	85 e0       	ldi	r24, 0x05	; 5
    1962:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <device+0x5>
			}
			FSM_state = FSM_SYSTEM_STATE_IDLE;
    1966:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <FSM_state>
    196a:	08 95       	ret

0000196c <FSM_UART_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_UART_Init(void)
{
	// Set default FSM state
	FSM_state = FSM_UART_STATE_IDLE;
    196c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <FSM_state>
    1970:	08 95       	ret

00001972 <FSM_UART_Process>:
}

void FSM_UART_Process(void)
{
	switch(FSM_state) {
    1972:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <FSM_state>
    1976:	08 95       	ret

00001978 <FSM_X1226_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_X1226_Init(void)
{
	// Goto wait startup state
	FSM_state = FSM_X1226_STATE_STARTUP_TIMEOUT;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <FSM_state>
	// Flush FSM timer
	ResetTimer(TIMER_X1226);
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <ResetTimer>

00001984 <FSM_X1226_Process>:
}

void FSM_X1226_Process(void)
{
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	1f 92       	push	r1
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
	switch(FSM_state) {
    1994:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <FSM_state>
    1998:	8e 2f       	mov	r24, r30
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	8b 30       	cpi	r24, 0x0B	; 11
    199e:	91 05       	cpc	r25, r1
    19a0:	08 f0       	brcs	.+2      	; 0x19a4 <FSM_X1226_Process+0x20>
    19a2:	10 c1       	rjmp	.+544    	; 0x1bc4 <FSM_X1226_Process+0x240>
    19a4:	fc 01       	movw	r30, r24
    19a6:	e4 5c       	subi	r30, 0xC4	; 196
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__tablejump2__>
		/* Waiting timeout before initialize */
		case FSM_X1226_STATE_STARTUP_TIMEOUT: {
			if(GetTimer(TIMER_X1226) >= X1226_STARTUP_DELAY) {
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    19b4:	44 97       	sbiw	r24, 0x14	; 20
    19b6:	08 f4       	brcc	.+2      	; 0x19ba <FSM_X1226_Process+0x36>
    19b8:	05 c1       	rjmp	.+522    	; 0x1bc4 <FSM_X1226_Process+0x240>
				// Goto reading rtc status
				FSM_state = FSM_X1226_STATE_READ_STATUS;
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	0f c0       	rjmp	.+30     	; 0x19dc <FSM_X1226_Process+0x58>
			return;
		}

		/* Getting STATUS info from X1226 */
		case FSM_X1226_STATE_READ_STATUS: {
			if(!i2c._busy) {
    19be:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <i2c>
    19c2:	81 11       	cpse	r24, r1
    19c4:	ff c0       	rjmp	.+510    	; 0x1bc4 <FSM_X1226_Process+0x240>
				if(I2C_RequestFrom(X1226_CCR_ADDRESS, 1, 2, X1226_REG_STATUS)) {
    19c6:	2f e3       	ldi	r18, 0x3F	; 63
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	42 e0       	ldi	r20, 0x02	; 2
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	8e ed       	ldi	r24, 0xDE	; 222
    19d0:	0e 94 23 03 	call	0x646	; 0x646 <I2C_RequestFrom>
    19d4:	88 23       	and	r24, r24
    19d6:	09 f4       	brne	.+2      	; 0x19da <FSM_X1226_Process+0x56>
    19d8:	f5 c0       	rjmp	.+490    	; 0x1bc4 <FSM_X1226_Process+0x240>
					// Goto status processing
					FSM_state = FSM_X1226_STATE_STATUS_PROCESSING;
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <FSM_state>
    19e0:	f1 c0       	rjmp	.+482    	; 0x1bc4 <FSM_X1226_Process+0x240>
			return;
		}

		/* Processing by status reg value */
		case FSM_X1226_STATE_STATUS_PROCESSING: {
			if(!i2c._busy) {
    19e2:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <i2c>
    19e6:	81 11       	cpse	r24, r1
    19e8:	ed c0       	rjmp	.+474    	; 0x1bc4 <FSM_X1226_Process+0x240>
				if(!i2c._error) {
    19ea:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <i2c+0x2>
    19ee:	81 11       	cpse	r24, r1
    19f0:	0e c0       	rjmp	.+28     	; 0x1a0e <FSM_X1226_Process+0x8a>
					// Set presence flag
					rtc._presence=1;
    19f2:	11 e0       	ldi	r17, 0x01	; 1
    19f4:	10 93 91 03 	sts	0x0391, r17	; 0x800391 <rtc>
					// Action by status register data bit
					if(I2C_Read() & _RTCF) { // <- Total power fail occured
    19f8:	0e 94 9c 03 	call	0x738	; 0x738 <I2C_Read>
    19fc:	80 ff       	sbrs	r24, 0
    19fe:	04 c0       	rjmp	.+8      	; 0x1a08 <FSM_X1226_Process+0x84>
						// Set initialization type to FULL init
						x1226.init_type = X1226_INIT_TYPE_FULL; 
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <x1226>
    1a06:	c5 c0       	rjmp	.+394    	; 0x1b92 <FSM_X1226_Process+0x20e>
					} else { // <- Power was not have total power fail
						// Set initialization type to PARTIAL init
						x1226.init_type = X1226_INIT_TYPE_PARTIAL;
    1a08:	10 93 c5 01 	sts	0x01C5, r17	; 0x8001c5 <x1226>
    1a0c:	c2 c0       	rjmp	.+388    	; 0x1b92 <FSM_X1226_Process+0x20e>
					}
				} else {
					// Flush presence flag
					rtc._presence=0;
    1a0e:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <rtc>
    1a12:	bf c0       	rjmp	.+382    	; 0x1b92 <FSM_X1226_Process+0x20e>
			return;
		}

		/* 1 of 2 steps write protection off */
		case FSM_X1226_STATE_ENABLE_CCR_WRITE_ACCESS_STEP1: {
			if(!i2c._busy) {
    1a14:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <i2c>
    1a18:	81 11       	cpse	r24, r1
    1a1a:	d4 c0       	rjmp	.+424    	; 0x1bc4 <FSM_X1226_Process+0x240>
				// Send 0x2(_WEL bit set) to the X1226
				uint8_t t = _WEL;
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	89 83       	std	Y+1, r24	; 0x01
				I2C_TransmitTo(&t, X1226_CCR_ADDRESS, 1, 2, X1226_REG_STATUS);
    1a20:	0f e3       	ldi	r16, 0x3F	; 63
    1a22:	10 e0       	ldi	r17, 0x00	; 0
    1a24:	22 e0       	ldi	r18, 0x02	; 2
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	6e ed       	ldi	r22, 0xDE	; 222
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_TransmitTo>
				// Goto to second step write protection
				FSM_state = FSM_X1226_STATE_ENABLE_CCR_WRITE_ACCESS_STEP2;
    1a32:	85 e0       	ldi	r24, 0x05	; 5
    1a34:	d3 cf       	rjmp	.-90     	; 0x19dc <FSM_X1226_Process+0x58>
			return;
		}

		/* 2 of 2 steps write protection off */
		case FSM_X1226_STATE_ENABLE_CCR_WRITE_ACCESS_STEP2: {
			if(!i2c._busy) {
    1a36:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <i2c>
    1a3a:	81 11       	cpse	r24, r1
    1a3c:	c3 c0       	rjmp	.+390    	; 0x1bc4 <FSM_X1226_Process+0x240>
				// Send 0x6(_WEL & _RWEL bit set) to the X1226
				uint8_t t = (_WEL|_RWEL);
    1a3e:	86 e0       	ldi	r24, 0x06	; 6
    1a40:	f8 2e       	mov	r15, r24
    1a42:	f9 82       	std	Y+1, r15	; 0x01
				I2C_TransmitTo(&t, X1226_CCR_ADDRESS, 1, 2, X1226_REG_STATUS);
    1a44:	0f e3       	ldi	r16, 0x3F	; 63
    1a46:	10 e0       	ldi	r17, 0x00	; 0
    1a48:	22 e0       	ldi	r18, 0x02	; 2
    1a4a:	41 e0       	ldi	r20, 0x01	; 1
    1a4c:	6e ed       	ldi	r22, 0xDE	; 222
    1a4e:	ce 01       	movw	r24, r28
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_TransmitTo>
				
				switch(x1226.init_type) {
    1a56:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <x1226>
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	a1 f1       	breq	.+104    	; 0x1ac6 <FSM_X1226_Process+0x142>
    1a5e:	82 30       	cpi	r24, 0x02	; 2
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <FSM_X1226_Process+0xe0>
    1a62:	97 c0       	rjmp	.+302    	; 0x1b92 <FSM_X1226_Process+0x20e>
					/* Need full rtc initialization */
					case X1226_INIT_TYPE_FULL: {
						// Goto to setup clock date/time default values
						FSM_state = FSM_X1226_STATE_INIT_CLOCK;
    1a64:	f0 92 d3 01 	sts	0x01D3, r15	; 0x8001d3 <FSM_state>
						return;
    1a68:	ad c0       	rjmp	.+346    	; 0x1bc4 <FSM_X1226_Process+0x240>
			return;
		}

		/* Setup clock date/time default values */
		case FSM_X1226_STATE_INIT_CLOCK: {
			if(i2c._busy) { return; }
    1a6a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <i2c>
    1a6e:	81 11       	cpse	r24, r1
    1a70:	a9 c0       	rjmp	.+338    	; 0x1bc4 <FSM_X1226_Process+0x240>
			// Store default values
			x1226.ccr.sec = dec2bcd(0);
    1a72:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <dec2bcd>
    1a76:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <x1226+0x1>
			x1226.ccr.min = dec2bcd(DEFAULT_TIME_MINUTE);
    1a7a:	84 e3       	ldi	r24, 0x34	; 52
    1a7c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <dec2bcd>
    1a80:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <x1226+0x2>
			x1226.ccr.hour = (dec2bcd(DEFAULT_TIME_HOUR) | _MIL);	// Set 24hr time format
    1a84:	8e e0       	ldi	r24, 0x0E	; 14
    1a86:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <dec2bcd>
    1a8a:	80 68       	ori	r24, 0x80	; 128
    1a8c:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <x1226+0x3>
			x1226.ccr.day = dec2bcd(DEFAULT_DATE_DAY);
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <dec2bcd>
    1a96:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <x1226+0x4>
			x1226.ccr.month = dec2bcd(DEFAULT_DATE_MONTH);
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <dec2bcd>
    1aa0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <x1226+0x5>
			x1226.ccr.year = dec2bcd(DEFAULT_DATE_YEAR);
    1aa4:	83 e1       	ldi	r24, 0x13	; 19
    1aa6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <dec2bcd>
    1aaa:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <x1226+0x6>
			x1226.ccr.dow = DEFAULT_DATE_DOW;
    1aae:	84 e0       	ldi	r24, 0x04	; 4
    1ab0:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <x1226+0x7>
			// Send 6 byte date/time configuration values
			I2C_TransmitTo((void *)&x1226.ccr, X1226_CCR_ADDRESS, 7, 2, X1226_REG_RTC_SC);
    1ab4:	00 e3       	ldi	r16, 0x30	; 48
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	22 e0       	ldi	r18, 0x02	; 2
    1aba:	47 e0       	ldi	r20, 0x07	; 7
    1abc:	6e ed       	ldi	r22, 0xDE	; 222
    1abe:	86 ec       	ldi	r24, 0xC6	; 198
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_TransmitTo>
			// Goto EEPROM params setup
			FSM_state = FSM_X1226_STATE_SET_EEPROM_PARAMS;
    1ac6:	87 e0       	ldi	r24, 0x07	; 7
    1ac8:	89 cf       	rjmp	.-238    	; 0x19dc <FSM_X1226_Process+0x58>
			return;
		}

		/* Custom params to use RTC x1226 */
		case FSM_X1226_STATE_SET_EEPROM_PARAMS: {
			if(!i2c._busy) {
    1aca:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <i2c>
    1ace:	81 11       	cpse	r24, r1
    1ad0:	79 c0       	rjmp	.+242    	; 0x1bc4 <FSM_X1226_Process+0x240>
				// Set 1Hz output to IRQ pin
				uint8_t t = (_FO1|_FO0);
    1ad2:	88 e1       	ldi	r24, 0x18	; 24
    1ad4:	89 83       	std	Y+1, r24	; 0x01
				I2C_TransmitTo(&t, X1226_CCR_ADDRESS, 1, 2, X1226_REG_CTRL_INT);
    1ad6:	01 e1       	ldi	r16, 0x11	; 17
    1ad8:	10 e0       	ldi	r17, 0x00	; 0
    1ada:	22 e0       	ldi	r18, 0x02	; 2
    1adc:	41 e0       	ldi	r20, 0x01	; 1
    1ade:	6e ed       	ldi	r22, 0xDE	; 222
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_TransmitTo>
				// Goto EEPROM write timeout
				FSM_state = FSM_X1226_STATE_SET_EEPROM_PARAMS_TIMEOUT;
    1ae8:	88 e0       	ldi	r24, 0x08	; 8
    1aea:	67 c0       	rjmp	.+206    	; 0x1bba <FSM_X1226_Process+0x236>
			return;
		}

		/* EEPROM operation timeout state */
		case FSM_X1226_STATE_SET_EEPROM_PARAMS_TIMEOUT: {
			if(GetTimer(TIMER_X1226) >= X1226_EEPROM_WRITE_TIMEOUT) {
    1aec:	83 e0       	ldi	r24, 0x03	; 3
    1aee:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    1af2:	0c 97       	sbiw	r24, 0x0c	; 12
    1af4:	08 f4       	brcc	.+2      	; 0x1af8 <FSM_X1226_Process+0x174>
    1af6:	66 c0       	rjmp	.+204    	; 0x1bc4 <FSM_X1226_Process+0x240>
				// 
				x1226.init_type = X1226_INIT_TYPE_NO_NEED;
    1af8:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <x1226>
				// Goto default work state
				FSM_state = FSM_X1226_STATE_IDLE;
    1afc:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <FSM_state>
    1b00:	5e c0       	rjmp	.+188    	; 0x1bbe <FSM_X1226_Process+0x23a>
			return;
		}

		/* Receive CCR data from X1226 */
		case FSM_X1226_STATE_READ_CCR_DATA: {
			if(!i2c._busy) {
    1b02:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <i2c>
    1b06:	81 11       	cpse	r24, r1
    1b08:	5d c0       	rjmp	.+186    	; 0x1bc4 <FSM_X1226_Process+0x240>
				if(I2C_RequestFrom(X1226_CCR_ADDRESS, 7, 2, X1226_REG_RTC_SC)) {
    1b0a:	20 e3       	ldi	r18, 0x30	; 48
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	42 e0       	ldi	r20, 0x02	; 2
    1b10:	67 e0       	ldi	r22, 0x07	; 7
    1b12:	8e ed       	ldi	r24, 0xDE	; 222
    1b14:	0e 94 23 03 	call	0x646	; 0x646 <I2C_RequestFrom>
    1b18:	88 23       	and	r24, r24
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <FSM_X1226_Process+0x19a>
    1b1c:	53 c0       	rjmp	.+166    	; 0x1bc4 <FSM_X1226_Process+0x240>
					// Goto processing received data
					FSM_state = FSM_X1226_STATE_CCR_DATA_PROCESSING;
    1b1e:	8a e0       	ldi	r24, 0x0A	; 10
    1b20:	5d cf       	rjmp	.-326    	; 0x19dc <FSM_X1226_Process+0x58>
			return;
		}

		/* Processing received data */
		case FSM_X1226_STATE_CCR_DATA_PROCESSING: {
			if(!i2c._busy) {
    1b22:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <i2c>
    1b26:	81 11       	cpse	r24, r1
    1b28:	4d c0       	rjmp	.+154    	; 0x1bc4 <FSM_X1226_Process+0x240>
    1b2a:	06 ec       	ldi	r16, 0xC6	; 198
    1b2c:	11 e0       	ldi	r17, 0x01	; 1
				// Receive data from I2C buffer
				uint8_t *p_data = (void *)&x1226.ccr.sec;
				for(uint8_t i=7; i; i--) {
					*(p_data++) = I2C_Read();
    1b2e:	0e 94 9c 03 	call	0x738	; 0x738 <I2C_Read>
    1b32:	f8 01       	movw	r30, r16
    1b34:	81 93       	st	Z+, r24
    1b36:	8f 01       	movw	r16, r30
		/* Processing received data */
		case FSM_X1226_STATE_CCR_DATA_PROCESSING: {
			if(!i2c._busy) {
				// Receive data from I2C buffer
				uint8_t *p_data = (void *)&x1226.ccr.sec;
				for(uint8_t i=7; i; i--) {
    1b38:	f1 e0       	ldi	r31, 0x01	; 1
    1b3a:	0d 3c       	cpi	r16, 0xCD	; 205
    1b3c:	1f 07       	cpc	r17, r31
    1b3e:	b9 f7       	brne	.-18     	; 0x1b2e <FSM_X1226_Process+0x1aa>
					*(p_data++) = I2C_Read();
				}
				// Processing received data
				rtc.sec = bcd2dec(x1226.ccr.sec);
    1b40:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <x1226+0x1>
    1b44:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <bcd2dec>
    1b48:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <rtc+0x1>
				rtc.min = bcd2dec(x1226.ccr.min);
    1b4c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <x1226+0x2>
    1b50:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <bcd2dec>
    1b54:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <rtc+0x2>
				rtc.hour = bcd2dec(x1226.ccr.hour & ~_MIL);
    1b58:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <x1226+0x3>
    1b5c:	8f 77       	andi	r24, 0x7F	; 127
    1b5e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <bcd2dec>
    1b62:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <rtc+0x3>
				rtc.dow = x1226.ccr.dow;
    1b66:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <x1226+0x7>
    1b6a:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <rtc+0x4>
				rtc.day = bcd2dec(x1226.ccr.day);
    1b6e:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <x1226+0x4>
    1b72:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <bcd2dec>
    1b76:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <rtc+0x5>
				rtc.month = bcd2dec(x1226.ccr.month);
    1b7a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <x1226+0x5>
    1b7e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <bcd2dec>
    1b82:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rtc+0x6>
				rtc.year = bcd2dec(x1226.ccr.year);
    1b86:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <x1226+0x6>
    1b8a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <bcd2dec>
    1b8e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <rtc+0x7>
				// Goto default work state
				FSM_state = FSM_X1226_STATE_IDLE;
    1b92:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <FSM_state>
    1b96:	16 c0       	rjmp	.+44     	; 0x1bc4 <FSM_X1226_Process+0x240>
			return;
		}

		case FSM_X1226_STATE_IDLE: {
			
			if(!rtc._presence) {
    1b98:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <rtc>
    1b9c:	88 23       	and	r24, r24
    1b9e:	91 f0       	breq	.+36     	; 0x1bc4 <FSM_X1226_Process+0x240>
				return;
			}
			
			if(x1226.init_type != X1226_INIT_TYPE_NO_NEED) {
    1ba0:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <x1226>
    1ba4:	88 23       	and	r24, r24
    1ba6:	11 f0       	breq	.+4      	; 0x1bac <FSM_X1226_Process+0x228>
				//
				FSM_state = FSM_X1226_STATE_ENABLE_CCR_WRITE_ACCESS_STEP1;
    1ba8:	84 e0       	ldi	r24, 0x04	; 4
    1baa:	18 cf       	rjmp	.-464    	; 0x19dc <FSM_X1226_Process+0x58>
				return;
			}
						
			if(_read_enabled && GetTimer(TIMER_X1226) >= X1226_DATA_READ_PERIOD) {
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GetTimer>
    1bb2:	84 3f       	cpi	r24, 0xF4	; 244
    1bb4:	91 40       	sbci	r25, 0x01	; 1
    1bb6:	30 f0       	brcs	.+12     	; 0x1bc4 <FSM_X1226_Process+0x240>
				FSM_state = FSM_X1226_STATE_READ_CCR_DATA;
    1bb8:	89 e0       	ldi	r24, 0x09	; 9
    1bba:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <FSM_state>
				ResetTimer(TIMER_X1226);
    1bbe:	83 e0       	ldi	r24, 0x03	; 3
    1bc0:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <ResetTimer>



		default: break;
	}
}
    1bc4:	0f 90       	pop	r0
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	08 95       	ret

00001bd2 <InitMessages>:

/************************************************************************/
/* FUNCTIONS                                                            */
/************************************************************************/
void InitMessages(void)
{
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i=0;i<MAX_MESSAGES;i++) {
		Messages[i].Msg = MSG_STATE_INACTIVE;
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	ee 0f       	add	r30, r30
    1bda:	ff 1f       	adc	r31, r31
    1bdc:	e8 0f       	add	r30, r24
    1bde:	f9 1f       	adc	r31, r25
    1be0:	e9 54       	subi	r30, 0x49	; 73
    1be2:	fc 4f       	sbci	r31, 0xFC	; 252
    1be4:	10 82       	st	Z, r1
    1be6:	01 96       	adiw	r24, 0x01	; 1
/************************************************************************/
/* FUNCTIONS                                                            */
/************************************************************************/
void InitMessages(void)
{
	for(uint8_t i=0;i<MAX_MESSAGES;i++) {
    1be8:	8b 30       	cpi	r24, 0x0B	; 11
    1bea:	91 05       	cpc	r25, r1
    1bec:	a1 f7       	brne	.-24     	; 0x1bd6 <InitMessages+0x4>
		Messages[i].Msg = MSG_STATE_INACTIVE;
	}
	#ifdef USE_BC_MESSAGES
	for (uint8_t i=0; i<MAX_BC_MESSAGES; i++) {
		BroadcastMessages[i] = MSG_STATE_INACTIVE;
    1bee:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <BroadcastMessages>
    1bf2:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <BroadcastMessages+0x1>
    1bf6:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <BroadcastMessages+0x2>
    1bfa:	08 95       	ret

00001bfc <SendMessageWParam>:
	#endif
}

void SendMessageWParam(uint8_t Msg, void * pParams)
{
	if(Messages[Msg].Msg == MSG_STATE_INACTIVE) {
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	fc 01       	movw	r30, r24
    1c00:	ee 0f       	add	r30, r30
    1c02:	ff 1f       	adc	r31, r31
    1c04:	8e 0f       	add	r24, r30
    1c06:	9f 1f       	adc	r25, r31
    1c08:	fc 01       	movw	r30, r24
    1c0a:	e9 54       	subi	r30, 0x49	; 73
    1c0c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c0e:	80 81       	ld	r24, Z
    1c10:	81 11       	cpse	r24, r1
    1c12:	04 c0       	rjmp	.+8      	; 0x1c1c <SendMessageWParam+0x20>
		Messages[Msg].Msg = MSG_STATE_SET;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	80 83       	st	Z, r24
		Messages[Msg].pParams = pParams;
    1c18:	72 83       	std	Z+2, r23	; 0x02
    1c1a:	61 83       	std	Z+1, r22	; 0x01
    1c1c:	08 95       	ret

00001c1e <SendMessageWOParam>:
	}
}

void SendMessageWOParam(uint8_t Msg)
{
	if(Messages[Msg].Msg == MSG_STATE_INACTIVE) {
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	fc 01       	movw	r30, r24
    1c22:	ee 0f       	add	r30, r30
    1c24:	ff 1f       	adc	r31, r31
    1c26:	8e 0f       	add	r24, r30
    1c28:	9f 1f       	adc	r25, r31
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	e9 54       	subi	r30, 0x49	; 73
    1c2e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c30:	80 81       	ld	r24, Z
    1c32:	81 11       	cpse	r24, r1
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <SendMessageWOParam+0x1c>
		Messages[Msg].Msg = MSG_STATE_SET;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	80 83       	st	Z, r24
    1c3a:	08 95       	ret

00001c3c <GetMessage>:
	}
}

uint8_t GetMessage(uint8_t Msg)
{
	if(Messages[Msg].Msg == MSG_STATE_ACTIVE) {
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	fc 01       	movw	r30, r24
    1c40:	ee 0f       	add	r30, r30
    1c42:	ff 1f       	adc	r31, r31
    1c44:	8e 0f       	add	r24, r30
    1c46:	9f 1f       	adc	r25, r31
    1c48:	fc 01       	movw	r30, r24
    1c4a:	e9 54       	subi	r30, 0x49	; 73
    1c4c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c4e:	80 81       	ld	r24, Z
    1c50:	82 30       	cpi	r24, 0x02	; 2
    1c52:	19 f4       	brne	.+6      	; 0x1c5a <GetMessage+0x1e>
		Messages[Msg].Msg = MSG_STATE_INACTIVE;
    1c54:	10 82       	st	Z, r1
		return 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	08 95       	ret
	}
	return 0;
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
}
    1c5c:	08 95       	ret

00001c5e <GetMessageParam>:

void * GetMessageParam(uint8_t Msg)
{
	return Messages[Msg].pParams;
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	fc 01       	movw	r30, r24
    1c62:	ee 0f       	add	r30, r30
    1c64:	ff 1f       	adc	r31, r31
    1c66:	8e 0f       	add	r24, r30
    1c68:	9f 1f       	adc	r25, r31
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	e9 54       	subi	r30, 0x49	; 73
    1c6e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c70:	81 81       	ldd	r24, Z+1	; 0x01
    1c72:	92 81       	ldd	r25, Z+2	; 0x02
}
    1c74:	08 95       	ret

00001c76 <SendBCMessage>:

#ifdef USE_BC_MESSAGES
void SendBCMessage(uint8_t Msg)
{
	if (BroadcastMessages[Msg] == MSG_STATE_INACTIVE) {
    1c76:	e8 2f       	mov	r30, r24
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	ec 54       	subi	r30, 0x4C	; 76
    1c7c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c7e:	80 81       	ld	r24, Z
    1c80:	81 11       	cpse	r24, r1
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <SendBCMessage+0x12>
		BroadcastMessages[Msg] = MSG_STATE_SET;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	80 83       	st	Z, r24
    1c88:	08 95       	ret

00001c8a <GetBCMessage>:
	}
}

uint8_t GetBCMessage(uint8_t Msg)
{
	if (BroadcastMessages[Msg] == MSG_STATE_ACTIVE) {
    1c8a:	e8 2f       	mov	r30, r24
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	ec 54       	subi	r30, 0x4C	; 76
    1c90:	fc 4f       	sbci	r31, 0xFC	; 252
    1c92:	90 81       	ld	r25, Z
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	92 30       	cpi	r25, 0x02	; 2
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <GetBCMessage+0x12>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	return 0;
}
    1c9c:	08 95       	ret

00001c9e <ProcessMessages>:
#endif


void ProcessMessages(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c9e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ca0:	f8 94       	cli
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
		for (uint8_t i=0; i<MAX_MESSAGES; i++) {
			if (Messages[i].Msg == MSG_STATE_ACTIVE) Messages[i].Msg = MSG_STATE_INACTIVE;
			if (Messages[i].Msg == MSG_STATE_SET) Messages[i].Msg = MSG_STATE_ACTIVE;
    1ca6:	32 e0       	ldi	r19, 0x02	; 2

void ProcessMessages(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		for (uint8_t i=0; i<MAX_MESSAGES; i++) {
			if (Messages[i].Msg == MSG_STATE_ACTIVE) Messages[i].Msg = MSG_STATE_INACTIVE;
    1ca8:	fc 01       	movw	r30, r24
    1caa:	ee 0f       	add	r30, r30
    1cac:	ff 1f       	adc	r31, r31
    1cae:	df 01       	movw	r26, r30
    1cb0:	a8 0f       	add	r26, r24
    1cb2:	b9 1f       	adc	r27, r25
    1cb4:	a9 54       	subi	r26, 0x49	; 73
    1cb6:	bc 4f       	sbci	r27, 0xFC	; 252
    1cb8:	4c 91       	ld	r20, X
    1cba:	42 30       	cpi	r20, 0x02	; 2
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <ProcessMessages+0x22>
    1cbe:	1c 92       	st	X, r1
			if (Messages[i].Msg == MSG_STATE_SET) Messages[i].Msg = MSG_STATE_ACTIVE;
    1cc0:	e8 0f       	add	r30, r24
    1cc2:	f9 1f       	adc	r31, r25
    1cc4:	e9 54       	subi	r30, 0x49	; 73
    1cc6:	fc 4f       	sbci	r31, 0xFC	; 252
    1cc8:	40 81       	ld	r20, Z
    1cca:	41 30       	cpi	r20, 0x01	; 1
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <ProcessMessages+0x32>
    1cce:	30 83       	st	Z, r19
    1cd0:	01 96       	adiw	r24, 0x01	; 1


void ProcessMessages(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		for (uint8_t i=0; i<MAX_MESSAGES; i++) {
    1cd2:	8b 30       	cpi	r24, 0x0B	; 11
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	41 f7       	brne	.-48     	; 0x1ca8 <ProcessMessages+0xa>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
			if (Messages[i].Msg == MSG_STATE_SET) Messages[i].Msg = MSG_STATE_ACTIVE;
		}
		#ifdef USE_BC_MESSAGES
		for (uint8_t i=0; i<MAX_BC_MESSAGES; i++) {
			if (BroadcastMessages[i] == MSG_STATE_ACTIVE) BroadcastMessages[i] = MSG_STATE_INACTIVE;
			if (BroadcastMessages[i] == MSG_STATE_SET) BroadcastMessages[i] = MSG_STATE_ACTIVE;
    1cdc:	32 e0       	ldi	r19, 0x02	; 2
			if (Messages[i].Msg == MSG_STATE_ACTIVE) Messages[i].Msg = MSG_STATE_INACTIVE;
			if (Messages[i].Msg == MSG_STATE_SET) Messages[i].Msg = MSG_STATE_ACTIVE;
		}
		#ifdef USE_BC_MESSAGES
		for (uint8_t i=0; i<MAX_BC_MESSAGES; i++) {
			if (BroadcastMessages[i] == MSG_STATE_ACTIVE) BroadcastMessages[i] = MSG_STATE_INACTIVE;
    1cde:	fc 01       	movw	r30, r24
    1ce0:	ec 54       	subi	r30, 0x4C	; 76
    1ce2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ce4:	40 81       	ld	r20, Z
    1ce6:	42 30       	cpi	r20, 0x02	; 2
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <ProcessMessages+0x4e>
    1cea:	10 82       	st	Z, r1
			if (BroadcastMessages[i] == MSG_STATE_SET) BroadcastMessages[i] = MSG_STATE_ACTIVE;
    1cec:	40 81       	ld	r20, Z
    1cee:	41 30       	cpi	r20, 0x01	; 1
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <ProcessMessages+0x56>
    1cf2:	30 83       	st	Z, r19
    1cf4:	01 96       	adiw	r24, 0x01	; 1
		for (uint8_t i=0; i<MAX_MESSAGES; i++) {
			if (Messages[i].Msg == MSG_STATE_ACTIVE) Messages[i].Msg = MSG_STATE_INACTIVE;
			if (Messages[i].Msg == MSG_STATE_SET) Messages[i].Msg = MSG_STATE_ACTIVE;
		}
		#ifdef USE_BC_MESSAGES
		for (uint8_t i=0; i<MAX_BC_MESSAGES; i++) {
    1cf6:	83 30       	cpi	r24, 0x03	; 3
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	89 f7       	brne	.-30     	; 0x1cde <ProcessMessages+0x40>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1cfc:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1cfe:	08 95       	ret

00001d00 <InitTimers>:

/************************************************************************/
/* FUNCTIONS                                                            */
/************************************************************************/
void InitTimers(void)
{
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i=0;i<MAX_TIMERS;i++) {
		Timers[i] = 0;
    1d04:	fc 01       	movw	r30, r24
    1d06:	ee 0f       	add	r30, r30
    1d08:	ff 1f       	adc	r31, r31
    1d0a:	ec 52       	subi	r30, 0x2C	; 44
    1d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d0e:	11 82       	std	Z+1, r1	; 0x01
    1d10:	10 82       	st	Z, r1
    1d12:	01 96       	adiw	r24, 0x01	; 1
/************************************************************************/
/* FUNCTIONS                                                            */
/************************************************************************/
void InitTimers(void)
{
	for(uint8_t i=0;i<MAX_TIMERS;i++) {
    1d14:	8a 30       	cpi	r24, 0x0A	; 10
    1d16:	91 05       	cpc	r25, r1
    1d18:	a9 f7       	brne	.-22     	; 0x1d04 <InitTimers+0x4>
	for(uint8_t i=0;i<MAX_GTIMERS;i++) {
		GTimers[i] = 0;
		GTStates[i] = TIMER_STOPPED;
	}
	#endif
}
    1d1a:	08 95       	ret

00001d1c <ProcessTimers>:

void ProcessTimers(uint8_t * tick) {
	uint8_t x = *tick;
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	40 81       	ld	r20, Z

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1d20:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d22:	f8 94       	cli
		if (x > 0) {
    1d24:	44 23       	and	r20, r20
    1d26:	a9 f0       	breq	.+42     	; 0x1d52 <ProcessTimers+0x36>
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
			for (uint8_t i=0; i<MAX_TIMERS; i++) {
				Timers[i] += x;
    1d2c:	50 e0       	ldi	r21, 0x00	; 0
    1d2e:	f9 01       	movw	r30, r18
    1d30:	ee 0f       	add	r30, r30
    1d32:	ff 1f       	adc	r31, r31
    1d34:	ec 52       	subi	r30, 0x2C	; 44
    1d36:	fe 4f       	sbci	r31, 0xFE	; 254
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	64 0f       	add	r22, r20
    1d3e:	75 1f       	adc	r23, r21
    1d40:	71 83       	std	Z+1, r23	; 0x01
    1d42:	60 83       	st	Z, r22
    1d44:	2f 5f       	subi	r18, 0xFF	; 255
    1d46:	3f 4f       	sbci	r19, 0xFF	; 255
void ProcessTimers(uint8_t * tick) {
	uint8_t x = *tick;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		if (x > 0) {
			for (uint8_t i=0; i<MAX_TIMERS; i++) {
    1d48:	2a 30       	cpi	r18, 0x0A	; 10
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	81 f7       	brne	.-32     	; 0x1d2e <ProcessTimers+0x12>
				if (GTStates[i] == TIMER_RUNNING) {
					GTimers[i] += (uint16_t)x;
				}
				#endif
			}
			*tick = 0;
    1d4e:	fc 01       	movw	r30, r24
    1d50:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d52:	af bf       	out	0x3f, r26	; 63
    __asm__ volatile ("" ::: "memory");
    1d54:	08 95       	ret

00001d56 <GetTimer>:
		}
	}
}

uint16_t GetTimer(uint8_t Timer) {
	return Timers[Timer];
    1d56:	e8 2f       	mov	r30, r24
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	ee 0f       	add	r30, r30
    1d5c:	ff 1f       	adc	r31, r31
    1d5e:	ec 52       	subi	r30, 0x2C	; 44
    1d60:	fe 4f       	sbci	r31, 0xFE	; 254
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d66:	08 95       	ret

00001d68 <ResetTimer>:

void ResetTimer(uint8_t Timer) {
	Timers[Timer] = 0;
    1d68:	e8 2f       	mov	r30, r24
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	ee 0f       	add	r30, r30
    1d6e:	ff 1f       	adc	r31, r31
    1d70:	ec 52       	subi	r30, 0x2C	; 44
    1d72:	fe 4f       	sbci	r31, 0xFE	; 254
    1d74:	11 82       	std	Z+1, r1	; 0x01
    1d76:	10 82       	st	Z, r1
    1d78:	08 95       	ret

00001d7a <utoa_cycle_sub8>:



/* Hex to BCD char */
char * utoa_cycle_sub8(uint8_t value, char *buffer, uint8_t _trim_zero, uint8_t max_value_length)
{
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	db 01       	movw	r26, r22
    1d80:	ea ee       	ldi	r30, 0xEA	; 234
    1d82:	f1 e0       	ldi	r31, 0x01	; 1
    1d84:	eb 01       	movw	r28, r22
    1d86:	6d 5f       	subi	r22, 0xFD	; 253
    1d88:	7f 4f       	sbci	r23, 0xFF	; 255
	char *ptr = buffer;
	for(uint8_t i=0;i<3;i++) {
		uint8_t pow3 = pgm_read_byte(pow3Table8 + i);
    1d8a:	34 91       	lpm	r19, Z
		uint8_t count = 0;
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
		while(value >= pow3) {
    1d8e:	83 17       	cp	r24, r19
    1d90:	18 f0       	brcs	.+6      	; 0x1d98 <utoa_cycle_sub8+0x1e>
			count ++;
    1d92:	9f 5f       	subi	r25, 0xFF	; 255
			value -= pow3;
    1d94:	83 1b       	sub	r24, r19
    1d96:	fb cf       	rjmp	.-10     	; 0x1d8e <utoa_cycle_sub8+0x14>
		}
		// Store digit char to buffer current position
		*ptr++ = count + '0';
    1d98:	90 5d       	subi	r25, 0xD0	; 208
    1d9a:	99 93       	st	Y+, r25
    1d9c:	31 96       	adiw	r30, 0x01	; 1

/* Hex to BCD char */
char * utoa_cycle_sub8(uint8_t value, char *buffer, uint8_t _trim_zero, uint8_t max_value_length)
{
	char *ptr = buffer;
	for(uint8_t i=0;i<3;i++) {
    1d9e:	c6 17       	cp	r28, r22
    1da0:	d7 07       	cpc	r29, r23
    1da2:	99 f7       	brne	.-26     	; 0x1d8a <utoa_cycle_sub8+0x10>
		}
		// Store digit char to buffer current position
		*ptr++ = count + '0';
	}
	// Store last char as EOL
	*ptr = 0;
    1da4:	13 96       	adiw	r26, 0x03	; 3
    1da6:	1c 92       	st	X, r1
    1da8:	13 97       	sbiw	r26, 0x03	; 3
	
	// Replace first zero to space
	if(_trim_zero) {
    1daa:	44 23       	and	r20, r20
    1dac:	69 f0       	breq	.+26     	; 0x1dc8 <utoa_cycle_sub8+0x4e>
		for(uint8_t i=0;i<2; i++) {
			if(buffer[i] == '0') {
    1dae:	8c 91       	ld	r24, X
    1db0:	80 33       	cpi	r24, 0x30	; 48
    1db2:	51 f4       	brne	.+20     	; 0x1dc8 <utoa_cycle_sub8+0x4e>
				buffer[i] = ' ';
    1db4:	80 e2       	ldi	r24, 0x20	; 32
    1db6:	8c 93       	st	X, r24
	*ptr = 0;
	
	// Replace first zero to space
	if(_trim_zero) {
		for(uint8_t i=0;i<2; i++) {
			if(buffer[i] == '0') {
    1db8:	11 96       	adiw	r26, 0x01	; 1
    1dba:	9c 91       	ld	r25, X
    1dbc:	11 97       	sbiw	r26, 0x01	; 1
    1dbe:	90 33       	cpi	r25, 0x30	; 48
    1dc0:	19 f4       	brne	.+6      	; 0x1dc8 <utoa_cycle_sub8+0x4e>
				buffer[i] = ' ';
    1dc2:	11 96       	adiw	r26, 0x01	; 1
    1dc4:	8c 93       	st	X, r24
    1dc6:	11 97       	sbiw	r26, 0x01	; 1
			}
			break;
		}
	}
	// Trim buffer length to max_value_length
	for(uint8_t i=0; i<(3 - max_value_length); i++) {
    1dc8:	cd 01       	movw	r24, r26
    1dca:	43 e0       	ldi	r20, 0x03	; 3
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	ba 01       	movw	r22, r20
    1dd0:	62 1b       	sub	r22, r18
    1dd2:	71 09       	sbc	r23, r1
    1dd4:	9b 01       	movw	r18, r22
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	4a 1b       	sub	r20, r26
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	42 17       	cp	r20, r18
    1dde:	53 07       	cpc	r21, r19
    1de0:	14 f4       	brge	.+4      	; 0x1de6 <utoa_cycle_sub8+0x6c>
		++buffer;
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	f8 cf       	rjmp	.-16     	; 0x1dd6 <utoa_cycle_sub8+0x5c>
	}
	return buffer;
}
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	08 95       	ret

00001dec <utoa_cycle_sub16>:

/* Hex to BCD uint16_t */
char * utoa_cycle_sub16(uint16_t value, char *buffer, uint8_t max_value_length)
{
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	8c 01       	movw	r16, r24
    1dfe:	20 ee       	ldi	r18, 0xE0	; 224
    1e00:	31 e0       	ldi	r19, 0x01	; 1
    1e02:	db 01       	movw	r26, r22
    1e04:	6b 01       	movw	r12, r22
    1e06:	85 e0       	ldi	r24, 0x05	; 5
    1e08:	c8 0e       	add	r12, r24
    1e0a:	d1 1c       	adc	r13, r1
    1e0c:	eb 01       	movw	r28, r22
	char *ptr = buffer;
	for(uint8_t i=0; i<5; i++) {
		uint16_t pow5 = pgm_read_word(pow5Table16 + i);
    1e0e:	f9 01       	movw	r30, r18
    1e10:	e5 90       	lpm	r14, Z+
    1e12:	f4 90       	lpm	r15, Z
		uint8_t count = 0;
    1e14:	90 e0       	ldi	r25, 0x00	; 0
		while(value >= pow5) {
    1e16:	0e 15       	cp	r16, r14
    1e18:	1f 05       	cpc	r17, r15
    1e1a:	20 f0       	brcs	.+8      	; 0x1e24 <utoa_cycle_sub16+0x38>
			count++;
    1e1c:	9f 5f       	subi	r25, 0xFF	; 255
			value -= pow5;
    1e1e:	0e 19       	sub	r16, r14
    1e20:	1f 09       	sbc	r17, r15
    1e22:	f9 cf       	rjmp	.-14     	; 0x1e16 <utoa_cycle_sub16+0x2a>
		}
		// Store digit char to buffer current position
		*ptr++ = count + '0';
    1e24:	90 5d       	subi	r25, 0xD0	; 208
    1e26:	99 93       	st	Y+, r25
    1e28:	2e 5f       	subi	r18, 0xFE	; 254
    1e2a:	3f 4f       	sbci	r19, 0xFF	; 255

/* Hex to BCD uint16_t */
char * utoa_cycle_sub16(uint16_t value, char *buffer, uint8_t max_value_length)
{
	char *ptr = buffer;
	for(uint8_t i=0; i<5; i++) {
    1e2c:	cc 15       	cp	r28, r12
    1e2e:	dd 05       	cpc	r29, r13
    1e30:	71 f7       	brne	.-36     	; 0x1e0e <utoa_cycle_sub16+0x22>
		}
		// Store digit char to buffer current position
		*ptr++ = count + '0';
	}
	// Store last char as EOL
	*ptr = 0;
    1e32:	fb 01       	movw	r30, r22
    1e34:	15 82       	std	Z+5, r1	; 0x05
    1e36:	cb 01       	movw	r24, r22
    1e38:	04 96       	adiw	r24, 0x04	; 4

	// Replace first zero to space
	for(uint8_t i=0;i<4; i++) {
		if(buffer[i] == '0') {
			buffer[i] = ' ';
    1e3a:	20 e2       	ldi	r18, 0x20	; 32
	// Store last char as EOL
	*ptr = 0;

	// Replace first zero to space
	for(uint8_t i=0;i<4; i++) {
		if(buffer[i] == '0') {
    1e3c:	3c 91       	ld	r19, X
    1e3e:	30 33       	cpi	r19, 0x30	; 48
    1e40:	31 f0       	breq	.+12     	; 0x1e4e <utoa_cycle_sub16+0x62>
char * utoa_cycle_sub16(uint16_t value, char *buffer, uint8_t max_value_length)
{
	char *ptr = buffer;
	for(uint8_t i=0; i<5; i++) {
		uint16_t pow5 = pgm_read_word(pow5Table16 + i);
		uint8_t count = 0;
    1e42:	cb 01       	movw	r24, r22
			continue;
		}
		break;
	}
	// Trim buffer length to max_value_length
	for(uint8_t i=0; i<(5 - max_value_length); i++) {
    1e44:	25 e0       	ldi	r18, 0x05	; 5
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	24 1b       	sub	r18, r20
    1e4a:	31 09       	sbc	r19, r1
    1e4c:	05 c0       	rjmp	.+10     	; 0x1e58 <utoa_cycle_sub16+0x6c>
	*ptr = 0;

	// Replace first zero to space
	for(uint8_t i=0;i<4; i++) {
		if(buffer[i] == '0') {
			buffer[i] = ' ';
    1e4e:	2d 93       	st	X+, r18
	}
	// Store last char as EOL
	*ptr = 0;

	// Replace first zero to space
	for(uint8_t i=0;i<4; i++) {
    1e50:	8a 17       	cp	r24, r26
    1e52:	9b 07       	cpc	r25, r27
    1e54:	b1 f3       	breq	.-20     	; 0x1e42 <utoa_cycle_sub16+0x56>
    1e56:	f2 cf       	rjmp	.-28     	; 0x1e3c <utoa_cycle_sub16+0x50>
			continue;
		}
		break;
	}
	// Trim buffer length to max_value_length
	for(uint8_t i=0; i<(5 - max_value_length); i++) {
    1e58:	48 2f       	mov	r20, r24
    1e5a:	46 1b       	sub	r20, r22
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	42 17       	cp	r20, r18
    1e60:	53 07       	cpc	r21, r19
    1e62:	14 f4       	brge	.+4      	; 0x1e68 <utoa_cycle_sub16+0x7c>
		++buffer;
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	f8 cf       	rjmp	.-16     	; 0x1e58 <utoa_cycle_sub16+0x6c>
	}
	return buffer;
}
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	df 90       	pop	r13
    1e76:	cf 90       	pop	r12
    1e78:	08 95       	ret

00001e7a <bcd2dec>:

/* Convert BCD value into decimal */
uint8_t bcd2dec(uint8_t val)
{
	return (val & 0xF) + ((val & 0xF0) >> 4)*10;
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	92 95       	swap	r25
    1e7e:	9f 70       	andi	r25, 0x0F	; 15
    1e80:	8f 70       	andi	r24, 0x0F	; 15
}
    1e82:	2a e0       	ldi	r18, 0x0A	; 10
    1e84:	92 9f       	mul	r25, r18
    1e86:	80 0d       	add	r24, r0
    1e88:	11 24       	eor	r1, r1
    1e8a:	08 95       	ret

00001e8c <dec2bcd>:

/* Convert decimal value into BCD */
uint8_t dec2bcd(uint8_t val)
{
	return (val % 10) + ((val / 10) << 4);
    1e8c:	6a e0       	ldi	r22, 0x0A	; 10
    1e8e:	0e 94 ca 10 	call	0x2194	; 0x2194 <__udivmodqi4>
}
    1e92:	20 e1       	ldi	r18, 0x10	; 16
    1e94:	82 9f       	mul	r24, r18
    1e96:	90 0d       	add	r25, r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	89 2f       	mov	r24, r25
    1e9c:	08 95       	ret

00001e9e <__vector_7>:
/* Functions prototypes */
void InitGPIO(void);

//------------------------------ System tick interrupt
ISR(TIMER2_COMPA_vect)
{
    1e9e:	1f 92       	push	r1
    1ea0:	0f 92       	push	r0
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	0f 92       	push	r0
    1ea6:	11 24       	eor	r1, r1
    1ea8:	8f 93       	push	r24
	systick++;
    1eaa:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <systick>
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <systick>
}
    1eb4:	8f 91       	pop	r24
    1eb6:	0f 90       	pop	r0
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	0f 90       	pop	r0
    1ebc:	1f 90       	pop	r1
    1ebe:	18 95       	reti

00001ec0 <__vector_1>:

//------------------------------ INT0 interrupt
ISR(INT0_vect)
{
    1ec0:	1f 92       	push	r1
    1ec2:	0f 92       	push	r0
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	0f 92       	push	r0
    1ec8:	11 24       	eor	r1, r1
    1eca:	8f 93       	push	r24
    1ecc:	9f 93       	push	r25
    1ece:	ef 93       	push	r30
    1ed0:	ff 93       	push	r31
	// Toggle external rtc clock
	device._ext_clock ^= 0x1;
    1ed2:	eb ea       	ldi	r30, 0xAB	; 171
    1ed4:	f3 e0       	ldi	r31, 0x03	; 3
    1ed6:	90 81       	ld	r25, Z
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	89 27       	eor	r24, r25
    1edc:	80 83       	st	Z, r24
}
    1ede:	ff 91       	pop	r31
    1ee0:	ef 91       	pop	r30
    1ee2:	9f 91       	pop	r25
    1ee4:	8f 91       	pop	r24
    1ee6:	0f 90       	pop	r0
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	0f 90       	pop	r0
    1eec:	1f 90       	pop	r1
    1eee:	18 95       	reti

00001ef0 <__vector_18>:

//------------------------------ USART RX Interrupt vector
ISR(USART_RX_vect)
{
    1ef0:	1f 92       	push	r1
    1ef2:	0f 92       	push	r0
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	0f 92       	push	r0
    1ef8:	11 24       	eor	r1, r1
    1efa:	2f 93       	push	r18
    1efc:	3f 93       	push	r19
    1efe:	4f 93       	push	r20
    1f00:	5f 93       	push	r21
    1f02:	6f 93       	push	r22
    1f04:	7f 93       	push	r23
    1f06:	8f 93       	push	r24
    1f08:	9f 93       	push	r25
    1f0a:	af 93       	push	r26
    1f0c:	bf 93       	push	r27
    1f0e:	ef 93       	push	r30
    1f10:	ff 93       	push	r31
	UART_RX_Service();
    1f12:	0e 94 05 04 	call	0x80a	; 0x80a <UART_RX_Service>
}
    1f16:	ff 91       	pop	r31
    1f18:	ef 91       	pop	r30
    1f1a:	bf 91       	pop	r27
    1f1c:	af 91       	pop	r26
    1f1e:	9f 91       	pop	r25
    1f20:	8f 91       	pop	r24
    1f22:	7f 91       	pop	r23
    1f24:	6f 91       	pop	r22
    1f26:	5f 91       	pop	r21
    1f28:	4f 91       	pop	r20
    1f2a:	3f 91       	pop	r19
    1f2c:	2f 91       	pop	r18
    1f2e:	0f 90       	pop	r0
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	0f 90       	pop	r0
    1f34:	1f 90       	pop	r1
    1f36:	18 95       	reti

00001f38 <__vector_19>:

//------------------------------ USART UDRE Interrupt vector
ISR(USART_UDRE_vect)
{
    1f38:	1f 92       	push	r1
    1f3a:	0f 92       	push	r0
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	0f 92       	push	r0
    1f40:	11 24       	eor	r1, r1
    1f42:	2f 93       	push	r18
    1f44:	3f 93       	push	r19
    1f46:	4f 93       	push	r20
    1f48:	5f 93       	push	r21
    1f4a:	6f 93       	push	r22
    1f4c:	7f 93       	push	r23
    1f4e:	8f 93       	push	r24
    1f50:	9f 93       	push	r25
    1f52:	af 93       	push	r26
    1f54:	bf 93       	push	r27
    1f56:	ef 93       	push	r30
    1f58:	ff 93       	push	r31
	UART_UDRE_TX_Service();
    1f5a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <UART_UDRE_TX_Service>
}
    1f5e:	ff 91       	pop	r31
    1f60:	ef 91       	pop	r30
    1f62:	bf 91       	pop	r27
    1f64:	af 91       	pop	r26
    1f66:	9f 91       	pop	r25
    1f68:	8f 91       	pop	r24
    1f6a:	7f 91       	pop	r23
    1f6c:	6f 91       	pop	r22
    1f6e:	5f 91       	pop	r21
    1f70:	4f 91       	pop	r20
    1f72:	3f 91       	pop	r19
    1f74:	2f 91       	pop	r18
    1f76:	0f 90       	pop	r0
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	0f 90       	pop	r0
    1f7c:	1f 90       	pop	r1
    1f7e:	18 95       	reti

00001f80 <__vector_24>:

//------------------------------ TWI interrupt
ISR(TWI_vect)
{
    1f80:	1f 92       	push	r1
    1f82:	0f 92       	push	r0
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	0f 92       	push	r0
    1f88:	11 24       	eor	r1, r1
    1f8a:	2f 93       	push	r18
    1f8c:	3f 93       	push	r19
    1f8e:	4f 93       	push	r20
    1f90:	5f 93       	push	r21
    1f92:	6f 93       	push	r22
    1f94:	7f 93       	push	r23
    1f96:	8f 93       	push	r24
    1f98:	9f 93       	push	r25
    1f9a:	af 93       	push	r26
    1f9c:	bf 93       	push	r27
    1f9e:	ef 93       	push	r30
    1fa0:	ff 93       	push	r31
	I2C_TWIService();
    1fa2:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_TWIService>
}
    1fa6:	ff 91       	pop	r31
    1fa8:	ef 91       	pop	r30
    1faa:	bf 91       	pop	r27
    1fac:	af 91       	pop	r26
    1fae:	9f 91       	pop	r25
    1fb0:	8f 91       	pop	r24
    1fb2:	7f 91       	pop	r23
    1fb4:	6f 91       	pop	r22
    1fb6:	5f 91       	pop	r21
    1fb8:	4f 91       	pop	r20
    1fba:	3f 91       	pop	r19
    1fbc:	2f 91       	pop	r18
    1fbe:	0f 90       	pop	r0
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	0f 90       	pop	r0
    1fc4:	1f 90       	pop	r1
    1fc6:	18 95       	reti

00001fc8 <InitGPIO>:

//------------------------------ MCU IO initialization
inline void InitGPIO(void)
{
	// Power reduction initialize
	POWER_REDUCTION_INIT();
    1fc8:	94 e0       	ldi	r25, 0x04	; 4
    1fca:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	// Initialize systick timer
	SYSTICK_TIMER_INIT();
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1fd4:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1fd8:	9d e7       	ldi	r25, 0x7D	; 125
    1fda:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1fde:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	SYSTICK_INTERRUPT_ENABLE();
    1fe2:	e0 e7       	ldi	r30, 0x70	; 112
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	90 81       	ld	r25, Z
    1fe8:	92 60       	ori	r25, 0x02	; 2
    1fea:	90 83       	st	Z, r25
	// Initialize timer for measurement
	MEASURING_TMR_INIT();
    1fec:	14 bc       	out	0x24, r1	; 36
    1fee:	85 bd       	out	0x25, r24	; 37
    1ff0:	ee e6       	ldi	r30, 0x6E	; 110
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	90 81       	ld	r25, Z
    1ff6:	9e 7f       	andi	r25, 0xFE	; 254
    1ff8:	90 83       	st	Z, r25
    1ffa:	16 bc       	out	0x26, r1	; 38
	// Initialize UART
	UART_INIT();
    1ffc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    2000:	93 e3       	ldi	r25, 0x33	; 51
    2002:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    2006:	e1 ec       	ldi	r30, 0xC1	; 193
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	98 e0       	ldi	r25, 0x08	; 8
    200c:	90 83       	st	Z, r25
    200e:	96 e0       	ldi	r25, 0x06	; 6
    2010:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UART_TX_INTERRUPT_ENABLE();
    2014:	90 81       	ld	r25, Z
    2016:	90 62       	ori	r25, 0x20	; 32
    2018:	90 83       	st	Z, r25
	// Initialize RTC IRQ input INT0
	X1226_IRQ_INIT();
    201a:	52 98       	cbi	0x0a, 2	; 10
    201c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	8d bb       	out	0x1d, r24	; 29
	// Initialize button port
	BTN_INIT();
    2024:	3a 98       	cbi	0x07, 2	; 7
	// Initialize encoder port
	ENC_INIT();
    2026:	87 b1       	in	r24, 0x07	; 7
    2028:	8c 7f       	andi	r24, 0xFC	; 252
    202a:	87 b9       	out	0x07, r24	; 7
	// Initialize red led port
	LED_RED_INIT();
    202c:	22 9a       	sbi	0x04, 2	; 4
    202e:	2a 98       	cbi	0x05, 2	; 5
	// Initialize yellow port
	LED_YELLOW_INIT();
    2030:	21 9a       	sbi	0x04, 1	; 4
    2032:	29 98       	cbi	0x05, 1	; 5
	// Initialize green led port
	LED_GRN_INIT();
    2034:	20 9a       	sbi	0x04, 0	; 4
    2036:	28 98       	cbi	0x05, 0	; 5
	// Initialize LCD back light control port
	BL_CTRL_INIT();
    2038:	55 9a       	sbi	0x0a, 5	; 10
    203a:	5d 9a       	sbi	0x0b, 5	; 11
    203c:	08 95       	ret

0000203e <main>:

//------------------------------ Entry point
int main(void)
{
	// Main initialize
	InitGPIO();
    203e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <InitGPIO>
	InitMessages();
    2042:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <InitMessages>
	InitTimers();
    2046:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <InitTimers>
	I2C_Init();
    204a:	0e 94 17 03 	call	0x62e	; 0x62e <I2C_Init>
	// FSMs initialize
	FSM_SYSTEM_Init();
    204e:	0e 94 c7 0b 	call	0x178e	; 0x178e <FSM_SYSTEM_Init>
	FSM_UART_Init();
    2052:	0e 94 b6 0c 	call	0x196c	; 0x196c <FSM_UART_Init>
	FSM_PCF8574_Init();
    2056:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <FSM_PCF8574_Init>
	FSM_LCD_Init();
    205a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <FSM_LCD_Init>
	FSM_X1226_Init();
    205e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <FSM_X1226_Init>
	FSM_MHZ19B_Init();
    2062:	0e 94 22 09 	call	0x1244	; 0x1244 <FSM_MHZ19B_Init>
	FSM_DHT_Init();
    2066:	0e 94 bb 04 	call	0x976	; 0x976 <FSM_DHT_Init>
	FSM_BUTTON_Init();
    206a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <FSM_BUTTON_Init>
	FSM_ENC_Init();
    206e:	0e 94 61 05 	call	0xac2	; 0xac2 <FSM_ENC_Init>
	FSM_LEDS_Init();
    2072:	0e 94 55 08 	call	0x10aa	; 0x10aa <FSM_LEDS_Init>
	FSM_BUZZER_Init();
    2076:	0e 94 ab 04 	call	0x956	; 0x956 <FSM_BUZZER_Init>

	// Enable global interrupts
	sei();
    207a:	78 94       	sei

	// Main loop
    while (1) {
		// Processing software timers queue
		ProcessTimers(&systick);
    207c:	88 ee       	ldi	r24, 0xE8	; 232
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <ProcessTimers>
		// Processing FSMs
		FSM_SYSTEM_Process();
    2084:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <FSM_SYSTEM_Process>
		FSM_UART_Process();
    2088:	0e 94 b9 0c 	call	0x1972	; 0x1972 <FSM_UART_Process>
		FSM_PCF8574_Process();
    208c:	0e 94 19 0a 	call	0x1432	; 0x1432 <FSM_PCF8574_Process>
		FSM_LCD_Process();
    2090:	0e 94 46 06 	call	0xc8c	; 0xc8c <FSM_LCD_Process>
		FSM_X1226_Process();
    2094:	0e 94 c2 0c 	call	0x1984	; 0x1984 <FSM_X1226_Process>
		FSM_DHT_Process();
    2098:	0e 94 c4 04 	call	0x988	; 0x988 <FSM_DHT_Process>
		FSM_MHZ19B_Process();
    209c:	0e 94 36 09 	call	0x126c	; 0x126c <FSM_MHZ19B_Process>
		FSM_BUTTON_Process();
    20a0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <FSM_BUTTON_Process>
		FSM_ENC_Process();
    20a4:	0e 94 66 05 	call	0xacc	; 0xacc <FSM_ENC_Process>
		FSM_LEDS_Process();
    20a8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <FSM_LEDS_Process>
		FSM_BUZZER_Process();
    20ac:	0e 94 ae 04 	call	0x95c	; 0x95c <FSM_BUZZER_Process>

		// Processing messages queue
		ProcessMessages();
    20b0:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <ProcessMessages>
    20b4:	e3 cf       	rjmp	.-58     	; 0x207c <main+0x3e>

000020b6 <MENU_Change>:



void MENU_Change(menu_item_t* new_menu)
{
	if((void*)new_menu == (void*)&NULL_ENTRY)
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	8b 3a       	cpi	r24, 0xAB	; 171
    20ba:	92 07       	cpc	r25, r18
    20bc:	39 f0       	breq	.+14     	; 0x20cc <MENU_Change+0x16>
		return;
	selected_menu_item = new_menu;
    20be:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <selected_menu_item+0x1>
    20c2:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <selected_menu_item>
	device.flags._menu_changed = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <device+0x7>
    20cc:	08 95       	ret

000020ce <MENU_Start>:
}

void MENU_Start(void)
{
	selected_menu_item = (menu_item_t *)&m_s1i1;
    20ce:	88 ea       	ldi	r24, 0xA8	; 168
    20d0:	92 e0       	ldi	r25, 0x02	; 2
    20d2:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <selected_menu_item+0x1>
    20d6:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <selected_menu_item>
	device.flags._menu_changed = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <device+0x7>
    20e0:	08 95       	ret

000020e2 <MENU_GetMenuTextByShift>:
char *MENU_GetMenuTextByShift(int8_t shift)
{
	int8_t i;
	menu_item_t *temp_menu_item;

	if ((void*)selected_menu_item == (void*)&NULL_ENTRY)
    20e2:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <selected_menu_item>
    20e6:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <selected_menu_item+0x1>
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	eb 3a       	cpi	r30, 0xAB	; 171
    20ee:	f9 07       	cpc	r31, r25
    20f0:	f9 f0       	breq	.+62     	; 0x2130 <MENU_GetMenuTextByShift+0x4e>
		return (char *)strNULL;

	i = shift;
	temp_menu_item = selected_menu_item;
	if (i>0) {
    20f2:	18 16       	cp	r1, r24
    20f4:	9c f4       	brge	.+38     	; 0x211c <MENU_GetMenuTextByShift+0x3a>
		while( i!=0 ) {
			if ((void*)temp_menu_item != (void*)&NULL_ENTRY) {
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	eb 3a       	cpi	r30, 0xAB	; 171
    20fa:	f9 07       	cpc	r31, r25
    20fc:	19 f0       	breq	.+6      	; 0x2104 <MENU_GetMenuTextByShift+0x22>
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Next);
    20fe:	25 91       	lpm	r18, Z+
    2100:	34 91       	lpm	r19, Z
    2102:	f9 01       	movw	r30, r18
    2104:	81 50       	subi	r24, 0x01	; 1
		return (char *)strNULL;

	i = shift;
	temp_menu_item = selected_menu_item;
	if (i>0) {
		while( i!=0 ) {
    2106:	b9 f7       	brne	.-18     	; 0x20f6 <MENU_GetMenuTextByShift+0x14>
    2108:	0b c0       	rjmp	.+22     	; 0x2120 <MENU_GetMenuTextByShift+0x3e>
			}
			i--;
		}
	} else {
		while( i!=0 ) {
			if ((void*)temp_menu_item != (void*)&NULL_ENTRY) {
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	eb 3a       	cpi	r30, 0xAB	; 171
    210e:	f9 07       	cpc	r31, r25
    2110:	21 f0       	breq	.+8      	; 0x211a <MENU_GetMenuTextByShift+0x38>
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Previous);
    2112:	32 96       	adiw	r30, 0x02	; 2
    2114:	25 91       	lpm	r18, Z+
    2116:	34 91       	lpm	r19, Z
    2118:	f9 01       	movw	r30, r18
    211a:	8f 5f       	subi	r24, 0xFF	; 255
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Next);
			}
			i--;
		}
	} else {
		while( i!=0 ) {
    211c:	81 11       	cpse	r24, r1
    211e:	f5 cf       	rjmp	.-22     	; 0x210a <MENU_GetMenuTextByShift+0x28>
			}
			i++;
		}
	}

	if ((void*)temp_menu_item == (void*)&NULL_ENTRY) {
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	eb 3a       	cpi	r30, 0xAB	; 171
    2124:	f8 07       	cpc	r31, r24
    2126:	21 f0       	breq	.+8      	; 0x2130 <MENU_GetMenuTextByShift+0x4e>
		return (char *)strNULL;
	} else {
		return ((char *)pgm_read_word(&temp_menu_item->Text));
    2128:	39 96       	adiw	r30, 0x09	; 9
    212a:	85 91       	lpm	r24, Z+
    212c:	94 91       	lpm	r25, Z
    212e:	08 95       	ret
{
	int8_t i;
	menu_item_t *temp_menu_item;

	if ((void*)selected_menu_item == (void*)&NULL_ENTRY)
		return (char *)strNULL;
    2130:	83 eb       	ldi	r24, 0xB3	; 179
    2132:	92 e0       	ldi	r25, 0x02	; 2
	if ((void*)temp_menu_item == (void*)&NULL_ENTRY) {
		return (char *)strNULL;
	} else {
		return ((char *)pgm_read_word(&temp_menu_item->Text));
	}
}
    2134:	08 95       	ret

00002136 <MENU_GetChildMenuSymbolByShift>:
char *MENU_GetChildMenuSymbolByShift(int8_t shift)
{
	int8_t i;
	menu_item_t *temp_menu_item;

	if ((void*)selected_menu_item == (void*)&NULL_ENTRY)
    2136:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <selected_menu_item>
    213a:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <selected_menu_item+0x1>
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	eb 3a       	cpi	r30, 0xAB	; 171
    2142:	f2 07       	cpc	r31, r18
    2144:	21 f1       	breq	.+72     	; 0x218e <MENU_GetChildMenuSymbolByShift+0x58>
		return (char *)strNULL;

	i = shift;
	temp_menu_item = selected_menu_item;
	if (i>0) {
    2146:	18 16       	cp	r1, r24
    2148:	9c f4       	brge	.+38     	; 0x2170 <MENU_GetChildMenuSymbolByShift+0x3a>
		while( i!=0 ) {
			if ((void*)temp_menu_item != (void*)&NULL_ENTRY) {
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	eb 3a       	cpi	r30, 0xAB	; 171
    214e:	f9 07       	cpc	r31, r25
    2150:	19 f0       	breq	.+6      	; 0x2158 <MENU_GetChildMenuSymbolByShift+0x22>
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Next);
    2152:	25 91       	lpm	r18, Z+
    2154:	34 91       	lpm	r19, Z
    2156:	f9 01       	movw	r30, r18
    2158:	81 50       	subi	r24, 0x01	; 1
		return (char *)strNULL;

	i = shift;
	temp_menu_item = selected_menu_item;
	if (i>0) {
		while( i!=0 ) {
    215a:	b9 f7       	brne	.-18     	; 0x214a <MENU_GetChildMenuSymbolByShift+0x14>
    215c:	0b c0       	rjmp	.+22     	; 0x2174 <MENU_GetChildMenuSymbolByShift+0x3e>
			}
			i--;
		}
	} else {
		while( i!=0 ) {
			if ((void*)temp_menu_item != (void*)&NULL_ENTRY) {
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	eb 3a       	cpi	r30, 0xAB	; 171
    2162:	f2 07       	cpc	r31, r18
    2164:	21 f0       	breq	.+8      	; 0x216e <MENU_GetChildMenuSymbolByShift+0x38>
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Previous);
    2166:	32 96       	adiw	r30, 0x02	; 2
    2168:	25 91       	lpm	r18, Z+
    216a:	34 91       	lpm	r19, Z
    216c:	f9 01       	movw	r30, r18
    216e:	8f 5f       	subi	r24, 0xFF	; 255
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Next);
			}
			i--;
		}
	} else {
		while( i!=0 ) {
    2170:	81 11       	cpse	r24, r1
    2172:	f5 cf       	rjmp	.-22     	; 0x215e <MENU_GetChildMenuSymbolByShift+0x28>
			}
			i++;
		}
	}

	if ((void*)temp_menu_item == (void*)&NULL_ENTRY) {
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	eb 3a       	cpi	r30, 0xAB	; 171
    2178:	f8 07       	cpc	r31, r24
    217a:	49 f0       	breq	.+18     	; 0x218e <MENU_GetChildMenuSymbolByShift+0x58>
		return (char *)strNULL;
	} else {
		if((char *)pgm_read_word(&temp_menu_item->Child) != (void *)&NULL_ENTRY) {
    217c:	36 96       	adiw	r30, 0x06	; 6
    217e:	85 91       	lpm	r24, Z+
    2180:	94 91       	lpm	r25, Z
    2182:	8b 5a       	subi	r24, 0xAB	; 171
    2184:	90 40       	sbci	r25, 0x00	; 0
    2186:	19 f0       	breq	.+6      	; 0x218e <MENU_GetChildMenuSymbolByShift+0x58>
			return (char *)LNG_SMB_ANGLE_BRACKET_RIGHT;
    2188:	85 e8       	ldi	r24, 0x85	; 133
    218a:	93 e0       	ldi	r25, 0x03	; 3
    218c:	08 95       	ret
		} else {
			return (char *)strNULL;
    218e:	83 eb       	ldi	r24, 0xB3	; 179
    2190:	92 e0       	ldi	r25, 0x02	; 2
		}
	}
    2192:	08 95       	ret

00002194 <__udivmodqi4>:
    2194:	99 1b       	sub	r25, r25
    2196:	79 e0       	ldi	r23, 0x09	; 9
    2198:	04 c0       	rjmp	.+8      	; 0x21a2 <__udivmodqi4_ep>

0000219a <__udivmodqi4_loop>:
    219a:	99 1f       	adc	r25, r25
    219c:	96 17       	cp	r25, r22
    219e:	08 f0       	brcs	.+2      	; 0x21a2 <__udivmodqi4_ep>
    21a0:	96 1b       	sub	r25, r22

000021a2 <__udivmodqi4_ep>:
    21a2:	88 1f       	adc	r24, r24
    21a4:	7a 95       	dec	r23
    21a6:	c9 f7       	brne	.-14     	; 0x219a <__udivmodqi4_loop>
    21a8:	80 95       	com	r24
    21aa:	08 95       	ret

000021ac <__udivmodhi4>:
    21ac:	aa 1b       	sub	r26, r26
    21ae:	bb 1b       	sub	r27, r27
    21b0:	51 e1       	ldi	r21, 0x11	; 17
    21b2:	07 c0       	rjmp	.+14     	; 0x21c2 <__udivmodhi4_ep>

000021b4 <__udivmodhi4_loop>:
    21b4:	aa 1f       	adc	r26, r26
    21b6:	bb 1f       	adc	r27, r27
    21b8:	a6 17       	cp	r26, r22
    21ba:	b7 07       	cpc	r27, r23
    21bc:	10 f0       	brcs	.+4      	; 0x21c2 <__udivmodhi4_ep>
    21be:	a6 1b       	sub	r26, r22
    21c0:	b7 0b       	sbc	r27, r23

000021c2 <__udivmodhi4_ep>:
    21c2:	88 1f       	adc	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	5a 95       	dec	r21
    21c8:	a9 f7       	brne	.-22     	; 0x21b4 <__udivmodhi4_loop>
    21ca:	80 95       	com	r24
    21cc:	90 95       	com	r25
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	08 95       	ret

000021d4 <__tablejump2__>:
    21d4:	ee 0f       	add	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	05 90       	lpm	r0, Z+
    21da:	f4 91       	lpm	r31, Z
    21dc:	e0 2d       	mov	r30, r0
    21de:	09 94       	ijmp

000021e0 <_exit>:
    21e0:	f8 94       	cli

000021e2 <__stop_program>:
    21e2:	ff cf       	rjmp	.-2      	; 0x21e2 <__stop_program>
