
CO2_Semaphore.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00002172  00002206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000234  0080019e  0080019e  000022a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000735b  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020bc  00000000  00000000  00009b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003229  00000000  00000000  0000bbcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000093c  00000000  00000000  0000edf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002115  00000000  00000000  0000f730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002659  00000000  00000000  00011845  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  00013e9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__ctors_end>
       4:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__vector_1>
       8:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
       c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      10:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      14:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      18:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      1c:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__vector_7>
      20:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      24:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      28:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      2c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      30:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      34:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      38:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      3c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      40:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      44:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      48:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__vector_18>
      4c:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_19>
      50:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      54:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      58:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      5c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      60:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__vector_24>
      64:	0c 94 1a 02 	jmp	0x434	; 0x434 <__bad_interrupt>
      68:	2e 08       	sbc	r2, r14
      6a:	52 06       	cpc	r5, r18
      6c:	5c 06       	cpc	r5, r28
      6e:	89 06       	cpc	r8, r25
      70:	92 06       	cpc	r9, r18
      72:	b7 06       	cpc	r11, r23
      74:	c9 06       	cpc	r12, r25
      76:	03 07       	cpc	r16, r19
      78:	93 0d       	add	r25, r3
      7a:	9e 0c       	add	r9, r14
      7c:	a6 0c       	add	r10, r6
      7e:	b8 0c       	add	r11, r8
      80:	d1 0c       	add	r13, r1
      82:	e2 0c       	add	r14, r2
      84:	fc 0c       	add	r15, r12
      86:	2c 0d       	add	r18, r12
      88:	3d 0d       	add	r19, r13
      8a:	48 0d       	add	r20, r8
      8c:	58 0d       	add	r21, r8

0000008e <__trampolines_end>:
      8e:	21 00       	.word	0x0021	; ????

00000090 <cmd_get_data>:
      90:	ff 01 86 00 00 00 00 00 79                          ........y

00000099 <cmd_set_abc>:
      99:	ff 01 79 00 00 00 00 00 86                          ..y......

000000a2 <cmd_set_range>:
      a2:	ff 01 99 00 00 00 13 88 cb                          .........

000000ab <Null_Menu>:
	...

000000b6 <cc_char_space>:
      b6:	20 20 20 26 20 20 20 26 20 20 20 24 00                 &   &   $.

000000c3 <cc_char_colon>:
      c3:	20 20 20 26 20 02 20 26 20 02 20 24 00                 & . & . $.

000000d0 <cc_char_f>:
      d0:	05 02 01 26 ff 02 20 26 04 20 20 24 00              ...&.. &.  $.

000000dd <cc_char_e>:
      dd:	05 02 01 26 ff 02 20 26 04 02 03 24 00              ...&.. &...$.

000000ea <cc_char_d>:
      ea:	06 02 06 26 ff 20 ff 26 03 02 03 24 00              ...&. .&...$.

000000f7 <cc_char_c>:
      f7:	05 02 01 26 ff 20 20 26 04 02 03 24 00              ...&.  &...$.

00000104 <cc_char_b>:
     104:	05 02 06 26 ff 02 07 26 04 02 03 24 00              ...&...&...$.

00000111 <cc_char_a>:
     111:	05 02 06 26 ff 02 ff 26 04 20 03 24 00              ...&...&. .$.

0000011e <cc_char_9>:
     11e:	05 02 06 26 04 02 ff 26 04 02 03 24 00              ...&...&...$.

0000012b <cc_char_8>:
     12b:	05 02 06 26 ff 02 ff 26 04 02 03 24 00              ...&...&...$.

00000138 <cc_char_7>:
     138:	00 02 06 26 20 05 03 26 20 04 20 24 00              ...& ..& . $.

00000145 <cc_char_6>:
     145:	05 02 01 26 ff 02 06 26 04 02 03 24 00              ...&...&...$.

00000152 <cc_char_5>:
     152:	05 02 01 26 04 02 06 26 04 02 03 24 00              ...&...&...$.

0000015f <cc_char_4>:
     15f:	05 20 06 26 04 02 ff 26 20 20 03 24 00              . .&...&  .$.

0000016c <cc_char_3>:
     16c:	00 02 06 26 20 02 06 26 04 02 03 24 00              ...& ..&...$.

00000179 <cc_char_2>:
     179:	00 02 06 26 05 02 03 26 04 02 03 24 00              ...&...&...$.

00000186 <cc_char_1>:
     186:	00 ff fe 26 20 ff 20 26 04 02 03 24 00              ...& . &...$.

00000193 <cc_char_0>:
     193:	05 02 06 26 ff 20 ff 26 04 02 03 24 00              ...&. .&...$.

000001a0 <cc_smb8>:
     1a0:	18 1c 1e 1f 1f 1e 1c 18                             ........

000001a8 <cc_smb7>:
     1a8:	18 1e 1e 1f 1f 1f 1f 1f                             ........

000001b0 <cc_smb6>:
     1b0:	03 0f 0f 1f 1f 1f 1f 1f                             ........

000001b8 <cc_smb5>:
     1b8:	1f 0f 0f 03 00 00 00 00                             ........

000001c0 <cc_smb4>:
     1c0:	1f 1e 1e 18 00 00 00 00                             ........

000001c8 <cc_smb3>:
     1c8:	1f 1f 1f 1f 00 00 00 00                             ........

000001d0 <cc_smb2>:
     1d0:	18 1e 1e 1f 00 00 00 00                             ........

000001d8 <cc_smb1>:
     1d8:	03 0f 0f 1f 00 00 00 00                             ........

000001e0 <pow5Table16>:
     1e0:	10 27 e8 03 64 00 0a 00 01 00                       .'..d.....

000001ea <pow3Table8>:
     1ea:	64 0a 01                                            d..

000001ed <m_s5i4>:
     1ed:	ab 00 f8 01 19 02 ab 00 00 e0 02                    ...........

000001f8 <m_s5i3>:
     1f8:	ed 01 03 02 19 02 ab 00 00 ef 02                    ...........

00000203 <m_s5i2>:
     203:	f8 01 0e 02 19 02 ab 00 00 01 03                    ...........

0000020e <m_s5i1>:
     20e:	03 02 ab 00 19 02 a8 02 00 d0 02                    ...........

00000219 <m_s1i3>:
     219:	ab 00 9d 02 ab 00 0e 02 00 0b 03                    ...........

00000224 <m_s2i4>:
     224:	ab 00 50 02 9d 02 ab 00 00 16 03                    ..P........

0000022f <m_s4i3>:
     22f:	ab 00 3a 02 50 02 ab 00 00 24 03                    ..:.P....$.

0000023a <m_s4i2>:
     23a:	2f 02 45 02 50 02 ab 00 00 31 03                    /.E.P....1.

00000245 <m_s4i1>:
     245:	3a 02 ab 00 50 02 92 02 00 d0 02                    :...P......

00000250 <m_s2i3>:
     250:	24 02 87 02 9d 02 45 02 00 3e 03                    $.....E..>.

0000025b <m_s3i4>:
     25b:	ab 00 66 02 87 02 ab 00 00 44 03                    ..f......D.

00000266 <m_s3i3>:
     266:	5b 02 71 02 87 02 ab 00 00 50 03                    [.q......P.

00000271 <m_s3i2>:
     271:	66 02 7c 02 87 02 ab 00 00 5b 03                    f.|......[.

0000027c <m_s3i1>:
     27c:	71 02 ab 00 87 02 92 02 00 d0 02                    q..........

00000287 <m_s2i2>:
     287:	50 02 92 02 9d 02 7c 02 00 66 03                    P.....|..f.

00000292 <m_s2i1>:
     292:	87 02 ab 00 9d 02 a8 02 00 d0 02                    ...........

0000029d <m_s1i2>:
     29d:	19 02 a8 02 ab 00 92 02 00 6c 03                    .........l.

000002a8 <m_s1i1>:
     2a8:	9d 02 ab 00 ab 00 ab 00 01 d4 02                    ...........

000002b3 <strNULL>:
	...

000002b4 <LNG_SUNDAY>:
     2b4:	53 75 6e 00                                         Sun.

000002b8 <LNG_SATURDAY>:
     2b8:	53 61 74 00                                         Sat.

000002bc <LNG_FRIDAY>:
     2bc:	46 72 69 00                                         Fri.

000002c0 <LNG_THURSDAY>:
     2c0:	54 68 75 00                                         Thu.

000002c4 <LNG_WEDNESDAY>:
     2c4:	57 65 64 00                                         Wed.

000002c8 <LNG_TUESDAY>:
     2c8:	54 75 65 00                                         Tue.

000002cc <LNG_MONDAY>:
     2cc:	4d 6f 6e 00                                         Mon.

000002d0 <LNG_MENU_ITEM_UP>:
     2d0:	2a 55 70 00                                         *Up.

000002d4 <LNG_MENU_ITEM_MAIN_SCREEN>:
     2d4:	4d 61 69 6e 20 73 63 72 65 65 6e 00                 Main screen.

000002e0 <LNG_MENU_ITEM_MONITORING_H>:
     2e0:	48 75 6d 69 64 69 74 79 20 47 72 61 70 68 00        Humidity Graph.

000002ef <LNG_MENU_ITEM_MONITORING_T>:
     2ef:	54 65 6d 70 65 72 61 74 75 72 65 20 47 72 61 70     Temperature Grap
     2ff:	68 00                                               h.

00000301 <LNG_MENU_ITEM_MONITORING_CO2>:
     301:	43 4f 32 20 47 72 61 70 68 00                       CO2 Graph.

0000030b <LNG_MENU_ITEM_MONITORING>:
     30b:	4d 6f 6e 69 74 6f 72 69 6e 67 00                    Monitoring.

00000316 <LNG_MENU_ITEM_SETTINGS_LCD_BACKLIGHT>:
     316:	4c 43 44 20 42 61 63 6b 6c 69 67 68 74 00           LCD Backlight.

00000324 <LNG_MENU_ITEM_SETTINGS_ALARM_BUZZER>:
     324:	42 75 7a 7a 65 72 20 73 65 74 75 70 00              Buzzer setup.

00000331 <LNG_MENU_ITEM_SETTINGS_ALARM_LEVELS>:
     331:	4c 65 76 65 6c 73 20 73 65 74 75 70 00              Levels setup.

0000033e <LNG_MENU_ITEM_SETTINGS_ALARM>:
     33e:	41 6c 61 72 6d 00                                   Alarm.

00000344 <LNG_MENU_ITEM_SETTINGS_CLOCK_TIME_CAL>:
     344:	43 61 6c 69 62 72 61 74 69 6f 6e 00                 Calibration.

00000350 <LNG_MENU_ITEM_SETTINGS_CLOCK_TIME_DATE>:
     350:	44 61 74 65 20 73 65 74 75 70 00                    Date setup.

0000035b <LNG_MENU_ITEM_SETTINGS_CLOCK_TIME_SETUP>:
     35b:	54 69 6d 65 20 73 65 74 75 70 00                    Time setup.

00000366 <LNG_MENU_ITEM_SETTINGS_CLOCK>:
     366:	43 6c 6f 63 6b 00                                   Clock.

0000036c <LNG_MENU_ITEM_SETTINGS>:
     36c:	53 65 74 74 69 6e 67 73 00                          Settings.

00000375 <LNG_OK>:
     375:	4f 4b 00                                            OK.

00000378 <LNG_FAIL>:
     378:	46 41 49 4c 00                                      FAIL.

0000037d <LNG_SMB_SPACE>:
     37d:	20 00                                                .

0000037f <LNG_SMB_MINUS>:
     37f:	2d 00                                               -.

00000381 <LNG_SMB_POINT>:
     381:	2e 00                                               ..

00000383 <LNG_SMB_COLON>:
     383:	3a 00                                               :.

00000385 <LNG_SMB_ANGLE_BRACKET_RIGHT>:
     385:	3e 00                                               >.

00000387 <LNG_DM_MAIN_S4>:
     387:	20 20 20 df 43 20 20 20 20 25 20 20 20 20 20 20        .C    %      
     397:	20 70 70 6d 00                                       ppm.

0000039c <LNG_DM1_S4>:
     39c:	20 2d 3e 20 43 4f 32 20 2e 2e 2e 00                  -> CO2 ....

000003a8 <LNG_DM1_S3>:
     3a8:	20 2d 3e 20 44 48 54 20 2e 2e 2e 0d 0a 00            -> DHT ......

000003b6 <LNG_DM1_S2>:
     3b6:	20 2d 3e 20 52 54 43 20 2e 2e 2e 0d 0a 00            -> RTC ......

000003c4 <LNG_DM1_S1>:
     3c4:	50 65 72 69 70 68 65 72 61 6c 20 70 72 65 73 65     Peripheral prese
     3d4:	6e 63 65 3a 0d 0a 00                                nce:...

000003db <LNG_SW_VERSION>:
     3db:	53 57 3a 20 31 2e 30 00                             SW: 1.0.

000003e3 <LNG_HW_VERSION>:
     3e3:	48 57 3a 20 31 2e 30 00                             HW: 1.0.

000003eb <LNG_SPLASH_LOGO_S4>:
     3eb:	53 45 4d 41 50 48 4f 52 45 00                       SEMAPHORE.

000003f5 <LNG_SPLASH_LOGO_S1_1>:
     3f5:	32 00                                               2.

000003f7 <LNG_SPLASH_LOGO_S1>:
     3f7:	43 30 00                                            C0.

000003fa <__ctors_end>:
     3fa:	11 24       	eor	r1, r1
     3fc:	1f be       	out	0x3f, r1	; 63
     3fe:	cf ef       	ldi	r28, 0xFF	; 255
     400:	d8 e0       	ldi	r29, 0x08	; 8
     402:	de bf       	out	0x3e, r29	; 62
     404:	cd bf       	out	0x3d, r28	; 61

00000406 <__do_copy_data>:
     406:	11 e0       	ldi	r17, 0x01	; 1
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b1 e0       	ldi	r27, 0x01	; 1
     40c:	e2 e7       	ldi	r30, 0x72	; 114
     40e:	f1 e2       	ldi	r31, 0x21	; 33
     410:	02 c0       	rjmp	.+4      	; 0x416 <__do_copy_data+0x10>
     412:	05 90       	lpm	r0, Z+
     414:	0d 92       	st	X+, r0
     416:	ae 39       	cpi	r26, 0x9E	; 158
     418:	b1 07       	cpc	r27, r17
     41a:	d9 f7       	brne	.-10     	; 0x412 <__do_copy_data+0xc>

0000041c <__do_clear_bss>:
     41c:	23 e0       	ldi	r18, 0x03	; 3
     41e:	ae e9       	ldi	r26, 0x9E	; 158
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	01 c0       	rjmp	.+2      	; 0x426 <.do_clear_bss_start>

00000424 <.do_clear_bss_loop>:
     424:	1d 92       	st	X+, r1

00000426 <.do_clear_bss_start>:
     426:	a2 3d       	cpi	r26, 0xD2	; 210
     428:	b2 07       	cpc	r27, r18
     42a:	e1 f7       	brne	.-8      	; 0x424 <.do_clear_bss_loop>
     42c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <main>
     430:	0c 94 b7 10 	jmp	0x216e	; 0x216e <_exit>

00000434 <__bad_interrupt>:
     434:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000438 <DoNothing>:
	}
}


void DoNothing(void)
{
     438:	08 95       	ret

0000043a <I2C_TWIService>:
/************************************************************************/
/* FUNCTIONS                                                            */
/************************************************************************/
inline void I2C_TWIService(void)
{
	switch(TWSR & 0xF8) {
     43a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     43e:	88 7f       	andi	r24, 0xF8	; 248
     440:	88 32       	cpi	r24, 0x28	; 40
     442:	09 f4       	brne	.+2      	; 0x446 <I2C_TWIService+0xc>
     444:	5e c0       	rjmp	.+188    	; 0x502 <I2C_TWIService+0xc8>
     446:	70 f4       	brcc	.+28     	; 0x464 <I2C_TWIService+0x2a>
     448:	80 31       	cpi	r24, 0x10	; 16
     44a:	91 f1       	breq	.+100    	; 0x4b0 <I2C_TWIService+0x76>
     44c:	28 f4       	brcc	.+10     	; 0x458 <I2C_TWIService+0x1e>
     44e:	88 23       	and	r24, r24
     450:	f1 f0       	breq	.+60     	; 0x48e <I2C_TWIService+0x54>
     452:	88 30       	cpi	r24, 0x08	; 8
     454:	31 f1       	breq	.+76     	; 0x4a2 <I2C_TWIService+0x68>
     456:	08 95       	ret
     458:	88 31       	cpi	r24, 0x18	; 24
     45a:	d1 f1       	breq	.+116    	; 0x4d0 <I2C_TWIService+0x96>
     45c:	80 32       	cpi	r24, 0x20	; 32
     45e:	09 f4       	brne	.+2      	; 0x462 <I2C_TWIService+0x28>
     460:	41 c0       	rjmp	.+130    	; 0x4e4 <I2C_TWIService+0xaa>
     462:	08 95       	ret
     464:	80 34       	cpi	r24, 0x40	; 64
     466:	09 f4       	brne	.+2      	; 0x46a <I2C_TWIService+0x30>
     468:	a9 c0       	rjmp	.+338    	; 0x5bc <I2C_TWIService+0x182>
     46a:	38 f4       	brcc	.+14     	; 0x47a <I2C_TWIService+0x40>
     46c:	80 33       	cpi	r24, 0x30	; 48
     46e:	09 f4       	brne	.+2      	; 0x472 <I2C_TWIService+0x38>
     470:	89 c0       	rjmp	.+274    	; 0x584 <I2C_TWIService+0x14a>
     472:	88 33       	cpi	r24, 0x38	; 56
     474:	09 f4       	brne	.+2      	; 0x478 <I2C_TWIService+0x3e>
     476:	92 c0       	rjmp	.+292    	; 0x59c <I2C_TWIService+0x162>
     478:	08 95       	ret
     47a:	80 35       	cpi	r24, 0x50	; 80
     47c:	09 f4       	brne	.+2      	; 0x480 <I2C_TWIService+0x46>
     47e:	a1 c0       	rjmp	.+322    	; 0x5c2 <I2C_TWIService+0x188>
     480:	88 35       	cpi	r24, 0x58	; 88
     482:	09 f4       	brne	.+2      	; 0x486 <I2C_TWIService+0x4c>
     484:	ba c0       	rjmp	.+372    	; 0x5fa <I2C_TWIService+0x1c0>
     486:	88 34       	cpi	r24, 0x48	; 72
     488:	09 f0       	breq	.+2      	; 0x48c <I2C_TWIService+0x52>
     48a:	d0 c0       	rjmp	.+416    	; 0x62c <I2C_TWIService+0x1f2>
     48c:	2b c0       	rjmp	.+86     	; 0x4e4 <I2C_TWIService+0xaa>

		// Bus error due to an illegal START or STOP condition
		case I2C_STATE_M_BUS_FAIL: {
			// Set I2C Error
			i2c.error = I2C_ERROR_BUS_FAIL;
     48e:	84 e0       	ldi	r24, 0x04	; 4
     490:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <i2c+0x5>
			// Set TWI register flags
			TWCR	=	0<<TWSTA |					// Not START
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						1<<TWINT |					// Flush TWI interrupt flag
						I2C_SLAVE_MODE<<TWEA |		// Enable ACK if SLAVE mode enabled
						1<<TWEN |					// Enable TWI operation
						1<<TWIE;					// Enable TWI interrupt
			// Flush I2C busy flag
			i2c._busy = 0;
     49a:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <i2c>
			// Set I2C error flag
			i2c._error = 1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	29 c0       	rjmp	.+82     	; 0x4f4 <I2C_TWIService+0xba>
		}

		// A START condition has been transmitted
		case I2C_STATE_M_START: {
			// Set R/W flag by mode
			if(i2c.transmit_type == I2C_TRANSMIT_TYPE_SARP) {
     4a2:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <i2c+0x4>
     4a6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <i2c+0x6>
     4aa:	91 11       	cpse	r25, r1
     4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <I2C_TWIService+0x86>
     4ae:	06 c0       	rjmp	.+12     	; 0x4bc <I2C_TWIService+0x82>
		}

		// A repeated START condition has been transmitted
		case I2C_STATE_M_RESTART: {
			// Set R/W flag by mode
			if(i2c.transmit_type == I2C_TRANSMIT_TYPE_SAWSARP) {
     4b0:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <i2c+0x4>
     4b4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <i2c+0x6>
     4b8:	92 30       	cpi	r25, 0x02	; 2
     4ba:	11 f4       	brne	.+4      	; 0x4c0 <I2C_TWIService+0x86>
				// Set to 1(W) lower bit in address - READ MODE
				i2c.master.slave_addr |= 0x01;
     4bc:	81 60       	ori	r24, 0x01	; 1
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <I2C_TWIService+0x88>
				} else {
				// Set to 0(R) lower bit in address - WRITE MODE
				i2c.master.slave_addr &= 0xFE;
     4c0:	8e 7f       	andi	r24, 0xFE	; 254
     4c2:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <i2c+0x6>
			}
			// Set SLAVE address
			TWDR = i2c.master.slave_addr;
     4c6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <i2c+0x6>
     4ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     4ce:	56 c0       	rjmp	.+172    	; 0x57c <I2C_TWIService+0x142>
		}

		// SLA+W has been transmitted; ACK has been received
		case I2C_STATE_M_SLA_W_ACK: {
			// Prepare and send data by mode
			if(i2c.page.q_length) { // <- Need to send start page address word
     4d0:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <i2c+0x2e>
     4d4:	91 11       	cpse	r25, r1
     4d6:	3e c0       	rjmp	.+124    	; 0x554 <I2C_TWIService+0x11a>
				TWDR = i2c.page.buff[i2c.page.p_buff];
				// Increment page address buffer and control overflow
				if(i2c.page.p_buff++ >= I2C_PAGE_WORD_LENGTH) i2c.page.p_buff=0;
				// Decrement page address queue
				i2c.page.q_length--;
				} else if(i2c.master.q_length) { // <- Directly send data
     4d8:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <i2c+0xa>
     4dc:	91 11       	cpse	r25, r1
     4de:	1e c0       	rjmp	.+60     	; 0x51c <I2C_TWIService+0xe2>
				// Decrement data byte counter queue
				i2c.master.q_length--;
				} else { // <- Another state is wrong - send STOP
				//> The byte is last
				// Set TWI register flags
				TWCR	=	0<<TWSTA |					// Not START
     4e0:	85 e9       	ldi	r24, 0x95	; 149
     4e2:	88 c0       	rjmp	.+272    	; 0x5f4 <I2C_TWIService+0x1ba>
		}

		// SLA+W has been transmitted; NOT ACK has been received
		case I2C_STATE_M_SLA_W_NACK: {
			// Set I2C Error
			i2c.error = I2C_ERROR_DEVICE_NOT_FOUND;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <i2c+0x5>
			// Set TWI register flags
			TWCR	=	0<<TWSTA |							// Not START
     4ea:	95 e9       	ldi	r25, 0x95	; 149
     4ec:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						1<<TWINT |							// Flush TWI interrupt flag
						I2C_SLAVE_MODE<<TWEA |				// Enable ACK if SLAVE mode enabled
						1<<TWEN |							// Enable TWI operation
						1<<TWIE;							// Enable TWI interrupt
			// Flush I2C busy flag
			i2c._busy = 0;
     4f0:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <i2c>
			// Set I2C error flag
			i2c._error = 1;
     4f4:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <i2c+0x2>
			// Run error handling process
			I2C_PROC_ERROR_OUT();
     4f8:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <i2c+0x2b>
     4fc:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <i2c+0x2c>
     500:	94 c0       	rjmp	.+296    	; 0x62a <I2C_TWIService+0x1f0>
		}

		// Data byte has been transmitted to slave; ACK has been received
		case I2C_STATE_M_BYTE_ACK: {
			// Prepare and send data by mode
			if(i2c.transmit_type == I2C_TRANSMIT_TYPE_SAWP) {
     502:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <i2c+0x4>
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	f1 f4       	brne	.+60     	; 0x546 <I2C_TWIService+0x10c>
				// If all data was transmitted
				if(i2c.page.q_length == 0 && i2c.master.q_length == 0) { // <- Send STOP condition
     50a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <i2c+0x2e>
     50e:	91 11       	cpse	r25, r1
     510:	21 c0       	rjmp	.+66     	; 0x554 <I2C_TWIService+0x11a>
     512:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <i2c+0xa>
     516:	99 23       	and	r25, r25
     518:	09 f4       	brne	.+2      	; 0x51c <I2C_TWIService+0xe2>
     51a:	7c c0       	rjmp	.+248    	; 0x614 <I2C_TWIService+0x1da>
					// Decrement page address queue
					i2c.page.q_length--;
				} else if(i2c.master.q_length) { // <- Send next data byte
					//> The byte is not last
					// Load data from buffer to I2C output register
					TWDR = i2c.master.tx_buff[i2c.master.p_buff];
     51c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <i2c+0x7>
     520:	e8 2f       	mov	r30, r24
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	e8 51       	subi	r30, 0x18	; 24
     526:	fe 4f       	sbci	r31, 0xFE	; 254
     528:	23 85       	ldd	r18, Z+11	; 0x0b
     52a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
					// Increment buffer send index and control overflow
					if(i2c.master.p_buff++ >= I2C_M_LENGTH_TX_BUFFER) i2c.master.p_buff = 0;
     52e:	84 31       	cpi	r24, 0x14	; 20
     530:	20 f4       	brcc	.+8      	; 0x53a <I2C_TWIService+0x100>
     532:	8f 5f       	subi	r24, 0xFF	; 255
     534:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <i2c+0x7>
     538:	02 c0       	rjmp	.+4      	; 0x53e <I2C_TWIService+0x104>
     53a:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <i2c+0x7>
					// Decrement data byte counter queue
					i2c.master.q_length--;
     53e:	91 50       	subi	r25, 0x01	; 1
     540:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <i2c+0xa>
     544:	1b c0       	rjmp	.+54     	; 0x57c <I2C_TWIService+0x142>
							I2C_SLAVE_MODE<<TWEA |		// Enable ACK if SLAVE mode enabled
							1<<TWEN |					// Enable TWI operation
							1<<TWIE;					// Enable TWI interrupt
			}
			// Prepare and send data by mode
			if(i2c.transmit_type == I2C_TRANSMIT_TYPE_SAWSARP) {
     546:	82 30       	cpi	r24, 0x02	; 2
     548:	09 f0       	breq	.+2      	; 0x54c <I2C_TWIService+0x112>
     54a:	70 c0       	rjmp	.+224    	; 0x62c <I2C_TWIService+0x1f2>
				// Send page address by page address byte count
				if(i2c.page.q_length) {
     54c:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <i2c+0x2e>
     550:	99 23       	and	r25, r25
     552:	b1 f0       	breq	.+44     	; 0x580 <I2C_TWIService+0x146>
					//> The page address byte was not last
					// Load page address from page address buffer to I2C output register
					TWDR = i2c.page.buff[i2c.page.p_buff];
     554:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <i2c+0x2d>
     558:	e8 2f       	mov	r30, r24
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	e8 51       	subi	r30, 0x18	; 24
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	27 a5       	ldd	r18, Z+47	; 0x2f
     562:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
					// Increment page address buffer
					if(i2c.page.p_buff++ >= I2C_PAGE_WORD_LENGTH) i2c.page.p_buff=0;
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	20 f4       	brcc	.+8      	; 0x572 <I2C_TWIService+0x138>
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <i2c+0x2d>
     570:	02 c0       	rjmp	.+4      	; 0x576 <I2C_TWIService+0x13c>
     572:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <i2c+0x2d>
					// Decrement page address queue
					i2c.page.q_length--;
     576:	91 50       	subi	r25, 0x01	; 1
     578:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <i2c+0x2e>
					// Set TWI register flags
					TWCR	=	0<<TWSTA |					// Not START
     57c:	85 e8       	ldi	r24, 0x85	; 133
     57e:	3a c0       	rjmp	.+116    	; 0x5f4 <I2C_TWIService+0x1ba>
								1<<TWEN |					// Enable TWI operation
								1<<TWIE;					// Enable TWI interrupt
				} else {
					//> Last byte of page address was send
					// Set TWI register flags
					TWCR	=	1<<TWSTA |					// Set RESTART condition
     580:	85 ea       	ldi	r24, 0xA5	; 165
     582:	38 c0       	rjmp	.+112    	; 0x5f4 <I2C_TWIService+0x1ba>
		}

		// Data byte has been transmitted; NOT ACK has been received
		case I2C_STATE_M_BYTE_NACK: {
			// Set I2C Error
			i2c.error = I2C_ERROR_RECEIVED_NACK;
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <i2c+0x5>
			// Set TWI register flags
			TWCR	=	0<<TWSTA |							// Not START
     58a:	85 e9       	ldi	r24, 0x95	; 149
     58c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						1<<TWINT |							// Flush TWI interrupt flag
						I2C_SLAVE_MODE<<TWEA |				// Enable ACK if SLAVE mode enabled
						1<<TWEN |							// Enable TWI operation
						1<<TWIE;							// Enable TWI interrupt
			// Flush I2C busy flag
			i2c._busy = 0;
     590:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <i2c>
			// Set I2C error flag
			i2c._error = 1;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <i2c+0x2>
     59a:	43 c0       	rjmp	.+134    	; 0x622 <I2C_TWIService+0x1e8>
		}

		// Arbitration lost in SLA+W or data bytes
		case I2C_STATE_M_COLLISION: {
			// Set I2C Error
			i2c.error = I2C_ERROR_LOW_PRIORITY;
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <i2c+0x5>
			// Flush buffer pointers
			i2c.master.p_buff = 0;
     5a2:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <i2c+0x7>
			i2c.page.p_buff = 0;
     5a6:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <i2c+0x2d>
			// Set TWI register flags
			TWCR	=	1<<TWSTA |							// Set START condition
     5aa:	85 ea       	ldi	r24, 0xA5	; 165
     5ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						1<<TWINT |							// Flush TWI interrupt flag
						I2C_SLAVE_MODE<<TWEA |				// Enable ACK if SLAVE mode enabled
						1<<TWEN |							// Enable TWI operation
						1<<TWIE;							// Enable TWI interrupt
			// Flush I2C busy flag
			i2c._busy = 0;
     5b0:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <i2c>
			// Set I2C error flag
			i2c._error = 1;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <i2c+0x2>
			break;
     5ba:	08 95       	ret
		}

		// SLA+R has been transmitted; ACK has been received
		case I2C_STATE_M_SLA_R_ACK: {
			// If next byte will be last for receive
			if(i2c.master.q_length == 1) {
     5bc:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <i2c+0xa>
     5c0:	16 c0       	rjmp	.+44     	; 0x5ee <I2C_TWIService+0x1b4>
		}

		// Data byte has been received by master; ACK has been returned
		case I2C_STATE_M_RECEIVE_BYTE: {
			// Store received byte into buffer
			i2c.master.rx_buff[i2c.master.p_buff] = TWDR;
     5c2:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <i2c+0x7>
     5c6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5ca:	e8 2f       	mov	r30, r24
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	e8 51       	subi	r30, 0x18	; 24
     5d0:	fe 4f       	sbci	r31, 0xFE	; 254
     5d2:	97 8f       	std	Z+31, r25	; 0x1f
			// Increment buffer index
			if(i2c.master.p_buff++ >= I2C_M_LENGTH_RX_BUFFER) i2c.master.p_buff = 0;
     5d4:	8a 30       	cpi	r24, 0x0A	; 10
     5d6:	20 f4       	brcc	.+8      	; 0x5e0 <I2C_TWIService+0x1a6>
     5d8:	8f 5f       	subi	r24, 0xFF	; 255
     5da:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <i2c+0x7>
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <I2C_TWIService+0x1aa>
     5e0:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <i2c+0x7>
			// Decrement receive queue counter
			i2c.master.q_length--;
     5e4:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <i2c+0xa>
     5e8:	81 50       	subi	r24, 0x01	; 1
     5ea:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <i2c+0xa>
			// Receive next byte with ACK/NACK state
			if(i2c.master.q_length == 1) {
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	29 f2       	breq	.-118    	; 0x57c <I2C_TWIService+0x142>
							1<<TWEN |						// Enable TWI operation
							1<<TWIE;						// Enable TWI interrupt
			} else {
				//> Next byte will not be last for receive
				// Set TWI register flags
				TWCR	=	0<<TWSTA |						// Not START
     5f2:	85 ec       	ldi	r24, 0xC5	; 197
     5f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5f8:	08 95       	ret
		}

		// Data byte has been received; NOT ACK has been returned
		case I2C_STATE_M_RECEIVE_BYTE_NACK: {
			// Store received byte into buffer
			i2c.master.rx_buff[i2c.master.p_buff] = TWDR;
     5fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5fe:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <i2c+0x7>
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	e8 51       	subi	r30, 0x18	; 24
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	87 8f       	std	Z+31, r24	; 0x1f
			// Decrement receive queue counter
			i2c.master.q_length--;
     60a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <i2c+0xa>
     60e:	81 50       	subi	r24, 0x01	; 1
     610:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <i2c+0xa>
			// Set TWI register flags
			TWCR	=	0<<TWSTA |							// Not START
     614:	85 e9       	ldi	r24, 0x95	; 149
     616:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						1<<TWINT |							// Flush TWI interrupt flag
						I2C_SLAVE_MODE<<TWEA |				// Enable ACK if SLAVE mode enabled
						1<<TWEN |							// Enable TWI operation
						1<<TWIE;							// Enable TWI interrupt
			// Flush I2C busy flag
			i2c._busy = 0;
     61a:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <i2c>
			// Flush I2C error flag
			i2c._error = 0;
     61e:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <i2c+0x2>
			// Run normal handling process
			I2C_PROC_MASTER_OUT();
     622:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <i2c+0x29>
     626:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <i2c+0x2a>
     62a:	09 94       	ijmp
     62c:	08 95       	ret

0000062e <I2C_Init>:
}

void I2C_Init(void)
{
	// Enabling pull up resistors on port pins
	I2C_PORT |= 1<<I2C_PIN_SCL|1<<I2C_PIN_SDA;
     62e:	88 b1       	in	r24, 0x08	; 8
     630:	80 63       	ori	r24, 0x30	; 48
     632:	88 b9       	out	0x08, r24	; 8
	I2C_DDR &= ~(1<<I2C_PIN_SCL|1<<I2C_PIN_SDA);
     634:	87 b1       	in	r24, 0x07	; 7
     636:	8f 7c       	andi	r24, 0xCF	; 207
     638:	87 b9       	out	0x07, r24	; 7
	// Setup I2C bit rate
	TWBR = I2C_TWBR_VALUE;
     63a:	85 e0       	ldi	r24, 0x05	; 5
     63c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR = I2C_TWSR_VALUE;
     640:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     644:	08 95       	ret

00000646 <I2C_RequestFrom>:
}

uint8_t I2C_RequestFrom(uint8_t addr, uint8_t length, uint8_t word_length, uint16_t word_addr)
{
	// Check last request buffer processed
	if(i2c._rx_lock) return 0;
     646:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <i2c+0x1>
     64a:	91 11       	cpse	r25, r1
     64c:	31 c0       	rjmp	.+98     	; 0x6b0 <I2C_RequestFrom+0x6a>
	// Lock I2C to work with our byte
	i2c._busy = 1;
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <i2c>
	// Lock RX buffer
	i2c._rx_lock = 1;
     654:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <i2c+0x1>
	// Preparing page address word by his length
	if(word_length > 0) {
     658:	44 23       	and	r20, r20
     65a:	89 f0       	breq	.+34     	; 0x67e <I2C_RequestFrom+0x38>
		i2c.transmit_type = I2C_TRANSMIT_TYPE_SAWSARP;
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <i2c+0x4>
		if(word_length == 2) {
     662:	42 30       	cpi	r20, 0x02	; 2
     664:	29 f4       	brne	.+10     	; 0x670 <I2C_RequestFrom+0x2a>
			i2c.page.buff[0] = HI(word_addr);
     666:	30 93 17 02 	sts	0x0217, r19	; 0x800217 <i2c+0x2f>
			i2c.page.buff[1] = LO(word_addr);
     66a:	20 93 18 02 	sts	0x0218, r18	; 0x800218 <i2c+0x30>
     66e:	02 c0       	rjmp	.+4      	; 0x674 <I2C_RequestFrom+0x2e>
			} else {
			i2c.page.buff[0] = LO(word_addr);
     670:	20 93 17 02 	sts	0x0217, r18	; 0x800217 <i2c+0x2f>
		}
		// Flush page word buffer pointer
		i2c.page.p_buff = 0;
     674:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <i2c+0x2d>
		// Set page address word length
		i2c.page.q_length = word_length;
     678:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <i2c+0x2e>
     67c:	02 c0       	rjmp	.+4      	; 0x682 <I2C_RequestFrom+0x3c>
	} else {
		i2c.transmit_type = I2C_TRANSMIT_TYPE_SARP;
     67e:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <i2c+0x4>
	}
	// Setup M41T00S slave I2C address
	i2c.master.slave_addr = addr;
     682:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <i2c+0x6>
	// Set asynchronous function state
	i2c.master.onSuccess = &DoNothing;
     686:	8c e1       	ldi	r24, 0x1C	; 28
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <i2c+0x2a>
     68e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <i2c+0x29>
	i2c.master.onError = &DoNothing;
     692:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <i2c+0x2c>
     696:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <i2c+0x2b>
	// Flush buffer pointer - nothing to transmit
	i2c.master.p_buff = 0;
     69a:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <i2c+0x7>
	// Flush read buffer pointer
	i2c.master.p_read = 0;
     69e:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <i2c+0x9>
	// Set RX queue length
	i2c.master.q_length = length;
     6a2:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <i2c+0xa>
	// Start transmitter with START
	TWCR = 	1<<TWSTA|						// Set START condition
     6a6:	85 ea       	ldi	r24, 0xA5	; 165
     6a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			1<<TWINT|						// Flush TWI interrupt flag
			I2C_SLAVE_MODE<<TWEA|			// Not ACK
			1<<TWEN|						// Enable TWI operation
			1<<TWIE;						// Enable TWI interrupt
	// Return 1 if buffer is clear
	return 1;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	08 95       	ret
}

uint8_t I2C_RequestFrom(uint8_t addr, uint8_t length, uint8_t word_length, uint16_t word_addr)
{
	// Check last request buffer processed
	if(i2c._rx_lock) return 0;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
			I2C_SLAVE_MODE<<TWEA|			// Not ACK
			1<<TWEN|						// Enable TWI operation
			1<<TWIE;						// Enable TWI interrupt
	// Return 1 if buffer is clear
	return 1;
}
     6b2:	08 95       	ret

000006b4 <I2C_TransmitTo>:

void I2C_TransmitTo(uint8_t *data, uint8_t addr, uint8_t length, uint8_t word_length, uint16_t word_addr)
{
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	dc 01       	movw	r26, r24
	// Store data for write to I2C write buffer
	uint8_t *p_data = (void *)data;
	// Flush write buffer pointer
	i2c.master.p_write=0;
     6ba:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <i2c+0x8>
	// Flush queue length
	i2c.master.q_length=0;
     6be:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <i2c+0xa>
	// Prepare data for transmit
	for(uint8_t i=length; i; i--) {
     6c2:	94 2f       	mov	r25, r20
     6c4:	99 23       	and	r25, r25
     6c6:	81 f0       	breq	.+32     	; 0x6e8 <I2C_TransmitTo+0x34>
		// Overflow control
		if(i2c.master.p_write >= I2C_M_LENGTH_TX_BUFFER) continue;
     6c8:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <i2c+0x8>
     6cc:	e4 31       	cpi	r30, 0x14	; 20
     6ce:	50 f4       	brcc	.+20     	; 0x6e4 <I2C_TransmitTo+0x30>
		// Store data into TX buffer
		i2c.master.tx_buff[i2c.master.p_write++] = *(p_data++);
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	8e 0f       	add	r24, r30
     6d4:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <i2c+0x8>
     6d8:	8c 91       	ld	r24, X
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	e8 51       	subi	r30, 0x18	; 24
     6de:	fe 4f       	sbci	r31, 0xFE	; 254
     6e0:	83 87       	std	Z+11, r24	; 0x0b
     6e2:	11 96       	adiw	r26, 0x01	; 1
	// Flush write buffer pointer
	i2c.master.p_write=0;
	// Flush queue length
	i2c.master.q_length=0;
	// Prepare data for transmit
	for(uint8_t i=length; i; i--) {
     6e4:	91 50       	subi	r25, 0x01	; 1
     6e6:	ee cf       	rjmp	.-36     	; 0x6c4 <I2C_TransmitTo+0x10>
		if(i2c.master.p_write >= I2C_M_LENGTH_TX_BUFFER) continue;
		// Store data into TX buffer
		i2c.master.tx_buff[i2c.master.p_write++] = *(p_data++);
	}
	// Lock I2C to work with our byte
	i2c._busy = 1;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <i2c>
	// Set I2C mode to SLA+R mode
	i2c.transmit_type = I2C_TRANSMIT_TYPE_SAWP;
     6ee:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <i2c+0x4>
	// Setup M41T00S slave I2C address
	i2c.master.slave_addr = addr;
     6f2:	60 93 ee 01 	sts	0x01EE, r22	; 0x8001ee <i2c+0x6>
	// Preparing page address word by his length
	if(word_length == 2) {
     6f6:	22 30       	cpi	r18, 0x02	; 2
     6f8:	29 f4       	brne	.+10     	; 0x704 <I2C_TransmitTo+0x50>
		i2c.page.buff[0] = HI(word_addr);
     6fa:	10 93 17 02 	sts	0x0217, r17	; 0x800217 <i2c+0x2f>
		i2c.page.buff[1] = LO(word_addr);
     6fe:	00 93 18 02 	sts	0x0218, r16	; 0x800218 <i2c+0x30>
     702:	02 c0       	rjmp	.+4      	; 0x708 <I2C_TransmitTo+0x54>
	} else {
		i2c.page.buff[0] = LO(word_addr);
     704:	00 93 17 02 	sts	0x0217, r16	; 0x800217 <i2c+0x2f>
	}
	// Flush page word buffer pointer
	i2c.page.p_buff = 0;
     708:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <i2c+0x2d>
	// Set page address word length
	i2c.page.q_length = word_length;
     70c:	20 93 16 02 	sts	0x0216, r18	; 0x800216 <i2c+0x2e>
	// Set asynchronous function state
	i2c.master.onSuccess = &DoNothing;
     710:	8c e1       	ldi	r24, 0x1C	; 28
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <i2c+0x2a>
     718:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <i2c+0x29>
	i2c.master.onError = &DoNothing;
     71c:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <i2c+0x2c>
     720:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <i2c+0x2b>
	// Flush buffer pointer - nothing to transmit
	i2c.master.p_buff = 0;
     724:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <i2c+0x7>
	// Set RX queue length
	i2c.master.q_length = length;
     728:	40 93 f2 01 	sts	0x01F2, r20	; 0x8001f2 <i2c+0xa>
	// Start transmitter with START
	TWCR = 	1<<TWSTA|						// Set START condition
     72c:	85 ea       	ldi	r24, 0xA5	; 165
     72e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			0<<TWSTO|						// Not STOP
			1<<TWINT|						// Flush TWI interrupt flag
			I2C_SLAVE_MODE<<TWEA|			// Not ACK
			1<<TWEN|						// Enable TWI operation
			1<<TWIE;						// Enable TWI interrupt
}
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <I2C_Read>:

uint8_t I2C_Read(void)
{
	// Flush RX lock flag
	i2c._rx_lock = 0;
     738:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <i2c+0x1>
	// Overflow control
	if(i2c.master.p_read >= I2C_M_LENGTH_RX_BUFFER) return 0;
     73c:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <i2c+0x9>
     740:	ea 30       	cpi	r30, 0x0A	; 10
     742:	48 f4       	brcc	.+18     	; 0x756 <I2C_Read+0x1e>
	// Return byte of RX buffer
	return i2c.master.rx_buff[i2c.master.p_read++];
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	8e 0f       	add	r24, r30
     748:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <i2c+0x9>
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	e8 51       	subi	r30, 0x18	; 24
     750:	fe 4f       	sbci	r31, 0xFE	; 254
     752:	87 8d       	ldd	r24, Z+31	; 0x1f
     754:	08 95       	ret
uint8_t I2C_Read(void)
{
	// Flush RX lock flag
	i2c._rx_lock = 0;
	// Overflow control
	if(i2c.master.p_read >= I2C_M_LENGTH_RX_BUFFER) return 0;
     756:	80 e0       	ldi	r24, 0x00	; 0
	// Return byte of RX buffer
	return i2c.master.rx_buff[i2c.master.p_read++];
}
     758:	08 95       	ret

0000075a <UART_SendDataFromFlash>:
	#else
	uint8_t		q_length=0;
	#endif

	// Disable UART UDRE Interrupt
	UART_TX_INTERRUPT_DISABLE();
     75a:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     75e:	2f 7d       	andi	r18, 0xDF	; 223
     760:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	q_length = uart.tx.q_length;
     764:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <uart+0x4>
	// Enable UART_UDRE Interrupt
	UART_TX_INTERRUPT_ENABLE();
     768:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     76c:	20 62       	ori	r18, 0x20	; 32
     76e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	if(data_length <= (UART_TX_BUFSIZE - q_length)) {
     772:	46 2f       	mov	r20, r22
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	24 e1       	ldi	r18, 0x14	; 20
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	27 1b       	sub	r18, r23
     77c:	31 09       	sbc	r19, r1
     77e:	24 17       	cp	r18, r20
     780:	35 07       	cpc	r19, r21
     782:	24 f1       	brlt	.+72     	; 0x7cc <UART_SendDataFromFlash+0x72>
     784:	fc 01       	movw	r30, r24
		while(data_length--) {
     786:	61 50       	subi	r22, 0x01	; 1
     788:	08 f1       	brcs	.+66     	; 0x7cc <UART_SendDataFromFlash+0x72>
			// Load char from FLASH string into TX buffer with offset
			uart.tx.buff[uart.tx.p_write++] = pgm_read_byte(data++);
     78a:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <uart+0x3>
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	9a 0f       	add	r25, r26
     792:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <uart+0x3>
     796:	84 91       	lpm	r24, Z
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	a7 5e       	subi	r26, 0xE7	; 231
     79c:	bd 4f       	sbci	r27, 0xFD	; 253
     79e:	15 96       	adiw	r26, 0x05	; 5
     7a0:	8c 93       	st	X, r24
			// Detect loop back in TX buffer offset
			if(uart.tx.p_write >= UART_TX_BUFSIZE) uart.tx.p_write=0;
     7a2:	94 31       	cpi	r25, 0x14	; 20
     7a4:	10 f0       	brcs	.+4      	; 0x7aa <UART_SendDataFromFlash+0x50>
     7a6:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <uart+0x3>
			UART_TX_INTERRUPT_DISABLE();
     7aa:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     7ae:	8f 7d       	andi	r24, 0xDF	; 223
     7b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
			// Increment TX queue counter length
			uart.tx.q_length++;
     7b4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <uart+0x4>
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <uart+0x4>
			UART_TX_INTERRUPT_ENABLE();
     7be:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     7c2:	80 62       	ori	r24, 0x20	; 32
     7c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     7c8:	31 96       	adiw	r30, 0x01	; 1
     7ca:	dd cf       	rjmp	.-70     	; 0x786 <UART_SendDataFromFlash+0x2c>
     7cc:	08 95       	ret

000007ce <UART_UDRE_TX_Service>:
}

/* ISR Service for UDRE interrupt */
void UART_UDRE_TX_Service(void)
{
	if(uart.tx.q_length) {
     7ce:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <uart+0x4>
     7d2:	88 23       	and	r24, r24
     7d4:	a1 f0       	breq	.+40     	; 0x7fe <UART_UDRE_TX_Service+0x30>
		// Copy char from TX buffer to UDR register
		UDR0 = uart.tx.buff[uart.tx.p_send++];
     7d6:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <uart+0x2>
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	9e 0f       	add	r25, r30
     7de:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <uart+0x2>
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	e7 5e       	subi	r30, 0xE7	; 231
     7e6:	fd 4f       	sbci	r31, 0xFD	; 253
     7e8:	25 81       	ldd	r18, Z+5	; 0x05
     7ea:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		// Detect loop back in TX sent offset
		if(uart.tx.p_send >= UART_TX_BUFSIZE) uart.tx.p_send=0;
     7ee:	94 31       	cpi	r25, 0x14	; 20
     7f0:	10 f0       	brcs	.+4      	; 0x7f6 <UART_UDRE_TX_Service+0x28>
     7f2:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <uart+0x2>
		// Decrement TX queue
		uart.tx.q_length--;
     7f6:	81 50       	subi	r24, 0x01	; 1
     7f8:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <uart+0x4>
     7fc:	08 95       	ret
	} else {
		UART_TX_INTERRUPT_DISABLE();
     7fe:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     802:	8f 7d       	andi	r24, 0xDF	; 223
     804:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     808:	08 95       	ret

0000080a <UART_RX_Service>:

/* ISR Service for RX interrupt */
void UART_RX_Service(void)
{
	// Read UART data
	int8_t	data = UDR0;
     80a:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	if(!uart.rx.data_length) {
     80e:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <uart+0x1f>
     812:	91 11       	cpse	r25, r1
     814:	02 c0       	rjmp	.+4      	; 0x81a <UART_RX_Service+0x10>
		switch(data) {
     816:	3d 30       	cpi	r19, 0x0D	; 13
     818:	01 f1       	breq	.+64     	; 0x85a <UART_RX_Service+0x50>

			default: break;
		}
	}
	// If buffer not full - processing
	if(uart.rx.q_length <= UART_RX_BUFSIZE) {
     81a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <uart+0x1e>
     81e:	8b 30       	cpi	r24, 0x0B	; 11
     820:	08 f5       	brcc	.+66     	; 0x864 <UART_RX_Service+0x5a>
		// Echo data into UART
		#if (UART_RX_ECHO)
		UDR0 = data;
		#endif
		// Add data to RX buffer
		uart.rx.buff[uart.rx.p_read++] = data;
     822:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <uart+0x1d>
     826:	21 e0       	ldi	r18, 0x01	; 1
     828:	2e 0f       	add	r18, r30
     82a:	20 93 36 02 	sts	0x0236, r18	; 0x800236 <uart+0x1d>
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	e7 5e       	subi	r30, 0xE7	; 231
     832:	fd 4f       	sbci	r31, 0xFD	; 253
     834:	30 a3       	std	Z+32, r19	; 0x20
		// If getting tail buffer, then point to start buffer
		if(uart.rx.p_read == UART_RX_BUFSIZE) uart.rx.p_read = 0;
     836:	2a 30       	cpi	r18, 0x0A	; 10
     838:	11 f4       	brne	.+4      	; 0x83e <UART_RX_Service+0x34>
     83a:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <uart+0x1d>
		// Increment data counter
		uart.rx.q_length++;
     83e:	8f 5f       	subi	r24, 0xFF	; 255
     840:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <uart+0x1e>
		// If we received all data bytes - call event function
		if(uart.rx.data_length && uart.rx.q_length == uart.rx.data_length) {
     844:	99 23       	and	r25, r25
     846:	e9 f0       	breq	.+58     	; 0x882 <UART_RX_Service+0x78>
     848:	98 13       	cpse	r25, r24
     84a:	1b c0       	rjmp	.+54     	; 0x882 <UART_RX_Service+0x78>
			// Disable RX interrupt
			UART_RX_INTERRUPT_DISABLE();
     84c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     850:	8f 76       	andi	r24, 0x6F	; 111
     852:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
			// Reset buffer pointer
			uart.rx.p_read=0;
     856:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <uart+0x1d>
			// Call event procedure
			(uart.rx.eventRxComplete)();
     85a:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <uart+0x2a>
     85e:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <uart+0x2b>
     862:	0e c0       	rjmp	.+28     	; 0x880 <UART_RX_Service+0x76>
		}
	} else {
		// Set error flag
		uart._error = 1;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <uart>
		// Set error identificator
		uart.error = UART_ERROR_RX_BUFF_OVERFLOW;
     86a:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <uart+0x1>
		// Disable RX interrupt
		UART_RX_INTERRUPT_DISABLE();
     86e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     872:	8f 76       	andi	r24, 0x6F	; 111
     874:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		// Call error handler
		(uart.rx.eventError)();
     878:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <uart+0x2c>
     87c:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <uart+0x2d>
     880:	09 94       	ijmp
     882:	08 95       	ret

00000884 <UART_Read>:
}

uint8_t UART_Read()
{
	// Check buffer overflow
	if(uart.rx.p_read > UART_RX_BUFSIZE) uart.rx.p_read=0;
     884:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <uart+0x1d>
     888:	8b 30       	cpi	r24, 0x0B	; 11
     88a:	10 f0       	brcs	.+4      	; 0x890 <UART_Read+0xc>
     88c:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <uart+0x1d>
	// Read buffer value
	return uart.rx.buff[uart.rx.p_read++];
     890:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <uart+0x1d>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	8e 0f       	add	r24, r30
     898:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <uart+0x1d>
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	e7 5e       	subi	r30, 0xE7	; 231
     8a0:	fd 4f       	sbci	r31, 0xFD	; 253
}
     8a2:	80 a1       	ldd	r24, Z+32	; 0x20
     8a4:	08 95       	ret

000008a6 <UART_DefferedReadData>:
#else
void UART_DefferedReadData(uint8_t length, UART_F complete_handler, UART_F error_handler)
#endif
{
	// Reset buffer pointer
	uart.rx.p_read=0;
     8a6:	e9 e1       	ldi	r30, 0x19	; 25
     8a8:	f2 e0       	ldi	r31, 0x02	; 2
     8aa:	15 8e       	std	Z+29, r1	; 0x1d
	// Reset queue length data
	uart.rx.q_length=0;
     8ac:	16 8e       	std	Z+30, r1	; 0x1e
	// Set data length
	uart.rx.data_length = length;
     8ae:	87 8f       	std	Z+31, r24	; 0x1f
	// Set event procedure
	uart.rx.eventRxComplete = complete_handler;
     8b0:	73 a7       	std	Z+43, r23	; 0x2b
     8b2:	62 a7       	std	Z+42, r22	; 0x2a
	// Set event ERROR
	uart.rx.eventError = error_handler;
     8b4:	55 a7       	std	Z+45, r21	; 0x2d
     8b6:	44 a7       	std	Z+44, r20	; 0x2c
	// Enable RX interrupt
	UART_RX_INTERRUPT_ENABLE();
     8b8:	e1 ec       	ldi	r30, 0xC1	; 193
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	80 69       	ori	r24, 0x90	; 144
     8c0:	80 83       	st	Z, r24
     8c2:	08 95       	ret

000008c4 <FSM_BUTTON_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_BUTTON_Init(void)
{
	// Set default state for FSM
	FSM_state = BUTTON_STATE_UP;
     8c4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <FSM_state>
	// Flush current and last events
	button.event = button.last_event = BUTTON_EVENT_NOT_PRESSED;
     8c8:	ee e9       	ldi	r30, 0x9E	; 158
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	11 82       	std	Z+1, r1	; 0x01
     8ce:	10 82       	st	Z, r1
     8d0:	08 95       	ret

000008d2 <FSM_BUTTON_Process>:
}

void FSM_BUTTON_Process(void)
{
     8d2:	cf 93       	push	r28
	switch (FSM_state) {
     8d4:	c0 91 a1 01 	lds	r28, 0x01A1	; 0x8001a1 <FSM_state>
     8d8:	c1 30       	cpi	r28, 0x01	; 1
     8da:	d1 f0       	breq	.+52     	; 0x910 <__stack+0x11>
     8dc:	18 f0       	brcs	.+6      	; 0x8e4 <FSM_BUTTON_Process+0x12>
     8de:	c2 30       	cpi	r28, 0x02	; 2
     8e0:	91 f1       	breq	.+100    	; 0x946 <__stack+0x47>
     8e2:	37 c0       	rjmp	.+110    	; 0x952 <__stack+0x53>

		case BUTTON_STATE_UP: {
			// If button pressed
			if(BTN_PRESSED) {
     8e4:	32 99       	sbic	0x06, 2	; 6
     8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <FSM_BUTTON_Process+0x22>
				// Set current state
				button.event = BUTTON_EVENT_NOT_PRESSED;
     8e8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
				// Flush long press counter
				button.lp_counter=0;
     8ec:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end+0x2>
				// Set next FSM state
				FSM_state = BUTTON_STATE_DN;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	20 c0       	rjmp	.+64     	; 0x934 <__stack+0x35>
				// Reset timer for next button scan
				ResetTimer(TIMER_BUTTON);
				} else if(button.event != BUTTON_EVENT_NOT_PRESSED) {
     8f4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
     8f8:	88 23       	and	r24, r24
     8fa:	59 f1       	breq	.+86     	; 0x952 <__stack+0x53>
				// Store last button event
				button.last_event = button.event;
     8fc:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <__data_end+0x1>
				// If we have event from button - send message
				SendMessageWParam(MSG_BTN_KEY_PRESSED, &button.last_event);
     900:	6f e9       	ldi	r22, 0x9F	; 159
     902:	71 e0       	ldi	r23, 0x01	; 1
     904:	87 e0       	ldi	r24, 0x07	; 7
     906:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <SendMessageWParam>
				// Flush current event
				button.event = BUTTON_EVENT_NOT_PRESSED;
     90a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
     90e:	21 c0       	rjmp	.+66     	; 0x952 <__stack+0x53>
			return;
		}

		case BUTTON_STATE_DN: {
			// Debounce delay check
			if(GetTimer(TIMER_BUTTON) >= BUTTON_DEBOUNCE_DELAY) {
     910:	87 e0       	ldi	r24, 0x07	; 7
     912:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
     916:	0a 97       	sbiw	r24, 0x0a	; 10
     918:	e0 f0       	brcs	.+56     	; 0x952 <__stack+0x53>
				// If key also pressed - processing long press
				if(BTN_PRESSED) {
     91a:	32 99       	sbic	0x06, 2	; 6
     91c:	0e c0       	rjmp	.+28     	; 0x93a <__stack+0x3b>
					// Set button event to SHORT PRESS
					button.event = BUTTON_EVENT_SHORT_PRESS;
     91e:	c0 93 9e 01 	sts	0x019E, r28	; 0x80019e <__data_end>
					// Long press counter check
					if(button.lp_counter++ >= BUTTON_LONG_PRESS_COUNT) {
     922:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end+0x2>
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	98 0f       	add	r25, r24
     92a:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <__data_end+0x2>
     92e:	8c 33       	cpi	r24, 0x3C	; 60
     930:	30 f0       	brcs	.+12     	; 0x93e <__stack+0x3f>
						// Set next FSM state
						FSM_state = BUTTON_STATE_AL;
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <FSM_state>
     938:	02 c0       	rjmp	.+4      	; 0x93e <__stack+0x3f>
					}
					} else {
					// Set next FSM state
					FSM_state = BUTTON_STATE_UP;
     93a:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <FSM_state>
				}
				// Flush timer for next debounce cycle
				ResetTimer(TIMER_BUTTON);
     93e:	87 e0       	ldi	r24, 0x07	; 7
			return;
		}

		default: break;
	}
}
     940:	cf 91       	pop	r28
					} else {
					// Set next FSM state
					FSM_state = BUTTON_STATE_UP;
				}
				// Flush timer for next debounce cycle
				ResetTimer(TIMER_BUTTON);
     942:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <ResetTimer>
			}
			return;
		}

		case BUTTON_STATE_AL: {
			if(!BTN_PRESSED) {
     946:	32 9b       	sbis	0x06, 2	; 6
     948:	04 c0       	rjmp	.+8      	; 0x952 <__stack+0x53>
				// Set current button event
				button.event = BUTTON_EVENT_LONG_PRESS;
     94a:	c0 93 9e 01 	sts	0x019E, r28	; 0x80019e <__data_end>
				// Set next FSM state
				FSM_state = BUTTON_STATE_UP;
     94e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <FSM_state>
			return;
		}

		default: break;
	}
}
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <FSM_BUZZER_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/

void FSM_BUZZER_Init(void)
{
	FSM_state = FSM_BUZZER_STATE_IDLE;
     956:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <FSM_state>
     95a:	08 95       	ret

0000095c <FSM_BUZZER_Process>:
}

void FSM_BUZZER_Process(void)
{
	switch(FSM_state) {
     95c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <FSM_state>
     960:	08 95       	ret

00000962 <FSM_DHT_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_DHT_Init(void)
{
	// Initialize error var
	dht._failed = 0;
     962:	ee e9       	ldi	r30, 0x9E	; 158
     964:	f3 e0       	ldi	r31, 0x03	; 3
     966:	10 82       	st	Z, r1
	dht.error = DHT_ERROR_NO_ERROR;
     968:	11 82       	std	Z+1, r1	; 0x01
	// Set next FSM state
	FSM_state = FSM_DHT_STATE_IDLE;
     96a:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <FSM_state>
	// Flush FSM timer
	ResetTimer(TIMER_DHT);
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <ResetTimer>

00000974 <FSM_DHT_Process>:
}


void FSM_DHT_Process(void)
{
	switch(FSM_state) {
     974:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <FSM_state>
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	b1 f1       	breq	.+108    	; 0x9e8 <FSM_DHT_Process+0x74>
     97c:	18 f1       	brcs	.+70     	; 0x9c4 <FSM_DHT_Process+0x50>
     97e:	83 30       	cpi	r24, 0x03	; 3
     980:	09 f0       	breq	.+2      	; 0x984 <FSM_DHT_Process+0x10>
     982:	94 c0       	rjmp	.+296    	; 0xaac <FSM_DHT_Process+0x138>

			uint8_t *p_data = (void *)&dht.data;
			uint8_t *p_buff = rx_buff;

			for(uint8_t i=5; i; i--) {
				*(p_data++) = *(p_buff++);
     984:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <rx_buff>
     988:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <dht+0x2>
     98c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <rx_buff+0x1>
     990:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <dht+0x3>
     994:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <rx_buff+0x2>
     998:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <dht+0x4>
     99c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <rx_buff+0x3>
     9a0:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <dht+0x5>
     9a4:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <rx_buff+0x4>
     9a8:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <dht+0x6>
			}

			// Calculating DHT data values
			dht.temperature.sign = 0;
     9ac:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <dht+0x7>
			if(dht.data.t & 0x8000) {
     9b0:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <dht+0x3>
     9b4:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <dht+0x4>
     9b8:	97 ff       	sbrs	r25, 7
     9ba:	62 c0       	rjmp	.+196    	; 0xa80 <FSM_DHT_Process+0x10c>
				dht.temperature.sign = 1;
     9bc:	21 e0       	ldi	r18, 0x01	; 1
     9be:	20 93 a5 03 	sts	0x03A5, r18	; 0x8003a5 <dht+0x7>
     9c2:	5e c0       	rjmp	.+188    	; 0xa80 <FSM_DHT_Process+0x10c>
{
	switch(FSM_state) {

		case FSM_DHT_STATE_IDLE: {
			// If no error before and time to refresh data
			if(!dht._failed && GetTimer(TIMER_DHT) > DHT_REFRESH_PERIOD) {
     9c4:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <dht>
     9c8:	81 11       	cpse	r24, r1
     9ca:	70 c0       	rjmp	.+224    	; 0xaac <FSM_DHT_Process+0x138>
     9cc:	84 e0       	ldi	r24, 0x04	; 4
     9ce:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
     9d2:	89 3e       	cpi	r24, 0xE9	; 233
     9d4:	93 40       	sbci	r25, 0x03	; 3
     9d6:	08 f4       	brcc	.+2      	; 0x9da <FSM_DHT_Process+0x66>
     9d8:	69 c0       	rjmp	.+210    	; 0xaac <FSM_DHT_Process+0x138>
				// Set port pin in OUT mode
				DHT_DDR |= DHT_PIN_MASK;
     9da:	56 9a       	sbi	0x0a, 6	; 10
				// Set port pin in low level
				DHT_PORT &= ~DHT_PIN_MASK;
     9dc:	5e 98       	cbi	0x0b, 6	; 11
				// Flush FSM timer
				ResetTimer(TIMER_DHT);
     9de:	84 e0       	ldi	r24, 0x04	; 4
     9e0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <ResetTimer>
				// Set next FSM state
				FSM_state = FSM_DHT_STATE_GET_DATA;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	49 c0       	rjmp	.+146    	; 0xa7a <FSM_DHT_Process+0x106>
			return;
		}

		case FSM_DHT_STATE_GET_DATA: {

			if(GetTimer(TIMER_DHT) > 5) {
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
     9ee:	06 97       	sbiw	r24, 0x06	; 6
     9f0:	08 f4       	brcc	.+2      	; 0x9f4 <FSM_DHT_Process+0x80>
     9f2:	5c c0       	rjmp	.+184    	; 0xaac <FSM_DHT_Process+0x138>

				ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     9f4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9f6:	f8 94       	cli
					// Set port pin in HIGH level
					DHT_PORT |= DHT_PIN_MASK;
     9f8:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9fa:	80 e5       	ldi	r24, 0x50	; 80
     9fc:	8a 95       	dec	r24
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <FSM_DHT_Process+0x88>
					// Technology timeout ~20uS
					_delay_us(30);
					// Set port pin in IN mode
					DHT_DDR &= ~DHT_PIN_MASK;
     a00:	56 98       	cbi	0x0a, 6	; 10
					// Flush timer counter reg
					MEASURING_TMR_CNT = 0;
     a02:	16 bc       	out	0x26, r1	; 38
					// Waiting while level changed from LOW to HIGH
					while(!DHT_PIN_STATE) {
     a04:	4e 99       	sbic	0x09, 6	; 9
     a06:	07 c0       	rjmp	.+14     	; 0xa16 <FSM_DHT_Process+0xa2>
						// Timeout control
						if(MEASURING_TMR_CNT > DHT_TIMESLOT_TIMEOUT) {
     a08:	86 b5       	in	r24, 0x26	; 38
     a0a:	85 36       	cpi	r24, 0x65	; 101
     a0c:	d8 f3       	brcs	.-10     	; 0xa04 <FSM_DHT_Process+0x90>
							// Set error handler
							dht._failed = 1;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <dht>
     a14:	1e c0       	rjmp	.+60     	; 0xa52 <FSM_DHT_Process+0xde>
							return;
						}
					}

					// Flush timer counter reg
					MEASURING_TMR_CNT = 0;
     a16:	16 bc       	out	0x26, r1	; 38
					// Waiting while level changed from LOW to HIGH
					while(DHT_PIN_STATE) {
     a18:	4e 9b       	sbis	0x09, 6	; 9
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <FSM_DHT_Process+0xb0>
						// Timeout control
						if(MEASURING_TMR_CNT > DHT_TIMESLOT_TIMEOUT) {
     a1c:	86 b5       	in	r24, 0x26	; 38
     a1e:	85 36       	cpi	r24, 0x65	; 101
     a20:	d8 f3       	brcs	.-10     	; 0xa18 <FSM_DHT_Process+0xa4>
     a22:	13 c0       	rjmp	.+38     	; 0xa4a <FSM_DHT_Process+0xd6>
     a24:	e8 ea       	ldi	r30, 0xA8	; 168
     a26:	f1 e0       	ldi	r31, 0x01	; 1
     a28:	1a c0       	rjmp	.+52     	; 0xa5e <FSM_DHT_Process+0xea>
									FSM_state = FSM_DHT_STATE_IDLE;
									return;
								}
							}
							// Flush timer counter reg
							MEASURING_TMR_CNT = 0;
     a2a:	16 bc       	out	0x26, r1	; 38
							// Waiting while level changed from HIGH to LOW
							while(DHT_PIN_STATE) {
     a2c:	4e 99       	sbic	0x09, 6	; 9
     a2e:	1a c0       	rjmp	.+52     	; 0xa64 <FSM_DHT_Process+0xf0>
									FSM_state = FSM_DHT_STATE_IDLE;
									return;
								}
							}
							// Shift data bit in receive byte
							tmp <<= 1;
     a30:	88 0f       	add	r24, r24
							// If slot has time over 50uS - is 1, else - 0
							if(MEASURING_TMR_CNT > 50) {
     a32:	36 b5       	in	r19, 0x26	; 38
     a34:	33 33       	cpi	r19, 0x33	; 51
     a36:	08 f0       	brcs	.+2      	; 0xa3a <FSM_DHT_Process+0xc6>
								tmp |= 0x1;
     a38:	81 60       	ori	r24, 0x01	; 1
     a3a:	91 50       	subi	r25, 0x01	; 1
					// Receiving 5 bytes from DHT
					//uint8_t		*p_buff = (void *)&dht.data;
					for(int8_t i=4; i>=0; i--) {
						// Receiving procedure bit by bit
						uint8_t	tmp=0;
						for(uint8_t b=8; b>0; b--) {
     a3c:	b9 f0       	breq	.+46     	; 0xa6c <FSM_DHT_Process+0xf8>
							// Flush timer counter reg
							MEASURING_TMR_CNT = 0;
     a3e:	16 bc       	out	0x26, r1	; 38
							// Waiting while level changed from LOW to HIGH
							while(!DHT_PIN_STATE) {
     a40:	4e 99       	sbic	0x09, 6	; 9
     a42:	f3 cf       	rjmp	.-26     	; 0xa2a <FSM_DHT_Process+0xb6>
								// Timeout control
								if(MEASURING_TMR_CNT > DHT_TIMESLOT_TIMEOUT) {
     a44:	36 b5       	in	r19, 0x26	; 38
     a46:	35 36       	cpi	r19, 0x65	; 101
     a48:	d8 f3       	brcs	.-10     	; 0xa40 <FSM_DHT_Process+0xcc>
							// Waiting while level changed from HIGH to LOW
							while(DHT_PIN_STATE) {
								// Timeout control
								if(MEASURING_TMR_CNT > DHT_TIMESLOT_TIMEOUT) {
									// Set error handler
									dht._failed = 1;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <dht>
									dht.error = DHT_ERROR_TIMEOUT;
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <dht+0x1>
									// Set next FSM state
									FSM_state = FSM_DHT_STATE_IDLE;
     a56:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <FSM_state>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a5a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     a5c:	08 95       	ret
	ResetTimer(TIMER_DHT);
}


void FSM_DHT_Process(void)
{
     a5e:	98 e0       	ldi	r25, 0x08	; 8
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	ed cf       	rjmp	.-38     	; 0xa3e <FSM_DHT_Process+0xca>
							// Flush timer counter reg
							MEASURING_TMR_CNT = 0;
							// Waiting while level changed from HIGH to LOW
							while(DHT_PIN_STATE) {
								// Timeout control
								if(MEASURING_TMR_CNT > DHT_TIMESLOT_TIMEOUT) {
     a64:	36 b5       	in	r19, 0x26	; 38
     a66:	35 36       	cpi	r19, 0x65	; 101
     a68:	08 f3       	brcs	.-62     	; 0xa2c <FSM_DHT_Process+0xb8>
     a6a:	ef cf       	rjmp	.-34     	; 0xa4a <FSM_DHT_Process+0xd6>
							if(MEASURING_TMR_CNT > 50) {
								tmp |= 0x1;
							}
						}
						// Store received byte to the buffer
						rx_buff[i] = tmp;
     a6c:	82 93       	st	-Z, r24
						}
					}

					// Receiving 5 bytes from DHT
					//uint8_t		*p_buff = (void *)&dht.data;
					for(int8_t i=4; i>=0; i--) {
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	e3 3a       	cpi	r30, 0xA3	; 163
     a72:	f8 07       	cpc	r31, r24
     a74:	a1 f7       	brne	.-24     	; 0xa5e <FSM_DHT_Process+0xea>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a76:	2f bf       	out	0x3f, r18	; 63
						}
						// Store received byte to the buffer
						rx_buff[i] = tmp;
					}
				}
				FSM_state = FSM_DHT_STATE_PROCESSING;
     a78:	83 e0       	ldi	r24, 0x03	; 3
     a7a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <FSM_state>
     a7e:	08 95       	ret
			// Calculating DHT data values
			dht.temperature.sign = 0;
			if(dht.data.t & 0x8000) {
				dht.temperature.sign = 1;
			}
			dht.temperature.value = dht.data.t / 10;
     a80:	2a e0       	ldi	r18, 0x0A	; 10
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	b9 01       	movw	r22, r18
     a86:	0e 94 9d 10 	call	0x213a	; 0x213a <__udivmodhi4>
     a8a:	60 93 a6 03 	sts	0x03A6, r22	; 0x8003a6 <dht+0x8>
			dht.temperature.mantissa = dht.data.t % 10;
     a8e:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <dht+0x9>
			dht.humidity.value = dht.data.h / 10;
     a92:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <dht+0x5>
     a96:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <dht+0x6>
     a9a:	b9 01       	movw	r22, r18
     a9c:	0e 94 9d 10 	call	0x213a	; 0x213a <__udivmodhi4>
     aa0:	60 93 a8 03 	sts	0x03A8, r22	; 0x8003a8 <dht+0xa>
			dht.humidity.mantissa = dht.data.h % 10;
     aa4:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <dht+0xb>
			// Set next FSM state
			FSM_state = FSM_DHT_STATE_IDLE;
     aa8:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <FSM_state>
     aac:	08 95       	ret

00000aae <FSM_ENC_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_ENC_Init(void)
{
	// Set default FSM state
	FSM_state = FSM_ENC_STATE_IDLE;
     aae:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <FSM_state>
	// Flush FSM timer
	ResetTimer(TIMER_ENC);
     ab2:	86 e0       	ldi	r24, 0x06	; 6
     ab4:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <ResetTimer>

00000ab8 <FSM_ENC_Process>:
}

void FSM_ENC_Process(void)
{
	switch(FSM_state) {
     ab8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <FSM_state>
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	89 f0       	breq	.+34     	; 0xae2 <FSM_ENC_Process+0x2a>
     ac0:	20 f0       	brcs	.+8      	; 0xaca <FSM_ENC_Process+0x12>
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	09 f4       	brne	.+2      	; 0xac8 <FSM_ENC_Process+0x10>
     ac6:	41 c0       	rjmp	.+130    	; 0xb4a <FSM_ENC_Process+0x92>
     ac8:	08 95       	ret

		case FSM_ENC_STATE_IDLE: {
			if(GetTimer(TIMER_ENC) >= 1) {
     aca:	86 e0       	ldi	r24, 0x06	; 6
     acc:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
     ad0:	89 2b       	or	r24, r25
     ad2:	09 f4       	brne	.+2      	; 0xad6 <FSM_ENC_Process+0x1e>
     ad4:	47 c0       	rjmp	.+142    	; 0xb64 <FSM_ENC_Process+0xac>
				// Set next FSM state
				FSM_state = FSM_ENC_STATE_SCAN;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <FSM_state>
				// Flush FSM timer
				ResetTimer(TIMER_ENC);
     adc:	86 e0       	ldi	r24, 0x06	; 6
     ade:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <ResetTimer>
			return;
		}

		case FSM_ENC_STATE_SCAN: {
			// Getting current encoder pin state
			uint8_t curr_state = ENC_STATE;
     ae2:	86 b1       	in	r24, 0x06	; 6
     ae4:	83 70       	andi	r24, 0x03	; 3
			// Processing state
			switch(encoder.prev_state) {
     ae6:	20 91 a9 01 	lds	r18, 0x01A9	; 0x8001a9 <encoder>
     aea:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <encoder+0x1>
     aee:	21 30       	cpi	r18, 0x01	; 1
     af0:	99 f0       	breq	.+38     	; 0xb18 <FSM_ENC_Process+0x60>
     af2:	1c f4       	brge	.+6      	; 0xafa <FSM_ENC_Process+0x42>
     af4:	22 23       	and	r18, r18
     af6:	31 f0       	breq	.+12     	; 0xb04 <FSM_ENC_Process+0x4c>
     af8:	1d c0       	rjmp	.+58     	; 0xb34 <FSM_ENC_Process+0x7c>
     afa:	22 30       	cpi	r18, 0x02	; 2
     afc:	91 f0       	breq	.+36     	; 0xb22 <FSM_ENC_Process+0x6a>
     afe:	23 30       	cpi	r18, 0x03	; 3
     b00:	a9 f0       	breq	.+42     	; 0xb2c <FSM_ENC_Process+0x74>
     b02:	18 c0       	rjmp	.+48     	; 0xb34 <FSM_ENC_Process+0x7c>
				case 0: {
					if(curr_state == 2) encoder.value--;
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	11 f4       	brne	.+4      	; 0xb0c <FSM_ENC_Process+0x54>
     b08:	91 50       	subi	r25, 0x01	; 1
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <FSM_ENC_Process+0x5a>
					if(curr_state == 1) encoder.value++;
     b0c:	81 30       	cpi	r24, 0x01	; 1
     b0e:	91 f4       	brne	.+36     	; 0xb34 <FSM_ENC_Process+0x7c>
     b10:	9f 5f       	subi	r25, 0xFF	; 255
     b12:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <encoder+0x1>
     b16:	0e c0       	rjmp	.+28     	; 0xb34 <FSM_ENC_Process+0x7c>
					break;
				}

				case 1: {
					if(curr_state == 0) encoder.value--;
     b18:	88 23       	and	r24, r24
     b1a:	b1 f3       	breq	.-20     	; 0xb08 <FSM_ENC_Process+0x50>
					if(curr_state == 3) encoder.value++;
     b1c:	83 30       	cpi	r24, 0x03	; 3
     b1e:	c1 f3       	breq	.-16     	; 0xb10 <FSM_ENC_Process+0x58>
     b20:	09 c0       	rjmp	.+18     	; 0xb34 <FSM_ENC_Process+0x7c>
					break;
				}


				case 2: {
					if(curr_state == 3) encoder.value--;
     b22:	83 30       	cpi	r24, 0x03	; 3
     b24:	89 f3       	breq	.-30     	; 0xb08 <FSM_ENC_Process+0x50>
					if(curr_state == 0) encoder.value++;
     b26:	88 23       	and	r24, r24
     b28:	99 f3       	breq	.-26     	; 0xb10 <FSM_ENC_Process+0x58>
     b2a:	04 c0       	rjmp	.+8      	; 0xb34 <FSM_ENC_Process+0x7c>
					break;
				}

				case 3: {
					if(curr_state == 1) encoder.value--;
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	61 f3       	breq	.-40     	; 0xb08 <FSM_ENC_Process+0x50>
					if(curr_state == 2) encoder.value++;
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	71 f3       	breq	.-36     	; 0xb10 <FSM_ENC_Process+0x58>
					break;
				}
			}
			// Save last state of encoder pin
			encoder.prev_state = curr_state;
     b34:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <encoder>
			// If counter not null
			if(encoder.value > 3 || encoder.value < -3) {
     b38:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <encoder+0x1>
     b3c:	8d 5f       	subi	r24, 0xFD	; 253
     b3e:	87 30       	cpi	r24, 0x07	; 7
     b40:	78 f0       	brcs	.+30     	; 0xb60 <FSM_ENC_Process+0xa8>
				// Set next FSM state
				FSM_state = FSM_ENC_STATE_PROCESSING;
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <FSM_state>
				return;
     b48:	08 95       	ret
			return;
		}

		case FSM_ENC_STATE_PROCESSING: {
			// Store last rotate value
			encoder.last_value = encoder.value;
     b4a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <encoder+0x1>
     b4e:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <encoder+0x2>
			// Flush encoder counter
			encoder.value = 0;
     b52:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <encoder+0x1>
			// Send message with encoder rotate angel
			SendMessageWParam(MSG_ENC_ROTATE, &encoder.last_value);
     b56:	6b ea       	ldi	r22, 0xAB	; 171
     b58:	71 e0       	ldi	r23, 0x01	; 1
     b5a:	86 e0       	ldi	r24, 0x06	; 6
     b5c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <SendMessageWParam>
			// Set next FSM state
			FSM_state = FSM_ENC_STATE_IDLE;
     b60:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <FSM_state>
     b64:	08 95       	ret

00000b66 <FSM_LCD_Init>:
#endif

void FSM_LCD_Init(void)
{
	// Set next FSM state
	FSM_state = FSM_LCD_STATE_LCD_INIT;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <FSM_state>
	// Flush FSM timer
	ResetTimer(TIMER_LCD);
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <ResetTimer>

00000b72 <FSM_LCD_CreateCustomChars>:


#if (LCD_SUPPORT_CUSTOM_CHARS_SIZE > 1)
void FSM_LCD_CreateCustomChars(void)
{
	FSM_PCF8574_CreateCharacterFromFlash(0, cc_smb1);
     b72:	68 ed       	ldi	r22, 0xD8	; 216
     b74:	71 e0       	ldi	r23, 0x01	; 1
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	0e 94 06 0b 	call	0x160c	; 0x160c <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(1, cc_smb2);
     b7c:	60 ed       	ldi	r22, 0xD0	; 208
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 06 0b 	call	0x160c	; 0x160c <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(2, cc_smb3);
     b86:	68 ec       	ldi	r22, 0xC8	; 200
     b88:	71 e0       	ldi	r23, 0x01	; 1
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	0e 94 06 0b 	call	0x160c	; 0x160c <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(3, cc_smb4);
     b90:	60 ec       	ldi	r22, 0xC0	; 192
     b92:	71 e0       	ldi	r23, 0x01	; 1
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	0e 94 06 0b 	call	0x160c	; 0x160c <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(4, cc_smb5);
     b9a:	68 eb       	ldi	r22, 0xB8	; 184
     b9c:	71 e0       	ldi	r23, 0x01	; 1
     b9e:	84 e0       	ldi	r24, 0x04	; 4
     ba0:	0e 94 06 0b 	call	0x160c	; 0x160c <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(5, cc_smb6);
     ba4:	60 eb       	ldi	r22, 0xB0	; 176
     ba6:	71 e0       	ldi	r23, 0x01	; 1
     ba8:	85 e0       	ldi	r24, 0x05	; 5
     baa:	0e 94 06 0b 	call	0x160c	; 0x160c <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(6, cc_smb7);
     bae:	68 ea       	ldi	r22, 0xA8	; 168
     bb0:	71 e0       	ldi	r23, 0x01	; 1
     bb2:	86 e0       	ldi	r24, 0x06	; 6
     bb4:	0e 94 06 0b 	call	0x160c	; 0x160c <FSM_PCF8574_CreateCharacterFromFlash>
	FSM_PCF8574_CreateCharacterFromFlash(7, cc_smb8);
     bb8:	60 ea       	ldi	r22, 0xA0	; 160
     bba:	71 e0       	ldi	r23, 0x01	; 1
     bbc:	87 e0       	ldi	r24, 0x07	; 7
     bbe:	0c 94 06 0b 	jmp	0x160c	; 0x160c <FSM_PCF8574_CreateCharacterFromFlash>

00000bc2 <FSM_LCD_DrawCustomChar>:
}

uint8_t FSM_LCD_DrawCustomChar(char chr, uint8_t start_row, uint8_t start_col)
{
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	f6 2e       	mov	r15, r22
     bce:	c4 2f       	mov	r28, r20
     bd0:	80 52       	subi	r24, 0x20	; 32
     bd2:	87 34       	cpi	r24, 0x47	; 71
     bd4:	20 f5       	brcc	.+72     	; 0xc1e <FSM_LCD_DrawCustomChar+0x5c>
     bd6:	e8 2f       	mov	r30, r24
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	ee 0f       	add	r30, r30
     bdc:	ff 1f       	adc	r31, r31
     bde:	e1 5f       	subi	r30, 0xF1	; 241
     be0:	fe 4f       	sbci	r31, 0xFE	; 254
     be2:	00 81       	ld	r16, Z
     be4:	11 81       	ldd	r17, Z+1	; 0x01
		case ':': { pChr = cc_char_colon; break; }
		case ' ': { pChr = cc_char_space; break; }
		default: break;
	}

	if(pChr != NULL) {
     be6:	01 15       	cp	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	c9 f0       	breq	.+50     	; 0xc1e <FSM_LCD_DrawCustomChar+0x5c>
		// Go to start position ROW & COL
		FSM_PCF8574_GoToXY(i,j);
     bec:	64 2f       	mov	r22, r20
     bee:	8f 2d       	mov	r24, r15
     bf0:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>

uint8_t FSM_LCD_DrawCustomChar(char chr, uint8_t start_row, uint8_t start_col)
{
	const char * pChr = NULL;
	char c;
	uint8_t		i=start_row, j=start_col;
     bf4:	dc 2f       	mov	r29, r28

	if(pChr != NULL) {
		// Go to start position ROW & COL
		FSM_PCF8574_GoToXY(i,j);
		// Draw processing line by line
		while((c = pgm_read_byte(pChr)) != '$') {
     bf6:	f8 01       	movw	r30, r16
     bf8:	84 91       	lpm	r24, Z
     bfa:	84 32       	cpi	r24, 0x24	; 36
     bfc:	79 f0       	breq	.+30     	; 0xc1c <FSM_LCD_DrawCustomChar+0x5a>
			if(c == '&') { // <- Next line sybol
     bfe:	86 32       	cpi	r24, 0x26	; 38
     c00:	39 f4       	brne	.+14     	; 0xc10 <FSM_LCD_DrawCustomChar+0x4e>
				// Increment ROW position
				i++;
     c02:	f3 94       	inc	r15
				// Store COL position
				j=start_col;
				// Go to next ROW
				FSM_PCF8574_GoToXY(i, j);
     c04:	6c 2f       	mov	r22, r28
     c06:	8f 2d       	mov	r24, r15
     c08:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
		while((c = pgm_read_byte(pChr)) != '$') {
			if(c == '&') { // <- Next line sybol
				// Increment ROW position
				i++;
				// Store COL position
				j=start_col;
     c0c:	dc 2f       	mov	r29, r28
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <FSM_LCD_DrawCustomChar+0x54>
				// Go to next ROW
				FSM_PCF8574_GoToXY(i, j);
			} else {
				// Change col position to the end
				j++;
     c10:	df 5f       	subi	r29, 0xFF	; 255
				// Draw char
				FSM_PCF8574_AddRAWChar(c);
     c12:	0e 94 af 0b 	call	0x175e	; 0x175e <FSM_PCF8574_AddRAWChar>
			}
			pChr++;
     c16:	0f 5f       	subi	r16, 0xFF	; 255
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	ed cf       	rjmp	.-38     	; 0xbf6 <FSM_LCD_DrawCustomChar+0x34>
     c1c:	cd 2f       	mov	r28, r29
		}
	}
	// Return last position by Y axis with char size include
	return j;
}
     c1e:	8c 2f       	mov	r24, r28
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	08 95       	ret

00000c2c <FSM_LCD_AddCustomCharStringToXY>:


uint8_t FSM_LCD_AddCustomCharStringToXY(char * str, uint8_t start_row, uint8_t start_col)
{
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	16 2f       	mov	r17, r22
     c34:	ec 01       	movw	r28, r24
	uint8_t pos_col = start_col;

	while(*str) {
     c36:	89 91       	ld	r24, Y+
     c38:	88 23       	and	r24, r24
     c3a:	29 f0       	breq	.+10     	; 0xc46 <FSM_LCD_AddCustomCharStringToXY+0x1a>
		// Store col position for the next SYMBOL
		pos_col = FSM_LCD_DrawCustomChar(*str, start_row, pos_col);
     c3c:	61 2f       	mov	r22, r17
     c3e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <FSM_LCD_DrawCustomChar>
     c42:	48 2f       	mov	r20, r24
     c44:	f8 cf       	rjmp	.-16     	; 0xc36 <FSM_LCD_AddCustomCharStringToXY+0xa>
		str++;
	}
	// Return last column position
	return pos_col;
}
     c46:	84 2f       	mov	r24, r20
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	08 95       	ret

00000c50 <FSM_LCD_AddCustomCharStringToXYFromFlash>:

uint8_t FSM_LCD_AddCustomCharStringToXYFromFlash(const char * str, uint8_t start_row, uint8_t start_col)
{
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ec 01       	movw	r28, r24
     c58:	16 2f       	mov	r17, r22
	char chr;
	uint8_t pos_col = start_col;

	while((chr = pgm_read_byte(str))) {
     c5a:	fe 01       	movw	r30, r28
     c5c:	84 91       	lpm	r24, Z
     c5e:	88 23       	and	r24, r24
     c60:	31 f0       	breq	.+12     	; 0xc6e <FSM_LCD_AddCustomCharStringToXYFromFlash+0x1e>
		// Store col position for the next SYMBOL
		pos_col = FSM_LCD_DrawCustomChar(chr, start_row, pos_col);
     c62:	61 2f       	mov	r22, r17
     c64:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <FSM_LCD_DrawCustomChar>
     c68:	48 2f       	mov	r20, r24
		str++;
     c6a:	21 96       	adiw	r28, 0x01	; 1
     c6c:	f6 cf       	rjmp	.-20     	; 0xc5a <FSM_LCD_AddCustomCharStringToXYFromFlash+0xa>
	}
	// Return last column position
	return pos_col;
}
     c6e:	84 2f       	mov	r24, r20
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	08 95       	ret

00000c78 <FSM_LCD_Process>:
	// Flush FSM timer
	ResetTimer(TIMER_LCD);
}

void FSM_LCD_Process(void)
{
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	00 d0       	rcall	.+0      	; 0xc82 <FSM_LCD_Process+0xa>
     c82:	00 d0       	rcall	.+0      	; 0xc84 <FSM_LCD_Process+0xc>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <FSM_LCD_Process+0xe>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t _presence;
	char buff[6];

	switch(FSM_state) {
     c8a:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <FSM_state>
     c8e:	8e 2f       	mov	r24, r30
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	88 30       	cpi	r24, 0x08	; 8
     c94:	91 05       	cpc	r25, r1
     c96:	08 f0       	brcs	.+2      	; 0xc9a <FSM_LCD_Process+0x22>
     c98:	f3 c1       	rjmp	.+998    	; 0x1080 <FSM_LCD_Process+0x408>
     c9a:	fc 01       	movw	r30, r24
     c9c:	ec 5c       	subi	r30, 0xCC	; 204
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <__tablejump2__>
		/* Waiting LCD init instruction will be send */
		case FSM_LCD_STATE_LCD_INIT: {
			if(GetBCMessage(MSG_BC_PCF8574_INIT_CMD_SEND_COMPLETE)) {
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <GetBCMessage>
     caa:	88 23       	and	r24, r24
     cac:	09 f4       	brne	.+2      	; 0xcb0 <FSM_LCD_Process+0x38>
     cae:	e8 c1       	rjmp	.+976    	; 0x1080 <FSM_LCD_Process+0x408>
				// Load into display custom chars
				FSM_LCD_CreateCustomChars();
     cb0:	0e 94 b9 05 	call	0xb72	; 0xb72 <FSM_LCD_CreateCustomChars>
				// Goto SPLASH screen load
				FSM_state = FSM_LCD_STATE_SPLASH_DRAW;
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	2a c0       	rjmp	.+84     	; 0xd0c <FSM_LCD_Process+0x94>
		case FSM_LCD_STATE_SPLASH_DRAW: {
			//   ### ###2   HW: x.x
			//   #   # #    SW: x.x
			//   ### ###
			//  SEMAPHORE
			FSM_LCD_AddCustomCharStringToXYFromFlash(LNG_SPLASH_LOGO_S1, 0, 3);
     cb8:	43 e0       	ldi	r20, 0x03	; 3
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	87 ef       	ldi	r24, 0xF7	; 247
     cbe:	93 e0       	ldi	r25, 0x03	; 3
     cc0:	0e 94 28 06 	call	0xc50	; 0xc50 <FSM_LCD_AddCustomCharStringToXYFromFlash>
			FSM_PCF8574_GoToXY(0,9);
     cc4:	69 e0       	ldi	r22, 0x09	; 9
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
			FSM_PCF8574_AddStringFromFlash(LNG_SPLASH_LOGO_S1_1);
     ccc:	85 ef       	ldi	r24, 0xF5	; 245
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_GoToXY(3,2);
     cd4:	62 e0       	ldi	r22, 0x02	; 2
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
			FSM_PCF8574_AddStringFromFlash(LNG_SPLASH_LOGO_S4);
     cdc:	8b ee       	ldi	r24, 0xEB	; 235
     cde:	93 e0       	ldi	r25, 0x03	; 3
     ce0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_GoToXY(0,13);
     ce4:	6d e0       	ldi	r22, 0x0D	; 13
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
			FSM_PCF8574_AddStringFromFlash(LNG_HW_VERSION);
     cec:	83 ee       	ldi	r24, 0xE3	; 227
     cee:	93 e0       	ldi	r25, 0x03	; 3
     cf0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_GoToXY(1,13);
     cf4:	6d e0       	ldi	r22, 0x0D	; 13
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
			FSM_PCF8574_AddStringFromFlash(LNG_SW_VERSION);
     cfc:	8b ed       	ldi	r24, 0xDB	; 219
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
			// Prepare SPLASH show timeout countdown
			ResetTimer(TIMER_LCD);
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <ResetTimer>
			// Goto waiting SHOW timeout
			FSM_state = FSM_LCD_STATE_SPLASH_SHOW;
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <FSM_state>
			return;
     d10:	b7 c1       	rjmp	.+878    	; 0x1080 <FSM_LCD_Process+0x408>
		}

		/* Splash show delay */
		case FSM_LCD_STATE_SPLASH_SHOW: {
			// Waiting for SPLASH showing timeout
			if(GetTimer(TIMER_LCD) > LCD_SPLASH_SPLASH_HIDE_TIMEOUT) {
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
     d18:	81 3d       	cpi	r24, 0xD1	; 209
     d1a:	97 40       	sbci	r25, 0x07	; 7
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <FSM_LCD_Process+0xa8>
     d1e:	b0 c1       	rjmp	.+864    	; 0x1080 <FSM_LCD_Process+0x408>
				// Goto SPLASH hide animation
				FSM_state = FSM_LCD_STATE_SPLASH_HIDE_ANIMATION;
     d20:	84 e0       	ldi	r24, 0x04	; 4
     d22:	f4 cf       	rjmp	.-24     	; 0xd0c <FSM_LCD_Process+0x94>
		}

		/* Animated splash hiding */
		case FSM_LCD_STATE_SPLASH_HIDE_ANIMATION: {
			// Animation timeout
			if(GetTimer(TIMER_LCD) >= LCD_SPLASH_SLIDE_PERIOD) {
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
     d2a:	49 97       	sbiw	r24, 0x19	; 25
     d2c:	08 f4       	brcc	.+2      	; 0xd30 <FSM_LCD_Process+0xb8>
     d2e:	a8 c1       	rjmp	.+848    	; 0x1080 <FSM_LCD_Process+0x408>
				if(splash_length--) {
     d30:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d34:	9f ef       	ldi	r25, 0xFF	; 255
     d36:	98 0f       	add	r25, r24
     d38:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
     d3c:	88 23       	and	r24, r24
     d3e:	69 f0       	breq	.+26     	; 0xd5a <FSM_LCD_Process+0xe2>
     d40:	10 e0       	ldi	r17, 0x00	; 0
					for(i=0; i<4; i++) {
						FSM_PCF8574_GoToXY(i,splash_length);
     d42:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     d46:	81 2f       	mov	r24, r17
     d48:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
						FSM_PCF8574_AddRAWChar(0x20);
     d4c:	80 e2       	ldi	r24, 0x20	; 32
     d4e:	0e 94 af 0b 	call	0x175e	; 0x175e <FSM_PCF8574_AddRAWChar>
		/* Animated splash hiding */
		case FSM_LCD_STATE_SPLASH_HIDE_ANIMATION: {
			// Animation timeout
			if(GetTimer(TIMER_LCD) >= LCD_SPLASH_SLIDE_PERIOD) {
				if(splash_length--) {
					for(i=0; i<4; i++) {
     d52:	1f 5f       	subi	r17, 0xFF	; 255
     d54:	14 30       	cpi	r17, 0x04	; 4
     d56:	a9 f7       	brne	.-22     	; 0xd42 <FSM_LCD_Process+0xca>
     d58:	8a c1       	rjmp	.+788    	; 0x106e <FSM_LCD_Process+0x3f6>
					// Flush FSM timer
					ResetTimer(TIMER_LCD);
					return;
				}
				// When last position is 0, send command to change shift source to cursor
				FSM_PCF8574_AddByteToQueue(PCF8574_OPT_SHIFT_CURSOR | PCF8574_OPT_SHIFT_LEFT, PCF8574_COMMAND, PCF8574_BYTE_FULL, 1);
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	80 e1       	ldi	r24, 0x10	; 16
     d62:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
				// Clear display after animation
				FSM_PCF8574_Clear();
     d66:	0e 94 b4 0b 	call	0x1768	; 0x1768 <FSM_PCF8574_Clear>
				// Goto sensor check state
				FSM_state = FSM_LCD_STATE_DRAW_SENSORS_STATE_SCREEN;
     d6a:	85 e0       	ldi	r24, 0x05	; 5
     d6c:	cf cf       	rjmp	.-98     	; 0xd0c <FSM_LCD_Process+0x94>
		case FSM_LCD_STATE_DRAW_SENSORS_STATE_SCREEN: {
			// Peripheral presence:
			//  -> RTC ...
			//  -> DHT ...
			//  -> CO2 ...
			FSM_PCF8574_AddStringFromFlash(LNG_DM1_S1);
     d6e:	84 ec       	ldi	r24, 0xC4	; 196
     d70:	93 e0       	ldi	r25, 0x03	; 3
     d72:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_AddStringFromFlash(LNG_DM1_S2);
     d76:	86 eb       	ldi	r24, 0xB6	; 182
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_AddStringFromFlash(LNG_DM1_S3);
     d7e:	88 ea       	ldi	r24, 0xA8	; 168
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
			FSM_PCF8574_AddStringFromFlash(LNG_DM1_S4);
     d86:	8c e9       	ldi	r24, 0x9C	; 156
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
			// Goto sensors test result
			FSM_state = FSM_LCD_STATE_ANIMATION_SENSORS_STATE_SCREEN;
     d8e:	86 e0       	ldi	r24, 0x06	; 6
     d90:	6c c1       	rjmp	.+728    	; 0x106a <FSM_LCD_Process+0x3f2>
		}

		/* Animation sensors check list */
		case FSM_LCD_STATE_ANIMATION_SENSORS_STATE_SCREEN: {
			uint16_t curr_timeout = 500;
			if(current_row == 2) {
     d92:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <current_row>
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	19 f4       	brne	.+6      	; 0xda0 <FSM_LCD_Process+0x128>
				curr_timeout = MHZ19B_REFRESH_PERIOD + 1000;
     d9a:	08 e0       	ldi	r16, 0x08	; 8
     d9c:	12 e5       	ldi	r17, 0x52	; 82
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <FSM_LCD_Process+0x12c>
			return;
		}

		/* Animation sensors check list */
		case FSM_LCD_STATE_ANIMATION_SENSORS_STATE_SCREEN: {
			uint16_t curr_timeout = 500;
     da0:	04 ef       	ldi	r16, 0xF4	; 244
     da2:	11 e0       	ldi	r17, 0x01	; 1
			if(current_row == 2) {
				curr_timeout = MHZ19B_REFRESH_PERIOD + 1000;
			}

			/* Animate row by row with delay */
			if(GetTimer(TIMER_LCD) > curr_timeout) {
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
     daa:	08 17       	cp	r16, r24
     dac:	19 07       	cpc	r17, r25
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <FSM_LCD_Process+0x13a>
     db0:	67 c1       	rjmp	.+718    	; 0x1080 <FSM_LCD_Process+0x408>
				// Showing sensors state
				switch(++current_row) {
     db2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <current_row>
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <current_row>
     dbc:	82 30       	cpi	r24, 0x02	; 2
     dbe:	49 f0       	breq	.+18     	; 0xdd2 <FSM_LCD_Process+0x15a>
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	51 f0       	breq	.+20     	; 0xdd8 <FSM_LCD_Process+0x160>
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	69 f4       	brne	.+26     	; 0xde2 <FSM_LCD_Process+0x16a>
						FSM_state = FSM_LCD_STATE_IDLE;
						return;
					}
				}
				/* Draw state */
				if(_presence) {
     dc8:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <rtc>
     dcc:	99 23       	and	r25, r25
     dce:	99 f0       	breq	.+38     	; 0xdf6 <FSM_LCD_Process+0x17e>
     dd0:	0c c0       	rjmp	.+24     	; 0xdea <FSM_LCD_Process+0x172>
						_presence = rtc._presence;
						break;
					}
					/* DHT sensor */
					case 2: {
						if(!dht._failed) {
     dd2:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <dht>
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <FSM_LCD_Process+0x164>
						}
						break;
					}
					/* CO2 sensor */
					case 3: {
						if(!mhz19b._error) {
     dd8:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <mhz19b+0x1>
     ddc:	99 23       	and	r25, r25
     dde:	29 f0       	breq	.+10     	; 0xdea <FSM_LCD_Process+0x172>
     de0:	0a c0       	rjmp	.+20     	; 0xdf6 <FSM_LCD_Process+0x17e>
						break;
					}
					/* Exit to idle state */
					default: {
						// Send message for complete startup detect
						SendMessageWOParam(MSG_CHK_SENSORS_COMPLETE);
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SendMessageWOParam>
     de8:	36 c1       	rjmp	.+620    	; 0x1056 <FSM_LCD_Process+0x3de>
						return;
					}
				}
				/* Draw state */
				if(_presence) {
					FSM_PCF8574_GoToXY(current_row, PCF8574_COLS-2);
     dea:	62 e1       	ldi	r22, 0x12	; 18
     dec:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddStringFromFlash(LNG_OK);
     df0:	85 e7       	ldi	r24, 0x75	; 117
     df2:	93 e0       	ldi	r25, 0x03	; 3
     df4:	05 c0       	rjmp	.+10     	; 0xe00 <FSM_LCD_Process+0x188>
				} else {
					FSM_PCF8574_GoToXY(current_row, PCF8574_COLS-4);
     df6:	60 e1       	ldi	r22, 0x10	; 16
     df8:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddStringFromFlash(LNG_FAIL);
     dfc:	88 e7       	ldi	r24, 0x78	; 120
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
     e04:	34 c1       	rjmp	.+616    	; 0x106e <FSM_LCD_Process+0x3f6>
			}
			return;
		}

		case FSM_LCD_STATE_REFRESH_SCREEN: {
			uint8_t _full_refresh = (device.mode != device.last_mode);
     e06:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <device+0x3>
     e0a:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <device+0x4>
			device.last_mode = device.mode;
     e0e:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <device+0x4>

			switch(device.mode) {
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	21 f0       	breq	.+8      	; 0xe1e <FSM_LCD_Process+0x1a6>
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	09 f4       	brne	.+2      	; 0xe1c <FSM_LCD_Process+0x1a4>
     e1a:	ba c0       	rjmp	.+372    	; 0xf90 <FSM_LCD_Process+0x318>
     e1c:	17 c1       	rjmp	.+558    	; 0x104c <FSM_LCD_Process+0x3d4>

				case DEVICE_MODE_IDLE: {
					// @TODO: Need optimization

					// If mode was changed - full refresh LCD screen
					if(_full_refresh) {
     e1e:	91 30       	cpi	r25, 0x01	; 1
     e20:	91 f0       	breq	.+36     	; 0xe46 <FSM_LCD_Process+0x1ce>
						// Clear display
						FSM_PCF8574_Clear();
     e22:	0e 94 b4 0b 	call	0x1768	; 0x1768 <FSM_PCF8574_Clear>
						// Load first line of splash string to display
						FSM_PCF8574_GoToXY(0, PCF8574_COLS-3);
     e26:	61 e1       	ldi	r22, 0x11	; 17
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_POINT);
     e2e:	81 e8       	ldi	r24, 0x81	; 129
     e30:	93 e0       	ldi	r25, 0x03	; 3
     e32:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
						FSM_PCF8574_GoToXY(3, 0);
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	83 e0       	ldi	r24, 0x03	; 3
     e3a:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
						FSM_PCF8574_AddStringFromFlash(LNG_DM_MAIN_S4);
     e3e:	87 e8       	ldi	r24, 0x87	; 135
     e40:	93 e0       	ldi	r25, 0x03	; 3
     e42:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
					}

					// Draw date data
					FSM_PCF8574_GoToXY(0, PCF8574_COLS-5);
     e46:	6f e0       	ldi	r22, 0x0F	; 15
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddString(utoa_cycle_sub8(rtc.day, buff, 0, 2));
     e4e:	22 e0       	ldi	r18, 0x02	; 2
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	be 01       	movw	r22, r28
     e54:	6f 5f       	subi	r22, 0xFF	; 255
     e56:	7f 4f       	sbci	r23, 0xFF	; 255
     e58:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <rtc+0x5>
     e5c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <utoa_cycle_sub8>
     e60:	0e 94 42 0b 	call	0x1684	; 0x1684 <FSM_PCF8574_AddString>
					FSM_PCF8574_GoToXY(0, PCF8574_COLS-2);
     e64:	62 e1       	ldi	r22, 0x12	; 18
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddString(utoa_cycle_sub8(rtc.month, buff, 0, 2));
     e6c:	22 e0       	ldi	r18, 0x02	; 2
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	be 01       	movw	r22, r28
     e72:	6f 5f       	subi	r22, 0xFF	; 255
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <rtc+0x6>
     e7a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <utoa_cycle_sub8>
     e7e:	0e 94 42 0b 	call	0x1684	; 0x1684 <FSM_PCF8574_AddString>
					FSM_PCF8574_GoToXY(1, PCF8574_COLS-4);
     e82:	60 e1       	ldi	r22, 0x10	; 16
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddStringFromFlash((char *)LNG_DOW[rtc.dow]);
     e8a:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <rtc+0x4>
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	ef 5f       	subi	r30, 0xFF	; 255
     e96:	fe 4f       	sbci	r31, 0xFE	; 254
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
					// Draw T data
					FSM_PCF8574_GoToXY(3, 0);
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
					if(dht.temperature.sign) {
     ea8:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <dht+0x7>
     eac:	88 23       	and	r24, r24
     eae:	19 f0       	breq	.+6      	; 0xeb6 <FSM_LCD_Process+0x23e>
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_MINUS);
     eb0:	8f e7       	ldi	r24, 0x7F	; 127
     eb2:	93 e0       	ldi	r25, 0x03	; 3
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <FSM_LCD_Process+0x242>
					} else {
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_SPACE);
     eb6:	8d e7       	ldi	r24, 0x7D	; 125
     eb8:	93 e0       	ldi	r25, 0x03	; 3
     eba:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
					}
					FSM_PCF8574_AddString(utoa_cycle_sub8(dht.temperature.value, buff, 1, 2));
     ebe:	22 e0       	ldi	r18, 0x02	; 2
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	be 01       	movw	r22, r28
     ec4:	6f 5f       	subi	r22, 0xFF	; 255
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <dht+0x8>
     ecc:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <utoa_cycle_sub8>
     ed0:	0e 94 42 0b 	call	0x1684	; 0x1684 <FSM_PCF8574_AddString>
					// Draw H data
					FSM_PCF8574_GoToXY(3, 7);
     ed4:	67 e0       	ldi	r22, 0x07	; 7
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddString(utoa_cycle_sub8(dht.humidity.value, buff, 1, 2));
     edc:	22 e0       	ldi	r18, 0x02	; 2
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	be 01       	movw	r22, r28
     ee2:	6f 5f       	subi	r22, 0xFF	; 255
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <dht+0xa>
     eea:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <utoa_cycle_sub8>
     eee:	0e 94 42 0b 	call	0x1684	; 0x1684 <FSM_PCF8574_AddString>
					// Draw CO2 data
					FSM_PCF8574_GoToXY(3,13);
     ef2:	6d e0       	ldi	r22, 0x0D	; 13
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
					FSM_PCF8574_AddString(utoa_cycle_sub16(mhz19b.value, buff, 4));
     efa:	44 e0       	ldi	r20, 0x04	; 4
     efc:	be 01       	movw	r22, r28
     efe:	6f 5f       	subi	r22, 0xFF	; 255
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <mhz19b+0x3>
     f06:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <mhz19b+0x4>
     f0a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <utoa_cycle_sub16>
     f0e:	0e 94 42 0b 	call	0x1684	; 0x1684 <FSM_PCF8574_AddString>
					FSM_PCF8574_GoToXY(3,12);
     f12:	6c e0       	ldi	r22, 0x0C	; 12
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
					if(mhz19b._error) {
     f1a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <mhz19b+0x1>
     f1e:	88 23       	and	r24, r24
     f20:	19 f0       	breq	.+6      	; 0xf28 <FSM_LCD_Process+0x2b0>
						FSM_PCF8574_AddStringFromFlash(PSTR("!"));
     f22:	8e e8       	ldi	r24, 0x8E	; 142
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <FSM_LCD_Process+0x2b4>
					} else {
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_SPACE);
     f28:	8d e7       	ldi	r24, 0x7D	; 125
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
					}
					// Draw big clock data
					uint8_t pos = FSM_LCD_AddCustomCharStringToXY(utoa_cycle_sub8(rtc.hour, buff, 1, 2), 0, 0);
     f30:	22 e0       	ldi	r18, 0x02	; 2
     f32:	41 e0       	ldi	r20, 0x01	; 1
     f34:	be 01       	movw	r22, r28
     f36:	6f 5f       	subi	r22, 0xFF	; 255
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <rtc+0x3>
     f3e:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <utoa_cycle_sub8>
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	0e 94 16 06 	call	0xc2c	; 0xc2c <FSM_LCD_AddCustomCharStringToXY>
     f4a:	18 2f       	mov	r17, r24
					FSM_LCD_AddCustomCharStringToXY(utoa_cycle_sub8(rtc.min, buff, 0, 2), 0, ++pos);
     f4c:	22 e0       	ldi	r18, 0x02	; 2
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	be 01       	movw	r22, r28
     f52:	6f 5f       	subi	r22, 0xFF	; 255
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <rtc+0x2>
     f5a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <utoa_cycle_sub8>
     f5e:	41 e0       	ldi	r20, 0x01	; 1
     f60:	41 0f       	add	r20, r17
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	0e 94 16 06 	call	0xc2c	; 0xc2c <FSM_LCD_AddCustomCharStringToXY>
					// Draw blinking colon
					FSM_PCF8574_GoToXY(1,6);
     f68:	66 e0       	ldi	r22, 0x06	; 6
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
					if((_colon_blink ^= 0x1)) {
     f70:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_colon_blink>
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	89 27       	eor	r24, r25
     f78:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <_colon_blink>
     f7c:	88 23       	and	r24, r24
     f7e:	19 f0       	breq	.+6      	; 0xf86 <FSM_LCD_Process+0x30e>
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_COLON);
     f80:	83 e8       	ldi	r24, 0x83	; 131
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <FSM_LCD_Process+0x312>
					} else {
						FSM_PCF8574_AddStringFromFlash(LNG_SMB_SPACE);
     f86:	8d e7       	ldi	r24, 0x7D	; 125
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
     f8e:	60 c0       	rjmp	.+192    	; 0x1050 <FSM_LCD_Process+0x3d8>
					// /@TODO: Need optimization
					break;
				}

				case DEVICE_MODE_SHOW_MENU: {
					if(device.flags._menu_changed) {
     f90:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <device+0x5>
     f94:	88 23       	and	r24, r24
     f96:	09 f4       	brne	.+2      	; 0xf9a <FSM_LCD_Process+0x322>
     f98:	5b c0       	rjmp	.+182    	; 0x1050 <FSM_LCD_Process+0x3d8>
						// Flush menu change flag
						device.flags._menu_changed = 0;
     f9a:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <device+0x5>
						// Clear display
						FSM_PCF8574_Clear();
     f9e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <FSM_PCF8574_Clear>
						// Cursor movement procedure
						if((menu_item_t *)pgm_read_word(&last_menu_item->Previous) == (void *)selected_menu_item) {
     fa2:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <last_menu_item>
     fa6:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <last_menu_item+0x1>
     faa:	fc 01       	movw	r30, r24
     fac:	32 96       	adiw	r30, 0x02	; 2
     fae:	25 91       	lpm	r18, Z+
     fb0:	34 91       	lpm	r19, Z
     fb2:	40 91 8e 03 	lds	r20, 0x038E	; 0x80038e <selected_menu_item>
     fb6:	50 91 8f 03 	lds	r21, 0x038F	; 0x80038f <selected_menu_item+0x1>
     fba:	42 17       	cp	r20, r18
     fbc:	53 07       	cpc	r21, r19
     fbe:	39 f4       	brne	.+14     	; 0xfce <FSM_LCD_Process+0x356>
							if(device.menu_cursor > 0) {
     fc0:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <device+0x2>
     fc4:	22 23       	and	r18, r18
     fc6:	19 f0       	breq	.+6      	; 0xfce <FSM_LCD_Process+0x356>
								device.menu_cursor--;
     fc8:	21 50       	subi	r18, 0x01	; 1
     fca:	20 93 ac 03 	sts	0x03AC, r18	; 0x8003ac <device+0x2>
							}
						}
						if((menu_item_t *)pgm_read_word(&last_menu_item->Next) == (void *)selected_menu_item) {
     fce:	fc 01       	movw	r30, r24
     fd0:	85 91       	lpm	r24, Z+
     fd2:	94 91       	lpm	r25, Z
     fd4:	48 17       	cp	r20, r24
     fd6:	59 07       	cpc	r21, r25
     fd8:	39 f4       	brne	.+14     	; 0xfe8 <FSM_LCD_Process+0x370>
							if(device.menu_cursor < PCF8574_ROWS-1) {
     fda:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <device+0x2>
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	18 f4       	brcc	.+6      	; 0xfe8 <FSM_LCD_Process+0x370>
								device.menu_cursor++;
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <device+0x2>

		/* Animation sensors check list */
		case FSM_LCD_STATE_ANIMATION_SENSORS_STATE_SCREEN: {
			uint16_t curr_timeout = 500;
			if(current_row == 2) {
				curr_timeout = MHZ19B_REFRESH_PERIOD + 1000;
     fe8:	10 e0       	ldi	r17, 0x00	; 0
							}
						}
						// Draw menu on the LCD line by line
						for(uint8_t i=0; i < PCF8574_ROWS; i++) {
							// Draw cursor
							FSM_PCF8574_GoToXY(i,0);
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	81 2f       	mov	r24, r17
     fee:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
							if(device.menu_cursor == i) {
     ff2:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <device+0x2>
     ff6:	81 13       	cpse	r24, r17
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <FSM_LCD_Process+0x388>
								FSM_PCF8574_AddStringFromFlash(LNG_SMB_ANGLE_BRACKET_RIGHT);
     ffa:	85 e8       	ldi	r24, 0x85	; 133
     ffc:	93 e0       	ldi	r25, 0x03	; 3
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <FSM_LCD_Process+0x38c>
							} else {
								FSM_PCF8574_AddStringFromFlash(LNG_SMB_SPACE);
    1000:	8d e7       	ldi	r24, 0x7D	; 125
    1002:	93 e0       	ldi	r25, 0x03	; 3
    1004:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
							}
							// Draw menu item title
							uint8_t shift = i-device.menu_cursor;
    1008:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <device+0x2>
    100c:	01 2f       	mov	r16, r17
    100e:	08 1b       	sub	r16, r24
							FSM_PCF8574_GoToXY(i,1);
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	81 2f       	mov	r24, r17
    1014:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
							FSM_PCF8574_AddStringFromFlash(MENU_GetMenuTextByShift(shift));
    1018:	80 2f       	mov	r24, r16
    101a:	0e 94 38 10 	call	0x2070	; 0x2070 <MENU_GetMenuTextByShift>
    101e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
							// Draw subcategory symbol
							FSM_PCF8574_GoToXY(i,PCF8574_COLS-2);
    1022:	62 e1       	ldi	r22, 0x12	; 18
    1024:	81 2f       	mov	r24, r17
    1026:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
							FSM_PCF8574_AddStringFromFlash(MENU_GetChildMenuSymbolByShift(shift));
    102a:	80 2f       	mov	r24, r16
    102c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MENU_GetChildMenuSymbolByShift>
    1030:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <FSM_PCF8574_AddStringFromFlash>
							if(device.menu_cursor < PCF8574_ROWS-1) {
								device.menu_cursor++;
							}
						}
						// Draw menu on the LCD line by line
						for(uint8_t i=0; i < PCF8574_ROWS; i++) {
    1034:	1f 5f       	subi	r17, 0xFF	; 255
    1036:	14 30       	cpi	r17, 0x04	; 4
    1038:	c1 f6       	brne	.-80     	; 0xfea <FSM_LCD_Process+0x372>
							// Draw subcategory symbol
							FSM_PCF8574_GoToXY(i,PCF8574_COLS-2);
							FSM_PCF8574_AddStringFromFlash(MENU_GetChildMenuSymbolByShift(shift));
						}
						// Store last menu item pointer
						last_menu_item = selected_menu_item;
    103a:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <selected_menu_item>
    103e:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <selected_menu_item+0x1>
    1042:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <last_menu_item+0x1>
    1046:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <last_menu_item>
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <FSM_LCD_Process+0x3d8>
					}
					break;
				}

				default: {
					FSM_PCF8574_Clear();
    104c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <FSM_PCF8574_Clear>
					break;
				}
			}
			// Flush FSM timer
			ResetTimer(TIMER_LCD);
    1050:	82 e0       	ldi	r24, 0x02	; 2
    1052:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <ResetTimer>
			// Goto idle state
			FSM_state = FSM_LCD_STATE_IDLE;
    1056:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <FSM_state>
			return;
    105a:	12 c0       	rjmp	.+36     	; 0x1080 <FSM_LCD_Process+0x408>
		}

		/* Default work state */
		case FSM_LCD_STATE_IDLE: {
			if(GetTimer(TIMER_LCD) >= LCD_REFRESH_PERIOD || GetMessage(MSG_LCD_REFRESH_DISPLAY)) {
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    1062:	84 3f       	cpi	r24, 0xF4	; 244
    1064:	91 40       	sbci	r25, 0x01	; 1
    1066:	38 f0       	brcs	.+14     	; 0x1076 <FSM_LCD_Process+0x3fe>
				// Set next FSM state
				FSM_state = FSM_LCD_STATE_REFRESH_SCREEN;
    1068:	87 e0       	ldi	r24, 0x07	; 7
    106a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <FSM_state>
				ResetTimer(TIMER_LCD);
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <ResetTimer>
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <FSM_LCD_Process+0x408>
			return;
		}

		/* Default work state */
		case FSM_LCD_STATE_IDLE: {
			if(GetTimer(TIMER_LCD) >= LCD_REFRESH_PERIOD || GetMessage(MSG_LCD_REFRESH_DISPLAY)) {
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <GetMessage>
    107c:	81 11       	cpse	r24, r1
    107e:	f4 cf       	rjmp	.-24     	; 0x1068 <FSM_LCD_Process+0x3f0>
			return;
		}

		default: break;
	}
}
    1080:	26 96       	adiw	r28, 0x06	; 6
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <FSM_LEDS_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_LEDS_Init(void)
{
	// Set next FSM state
	FSM_state = FSM_LEDS_STATE_IDLE;
    1096:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <FSM_state>
	// Initialize leds bitmap
	led_bitmap=0;
    109a:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <led_bitmap>
    109e:	08 95       	ret

000010a0 <FSM_LEDS_Process>:
}

void FSM_LEDS_Process(void)
{
    10a0:	cf 93       	push	r28
	switch(FSM_state) {
    10a2:	c0 91 b5 01 	lds	r28, 0x01B5	; 0x8001b5 <FSM_state>
    10a6:	c1 30       	cpi	r28, 0x01	; 1
    10a8:	29 f0       	breq	.+10     	; 0x10b4 <FSM_LEDS_Process+0x14>
    10aa:	a8 f1       	brcs	.+106    	; 0x1116 <FSM_LEDS_Process+0x76>
    10ac:	c2 30       	cpi	r28, 0x02	; 2
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <FSM_LEDS_Process+0x12>
    10b0:	53 c0       	rjmp	.+166    	; 0x1158 <FSM_LEDS_Process+0xb8>
    10b2:	b6 c0       	rjmp	.+364    	; 0x1220 <FSM_LEDS_Process+0x180>

		case FSM_LEDS_PGM_STARTUP: {

			if(GetBCMessage(MSG_BC_SYSTEM_STARTUP_COMPLETE)) {
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <GetBCMessage>
    10ba:	88 23       	and	r24, r24
    10bc:	31 f0       	breq	.+12     	; 0x10ca <FSM_LEDS_Process+0x2a>
				// Set next FSM state
				FSM_state = FSM_LEDS_STATE_IDLE;
    10be:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <FSM_state>
				// Turn OFF RED LED
				LED_RED_OFF();
    10c2:	2a 98       	cbi	0x05, 2	; 5
				// Turn OFF YELLOW LED
				LED_YELLOW_OFF();
    10c4:	29 98       	cbi	0x05, 1	; 5
				// Turn OFF GREEN LED
				LED_GRN_OFF();
    10c6:	28 98       	cbi	0x05, 0	; 5
				return;
    10c8:	ab c0       	rjmp	.+342    	; 0x1220 <FSM_LEDS_Process+0x180>
			}

			if(GetTimer(TIMER_LEDS) >= LEDS_CHANGE_PERIOD) {
    10ca:	88 e0       	ldi	r24, 0x08	; 8
    10cc:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    10d0:	84 3f       	cpi	r24, 0xF4	; 244
    10d2:	91 40       	sbci	r25, 0x01	; 1
    10d4:	08 f4       	brcc	.+2      	; 0x10d8 <FSM_LEDS_Process+0x38>
    10d6:	a4 c0       	rjmp	.+328    	; 0x1220 <FSM_LEDS_Process+0x180>
				// Change color mechanism
				if(led_bitmap++ > 2) { led_bitmap=1;}
    10d8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <led_bitmap>
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	20 f4       	brcc	.+8      	; 0x10e8 <FSM_LEDS_Process+0x48>
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <led_bitmap>
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <FSM_LEDS_Process+0x4c>
    10e8:	c0 93 b4 01 	sts	0x01B4, r28	; 0x8001b4 <led_bitmap>

				switch(led_bitmap) {
    10ec:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <led_bitmap>
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	31 f0       	breq	.+12     	; 0x1100 <FSM_LEDS_Process+0x60>
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	39 f0       	breq	.+14     	; 0x1106 <FSM_LEDS_Process+0x66>
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	49 f4       	brne	.+18     	; 0x110e <FSM_LEDS_Process+0x6e>
					// Switch ON RED
					case 1: {
						LED_RED_ON();
    10fc:	2a 9a       	sbi	0x05, 2	; 5
    10fe:	08 c0       	rjmp	.+16     	; 0x1110 <FSM_LEDS_Process+0x70>
						LED_GRN_OFF();
						break;
					}
					// Switch ON YELLOW
					case 2: {
						LED_RED_OFF();
    1100:	2a 98       	cbi	0x05, 2	; 5
						LED_YELLOW_ON();
    1102:	29 9a       	sbi	0x05, 1	; 5
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <FSM_LEDS_Process+0x72>
						LED_GRN_OFF();
						break;
					}
					// Switch ON GREEN
					case 3: {
						LED_RED_OFF();
    1106:	2a 98       	cbi	0x05, 2	; 5
						LED_YELLOW_OFF();
    1108:	29 98       	cbi	0x05, 1	; 5
						LED_GRN_ON();
    110a:	28 9a       	sbi	0x05, 0	; 5
						break;
    110c:	0c c0       	rjmp	.+24     	; 0x1126 <FSM_LEDS_Process+0x86>
					}
					// Switch OFF all leds
					default: {
						LED_RED_OFF();
    110e:	2a 98       	cbi	0x05, 2	; 5
						LED_YELLOW_OFF();
    1110:	29 98       	cbi	0x05, 1	; 5
						LED_GRN_OFF();
    1112:	28 98       	cbi	0x05, 0	; 5
						break;
    1114:	08 c0       	rjmp	.+16     	; 0x1126 <FSM_LEDS_Process+0x86>
			return;
		}

		case FSM_LEDS_STATE_IDLE: {

			if(GetBCMessage(MSG_BC_SYSTEM_STARTUP_RUN)) {
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <GetBCMessage>
    111c:	88 23       	and	r24, r24
    111e:	29 f0       	breq	.+10     	; 0x112a <FSM_LEDS_Process+0x8a>
				// Set next FSM state
				FSM_state = FSM_LEDS_PGM_STARTUP;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <FSM_state>
				// Reset FSM timer
				ResetTimer(TIMER_LEDS);
    1126:	88 e0       	ldi	r24, 0x08	; 8
    1128:	78 c0       	rjmp	.+240    	; 0x121a <FSM_LEDS_Process+0x17a>
				return;
			}

			if(GetMessage(MSG_LEDS_PROCESSING)) {
    112a:	88 e0       	ldi	r24, 0x08	; 8
    112c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <GetMessage>
    1130:	88 23       	and	r24, r24
    1132:	09 f4       	brne	.+2      	; 0x1136 <FSM_LEDS_Process+0x96>
    1134:	75 c0       	rjmp	.+234    	; 0x1220 <FSM_LEDS_Process+0x180>
				//
				led_params = GetMessageParam(MSG_LEDS_PROCESSING);
    1136:	88 e0       	ldi	r24, 0x08	; 8
    1138:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <GetMessageParam>
    113c:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <led_params+0x1>
    1140:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <led_params>
				//
				led_params->_active = 1;
    1144:	21 e0       	ldi	r18, 0x01	; 1
    1146:	fc 01       	movw	r30, r24
    1148:	20 83       	st	Z, r18
				//
				FSM_state = FSM_LEDS_PGM_PROCESSING;
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <FSM_state>
				//
				ResetTimer(TIMER_LEDS);
    1150:	88 e0       	ldi	r24, 0x08	; 8
    1152:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <ResetTimer>
    1156:	60 c0       	rjmp	.+192    	; 0x1218 <FSM_LEDS_Process+0x178>
		}

		case FSM_LEDS_PGM_PROCESSING: {

			if(
				(led_params->glow_time_ms != 0xFFFF && GetTimer(TIMER_LEDS) >= led_params->glow_time_ms) ||
    1158:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    115c:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
			return;
		}

		case FSM_LEDS_PGM_PROCESSING: {

			if(
    1160:	84 81       	ldd	r24, Z+4	; 0x04
    1162:	95 81       	ldd	r25, Z+5	; 0x05
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	31 f4       	brne	.+12     	; 0x1174 <FSM_LEDS_Process+0xd4>
				(led_params->glow_time_ms != 0xFFFF && GetTimer(TIMER_LEDS) >= led_params->glow_time_ms) ||
				GetMessage(MSG_LEDS_TURN_OFF)
    1168:	89 e0       	ldi	r24, 0x09	; 9
    116a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <GetMessage>
		}

		case FSM_LEDS_PGM_PROCESSING: {

			if(
				(led_params->glow_time_ms != 0xFFFF && GetTimer(TIMER_LEDS) >= led_params->glow_time_ms) ||
    116e:	88 23       	and	r24, r24
    1170:	99 f0       	breq	.+38     	; 0x1198 <FSM_LEDS_Process+0xf8>
    1172:	0c c0       	rjmp	.+24     	; 0x118c <FSM_LEDS_Process+0xec>
    1174:	88 e0       	ldi	r24, 0x08	; 8
    1176:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    117a:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    117e:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    1182:	24 81       	ldd	r18, Z+4	; 0x04
    1184:	35 81       	ldd	r19, Z+5	; 0x05
    1186:	82 17       	cp	r24, r18
    1188:	93 07       	cpc	r25, r19
    118a:	70 f3       	brcs	.-36     	; 0x1168 <FSM_LEDS_Process+0xc8>
				GetMessage(MSG_LEDS_TURN_OFF)
			) {
				//
				LED_RED_OFF();
    118c:	2a 98       	cbi	0x05, 2	; 5
				LED_YELLOW_OFF();
    118e:	29 98       	cbi	0x05, 1	; 5
				LED_GRN_OFF();
    1190:	28 98       	cbi	0x05, 0	; 5
				//
				FSM_state = FSM_LEDS_STATE_IDLE;
    1192:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <FSM_state>
				return;
    1196:	44 c0       	rjmp	.+136    	; 0x1220 <FSM_LEDS_Process+0x180>
			}


			if(led_params->_active) {
    1198:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    119c:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    11a0:	80 81       	ld	r24, Z
    11a2:	88 23       	and	r24, r24
    11a4:	19 f1       	breq	.+70     	; 0x11ec <FSM_LEDS_Process+0x14c>
				switch(led_params->color) {
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	51 f0       	breq	.+20     	; 0x11c0 <FSM_LEDS_Process+0x120>
    11ac:	30 f0       	brcs	.+12     	; 0x11ba <FSM_LEDS_Process+0x11a>
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	51 f4       	brne	.+20     	; 0x11c6 <FSM_LEDS_Process+0x126>
						LED_GRN_OFF();
						break;
					}

					case GREEN: {
						LED_RED_OFF();
    11b2:	2a 98       	cbi	0x05, 2	; 5
						LED_YELLOW_OFF();
    11b4:	29 98       	cbi	0x05, 1	; 5
						LED_GRN_ON();
    11b6:	28 9a       	sbi	0x05, 0	; 5
						break;
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <FSM_LEDS_Process+0x126>

			if(led_params->_active) {
				switch(led_params->color) {

					case RED: {
						LED_RED_ON();
    11ba:	2a 9a       	sbi	0x05, 2	; 5
						LED_YELLOW_OFF();
    11bc:	29 98       	cbi	0x05, 1	; 5
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <FSM_LEDS_Process+0x124>
						LED_GRN_OFF();
						break;
					}

					case YELLOW: {
						LED_RED_OFF();
    11c0:	2a 98       	cbi	0x05, 2	; 5
						LED_YELLOW_ON();
    11c2:	29 9a       	sbi	0x05, 1	; 5
						LED_GRN_OFF();
    11c4:	28 98       	cbi	0x05, 0	; 5
						break;
					}
					default: break;
				}

				if(led_params->_blinking && GetTimer(TIMER_LEDS_BLINK) >= LEDS_TURN_ON_PERIOD) {
    11c6:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    11ca:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    11ce:	81 81       	ldd	r24, Z+1	; 0x01
    11d0:	88 23       	and	r24, r24
    11d2:	31 f1       	breq	.+76     	; 0x1220 <FSM_LEDS_Process+0x180>
    11d4:	89 e0       	ldi	r24, 0x09	; 9
    11d6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    11da:	84 3f       	cpi	r24, 0xF4	; 244
    11dc:	91 40       	sbci	r25, 0x01	; 1
    11de:	00 f1       	brcs	.+64     	; 0x1220 <FSM_LEDS_Process+0x180>
					//
					led_params->_active = 0;
    11e0:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    11e4:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    11e8:	10 82       	st	Z, r1
    11ea:	16 c0       	rjmp	.+44     	; 0x1218 <FSM_LEDS_Process+0x178>
					ResetTimer(TIMER_LEDS_BLINK);
				}

			} else {
				//
				LED_RED_OFF();
    11ec:	2a 98       	cbi	0x05, 2	; 5
				LED_YELLOW_OFF();
    11ee:	29 98       	cbi	0x05, 1	; 5
				LED_GRN_OFF();
    11f0:	28 98       	cbi	0x05, 0	; 5


				if(led_params->_blinking && GetTimer(TIMER_LEDS_BLINK) >= LEDS_TURN_OFF_PERIOD) {
    11f2:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    11f6:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    11fa:	81 81       	ldd	r24, Z+1	; 0x01
    11fc:	88 23       	and	r24, r24
    11fe:	81 f0       	breq	.+32     	; 0x1220 <FSM_LEDS_Process+0x180>
    1200:	89 e0       	ldi	r24, 0x09	; 9
    1202:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    1206:	84 3f       	cpi	r24, 0xF4	; 244
    1208:	91 40       	sbci	r25, 0x01	; 1
    120a:	50 f0       	brcs	.+20     	; 0x1220 <FSM_LEDS_Process+0x180>
					//
					led_params->_active = 1;
    120c:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <led_params>
    1210:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <led_params+0x1>
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	80 83       	st	Z, r24
					//
					ResetTimer(TIMER_LEDS_BLINK);
    1218:	89 e0       	ldi	r24, 0x09	; 9
		}

		default: break;
	}

}
    121a:	cf 91       	pop	r28

				if(led_params->_blinking && GetTimer(TIMER_LEDS_BLINK) >= LEDS_TURN_OFF_PERIOD) {
					//
					led_params->_active = 1;
					//
					ResetTimer(TIMER_LEDS_BLINK);
    121c:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <ResetTimer>
		}

		default: break;
	}

}
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <FSM_MHZ19B_ReadDataComplete>:
	return calc_crc;
}

void FSM_MHZ19B_ReadDataComplete(void)
{
	SendMessageWOParam(MSG_MHZ19B_DATA_RECEIVED);
    1224:	84 e0       	ldi	r24, 0x04	; 4
    1226:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <SendMessageWOParam>

0000122a <FSM_MHZ19B_ReadDataError>:
}

void FSM_MHZ19B_ReadDataError(void)
{
	SendMessageWOParam(MSG_MHZ19B_DATA_RECEIVE_ERROR);
    122a:	85 e0       	ldi	r24, 0x05	; 5
    122c:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <SendMessageWOParam>

00001230 <FSM_MHZ19B_Init>:

/* Initialize FSM */
void FSM_MHZ19B_Init(void)
{
	// Flush flags
	mhz19b._presence=0;
    1230:	e9 e9       	ldi	r30, 0x99	; 153
    1232:	f3 e0       	ldi	r31, 0x03	; 3
    1234:	10 82       	st	Z, r1
	mhz19b._error=0;
    1236:	11 82       	std	Z+1, r1	; 0x01
	_first_run=1;
	// Goto initialization FSM
	FSM_state = FSM_MHZ19B_STATE_STARTUP_INIT;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <FSM_state>
    123e:	08 95       	ret

00001240 <FSM_MHZ19B_crc>:
		default: break;
	}
}

uint8_t FSM_MHZ19B_crc(uint8_t *buffer, uint8_t length)
{
    1240:	fc 01       	movw	r30, r24
    1242:	31 96       	adiw	r30, 0x01	; 1
	uint8_t calc_crc=0;
	for(uint8_t i=1; i<length; i++) {
    1244:	91 e0       	ldi	r25, 0x01	; 1
	}
}

uint8_t FSM_MHZ19B_crc(uint8_t *buffer, uint8_t length)
{
	uint8_t calc_crc=0;
    1246:	80 e0       	ldi	r24, 0x00	; 0
	for(uint8_t i=1; i<length; i++) {
    1248:	96 17       	cp	r25, r22
    124a:	20 f4       	brcc	.+8      	; 0x1254 <FSM_MHZ19B_crc+0x14>
		calc_crc += buffer[i];
    124c:	21 91       	ld	r18, Z+
    124e:	82 0f       	add	r24, r18
}

uint8_t FSM_MHZ19B_crc(uint8_t *buffer, uint8_t length)
{
	uint8_t calc_crc=0;
	for(uint8_t i=1; i<length; i++) {
    1250:	9f 5f       	subi	r25, 0xFF	; 255
    1252:	fa cf       	rjmp	.-12     	; 0x1248 <FSM_MHZ19B_crc+0x8>
		calc_crc += buffer[i];
	}
	calc_crc = ~calc_crc + 1;
	return calc_crc;
}
    1254:	81 95       	neg	r24
    1256:	08 95       	ret

00001258 <FSM_MHZ19B_Process>:
	FSM_state = FSM_MHZ19B_STATE_STARTUP_INIT;
}

/* Processing FSM */
void FSM_MHZ19B_Process(void)
{
    1258:	cf 92       	push	r12
    125a:	df 92       	push	r13
    125c:	ef 92       	push	r14
    125e:	ff 92       	push	r15
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	29 97       	sbiw	r28, 0x09	; 9
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
	switch(FSM_state) {
    1278:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <FSM_state>
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <FSM_MHZ19B_Process+0x48>
    1280:	08 f1       	brcs	.+66     	; 0x12c4 <FSM_MHZ19B_Process+0x6c>
    1282:	83 30       	cpi	r24, 0x03	; 3
    1284:	09 f4       	brne	.+2      	; 0x1288 <FSM_MHZ19B_Process+0x30>
    1286:	45 c0       	rjmp	.+138    	; 0x1312 <FSM_MHZ19B_Process+0xba>
    1288:	84 30       	cpi	r24, 0x04	; 4
    128a:	09 f0       	breq	.+2      	; 0x128e <FSM_MHZ19B_Process+0x36>
    128c:	88 c0       	rjmp	.+272    	; 0x139e <FSM_MHZ19B_Process+0x146>
    128e:	8e 01       	movw	r16, r28
    1290:	0f 5f       	subi	r16, 0xFF	; 255
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
    1294:	6e 01       	movw	r12, r28
    1296:	89 e0       	ldi	r24, 0x09	; 9
    1298:	c8 0e       	add	r12, r24
    129a:	d1 1c       	adc	r13, r1
    129c:	78 01       	movw	r14, r16
    129e:	5a c0       	rjmp	.+180    	; 0x1354 <FSM_MHZ19B_Process+0xfc>
		/* Send initialization command to the MH-Z19B */
		case FSM_MHZ19B_STATE_STARTUP_INIT: {
			UART_RX_INTERRUPT_DISABLE();
    12a0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    12a4:	8f 76       	andi	r24, 0x6F	; 111
    12a6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
			// Sending set range CMD to the sensor
			UART_SendDataFromFlash(cmd_set_range, 9);
    12aa:	69 e0       	ldi	r22, 0x09	; 9
    12ac:	82 ea       	ldi	r24, 0xA2	; 162
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 ad 03 	call	0x75a	; 0x75a <UART_SendDataFromFlash>
			// Sending ABC calibration settings to the sensor
			UART_SendDataFromFlash(cmd_set_abc, 9);
    12b4:	69 e0       	ldi	r22, 0x09	; 9
    12b6:	89 e9       	ldi	r24, 0x99	; 153
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 ad 03 	call	0x75a	; 0x75a <UART_SendDataFromFlash>
			// Goto waiting timeout before other actions
			FSM_state = FSM_MHZ19B_STATE_IDLE;
    12be:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <FSM_state>
    12c2:	16 c0       	rjmp	.+44     	; 0x12f0 <FSM_MHZ19B_Process+0x98>
			return;
		}
		/* Main state */
		case FSM_MHZ19B_STATE_IDLE: {
			/* Prepare read data from MH-Z19B by first run or timeout 20s */
			if(GetTimer(TIMER_MHZ19B) > MHZ19B_REFRESH_PERIOD) {
    12c4:	85 e0       	ldi	r24, 0x05	; 5
    12c6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    12ca:	81 32       	cpi	r24, 0x21	; 33
    12cc:	9e 44       	sbci	r25, 0x4E	; 78
    12ce:	08 f4       	brcc	.+2      	; 0x12d2 <FSM_MHZ19B_Process+0x7a>
    12d0:	66 c0       	rjmp	.+204    	; 0x139e <FSM_MHZ19B_Process+0x146>
				// Get data command for MH-Z19B
				UART_SendDataFromFlash(cmd_get_data, 9);
    12d2:	69 e0       	ldi	r22, 0x09	; 9
    12d4:	80 e9       	ldi	r24, 0x90	; 144
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 ad 03 	call	0x75a	; 0x75a <UART_SendDataFromFlash>
				// Setup data length and process handlers
				UART_DefferedReadData(9, &FSM_MHZ19B_ReadDataComplete, &FSM_MHZ19B_ReadDataError);
    12dc:	45 e1       	ldi	r20, 0x15	; 21
    12de:	59 e0       	ldi	r21, 0x09	; 9
    12e0:	62 e1       	ldi	r22, 0x12	; 18
    12e2:	79 e0       	ldi	r23, 0x09	; 9
    12e4:	89 e0       	ldi	r24, 0x09	; 9
    12e6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <UART_DefferedReadData>
				// Goto waiting data from MH-Z19B
				FSM_state = FSM_MHZ19B_STATE_GET_DATA;
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <FSM_state>
				ResetTimer(TIMER_MHZ19B);
    12f0:	85 e0       	ldi	r24, 0x05	; 5
			FSM_state = FSM_MHZ19B_STATE_IDLE;
			return;
		}
		default: break;
	}
}
    12f2:	29 96       	adiw	r28, 0x09	; 9
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	df 90       	pop	r13
    130c:	cf 90       	pop	r12
				UART_SendDataFromFlash(cmd_get_data, 9);
				// Setup data length and process handlers
				UART_DefferedReadData(9, &FSM_MHZ19B_ReadDataComplete, &FSM_MHZ19B_ReadDataError);
				// Goto waiting data from MH-Z19B
				FSM_state = FSM_MHZ19B_STATE_GET_DATA;
				ResetTimer(TIMER_MHZ19B);
    130e:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <ResetTimer>
		}

		/* Waiting data and processing */
		case FSM_MHZ19B_STATE_GET_DATA: {
			// Data was received without errors
			if(GetMessage(MSG_MHZ19B_DATA_RECEIVED)) {
    1312:	84 e0       	ldi	r24, 0x04	; 4
    1314:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <GetMessage>
    1318:	88 23       	and	r24, r24
    131a:	31 f0       	breq	.+12     	; 0x1328 <FSM_MHZ19B_Process+0xd0>
				// Flush error flag
				mhz19b._error=0;
    131c:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <mhz19b+0x1>
				// Goto data processing state
				FSM_state = FSM_MHZ19B_STATE_PROCESSING_DATA;
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <FSM_state>
				return;
    1326:	3b c0       	rjmp	.+118    	; 0x139e <FSM_MHZ19B_Process+0x146>
			}
			// Data was not received correctly
			if(GetMessage(MSG_MHZ19B_DATA_RECEIVE_ERROR)) {
    1328:	85 e0       	ldi	r24, 0x05	; 5
    132a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <GetMessage>
    132e:	88 23       	and	r24, r24
    1330:	41 f0       	breq	.+16     	; 0x1342 <FSM_MHZ19B_Process+0xea>
				// Set error flag
				mhz19b._error=1;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <mhz19b+0x1>
				// Set error handle - DATA CORRUPT
				mhz19b.error=MHZ19B_ERROR_DATA_CORRUPT;
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <mhz19b+0x2>
				FSM_state = FSM_MHZ19B_STATE_IDLE;
    133e:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <FSM_state>
			}
			// Data was not received to the timeout end
			if(GetTimer(TIMER_MHZ19B) > MHZ19B_REFRESH_TIMEOUT) {
    1342:	85 e0       	ldi	r24, 0x05	; 5
    1344:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    1348:	c3 97       	sbiw	r24, 0x33	; 51
    134a:	48 f1       	brcs	.+82     	; 0x139e <FSM_MHZ19B_Process+0x146>
				// Set error flag
				mhz19b._error=1;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <mhz19b+0x1>
    1352:	15 c0       	rjmp	.+42     	; 0x137e <FSM_MHZ19B_Process+0x126>
		case FSM_MHZ19B_STATE_PROCESSING_DATA: {
			uint8_t buff[9];
			uint8_t curr_crc;
			// Copy received data to temporary buffer
			for(uint8_t i=0; i<8; i++) {
				buff[i] = UART_Read();
    1354:	0e 94 42 04 	call	0x884	; 0x884 <UART_Read>
    1358:	f8 01       	movw	r30, r16
    135a:	81 93       	st	Z+, r24
    135c:	8f 01       	movw	r16, r30
		/* Processing received data */
		case FSM_MHZ19B_STATE_PROCESSING_DATA: {
			uint8_t buff[9];
			uint8_t curr_crc;
			// Copy received data to temporary buffer
			for(uint8_t i=0; i<8; i++) {
    135e:	ec 15       	cp	r30, r12
    1360:	fd 05       	cpc	r31, r13
    1362:	c1 f7       	brne	.-16     	; 0x1354 <FSM_MHZ19B_Process+0xfc>
				buff[i] = UART_Read();
			}
			curr_crc = UART_Read();
    1364:	0e 94 42 04 	call	0x884	; 0x884 <UART_Read>
    1368:	18 2f       	mov	r17, r24
			// Check CRC match
			if(curr_crc != FSM_MHZ19B_crc(buff, 8)) {
    136a:	68 e0       	ldi	r22, 0x08	; 8
    136c:	c7 01       	movw	r24, r14
    136e:	0e 94 20 09 	call	0x1240	; 0x1240 <FSM_MHZ19B_crc>
    1372:	18 17       	cp	r17, r24
    1374:	39 f0       	breq	.+14     	; 0x1384 <FSM_MHZ19B_Process+0x12c>
				// Set error flag
				mhz19b._error=1;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <mhz19b+0x1>
				// Set error handle - CRC ERROR
				mhz19b.error=MHZ19B_ERROR_CRC;
    137c:	84 e0       	ldi	r24, 0x04	; 4
    137e:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <mhz19b+0x2>
    1382:	0b c0       	rjmp	.+22     	; 0x139a <FSM_MHZ19B_Process+0x142>
				FSM_state = FSM_MHZ19B_STATE_IDLE;
				return;
			}
			// Get sensor value
			mhz19b.value = ((buff[2]<<8) + buff[3]);
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	98 2f       	mov	r25, r24
    138a:	88 27       	eor	r24, r24
    138c:	2c 81       	ldd	r18, Y+4	; 0x04
    138e:	82 0f       	add	r24, r18
    1390:	91 1d       	adc	r25, r1
    1392:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <mhz19b+0x4>
    1396:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <mhz19b+0x3>
			FSM_state = FSM_MHZ19B_STATE_IDLE;
    139a:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <FSM_state>
			return;
		}
		default: break;
	}
}
    139e:	29 96       	adiw	r28, 0x09	; 9
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	df 90       	pop	r13
    13b8:	cf 90       	pop	r12
    13ba:	08 95       	ret

000013bc <FSM_PCF8574_Init>:

/* Add char from flash to LCD */
void FSM_PCF8574_AddRAWCharFromFlash(const char *chr)
{
	char c = pgm_read_byte(*chr);
	FSM_PCF8574_AddRAWChar(c);
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <FSM_state>
    13c2:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <ResetTimer>

000013c6 <FSM_PCF8574_AddByteToQueue>:
    13c6:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <pcf8574+0x4>
    13ca:	90 3a       	cpi	r25, 0xA0	; 160
    13cc:	38 f5       	brcc	.+78     	; 0x141c <FSM_PCF8574_AddByteToQueue+0x56>
    13ce:	5f b7       	in	r21, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <pcf8574+0x2>
    13d6:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <pcf8574+0x4>
    13da:	e9 2f       	mov	r30, r25
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	df 01       	movw	r26, r30
    13e0:	aa 0f       	add	r26, r26
    13e2:	bb 1f       	adc	r27, r27
    13e4:	a9 5b       	subi	r26, 0xB9	; 185
    13e6:	bd 4f       	sbci	r27, 0xFD	; 253
    13e8:	15 96       	adiw	r26, 0x05	; 5
    13ea:	8c 93       	st	X, r24
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	e3 5b       	subi	r30, 0xB3	; 179
    13f2:	fd 4f       	sbci	r31, 0xFD	; 253
    13f4:	46 2b       	or	r20, r22
    13f6:	2f 73       	andi	r18, 0x3F	; 63
    13f8:	42 2b       	or	r20, r18
    13fa:	40 83       	st	Z, r20
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	83 0f       	add	r24, r19
    1400:	90 3a       	cpi	r25, 0xA0	; 160
    1402:	38 f4       	brcc	.+14     	; 0x1412 <FSM_PCF8574_AddByteToQueue+0x4c>
    1404:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <pcf8574+0x4>
    1408:	9f 5f       	subi	r25, 0xFF	; 255
    140a:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <pcf8574+0x2>
    140e:	5f bf       	out	0x3f, r21	; 63
    1410:	08 95       	ret
    1412:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <pcf8574+0x2>
    1416:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <pcf8574+0x4>
    141a:	f9 cf       	rjmp	.-14     	; 0x140e <FSM_PCF8574_AddByteToQueue+0x48>
    141c:	08 95       	ret

0000141e <FSM_PCF8574_Process>:
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	00 d0       	rcall	.+0      	; 0x1428 <FSM_PCF8574_Process+0xa>
    1428:	00 d0       	rcall	.+0      	; 0x142a <FSM_PCF8574_Process+0xc>
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <FSM_state>
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	09 f4       	brne	.+2      	; 0x1438 <FSM_PCF8574_Process+0x1a>
    1436:	92 c0       	rjmp	.+292    	; 0x155c <FSM_PCF8574_Process+0x13e>
    1438:	30 f0       	brcs	.+12     	; 0x1446 <FSM_PCF8574_Process+0x28>
    143a:	82 30       	cpi	r24, 0x02	; 2
    143c:	61 f0       	breq	.+24     	; 0x1456 <FSM_PCF8574_Process+0x38>
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	09 f4       	brne	.+2      	; 0x1444 <FSM_PCF8574_Process+0x26>
    1442:	58 c0       	rjmp	.+176    	; 0x14f4 <FSM_PCF8574_Process+0xd6>
    1444:	da c0       	rjmp	.+436    	; 0x15fa <FSM_PCF8574_Process+0x1dc>
    1446:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <pcf8574+0x4>
    144a:	88 23       	and	r24, r24
    144c:	09 f4       	brne	.+2      	; 0x1450 <FSM_PCF8574_Process+0x32>
    144e:	d5 c0       	rjmp	.+426    	; 0x15fa <FSM_PCF8574_Process+0x1dc>
    1450:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <pcf8574_byte+0x2>
    1454:	81 c0       	rjmp	.+258    	; 0x1558 <FSM_PCF8574_Process+0x13a>
    1456:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c>
    145a:	88 23       	and	r24, r24
    145c:	21 f0       	breq	.+8      	; 0x1466 <FSM_PCF8574_Process+0x48>
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <ResetTimer>
    1464:	ca c0       	rjmp	.+404    	; 0x15fa <FSM_PCF8574_Process+0x1dc>
    1466:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pcf8574_byte+0x2>
    146a:	81 11       	cpse	r24, r1
    146c:	05 c0       	rjmp	.+10     	; 0x1478 <FSM_PCF8574_Process+0x5a>
    146e:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <pcf8574+0x4>
    1472:	81 11       	cpse	r24, r1
    1474:	0b c0       	rjmp	.+22     	; 0x148c <FSM_PCF8574_Process+0x6e>
    1476:	39 c0       	rjmp	.+114    	; 0x14ea <FSM_PCF8574_Process+0xcc>
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    147e:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <pcf8574_byte+0x2>
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	28 17       	cp	r18, r24
    1486:	39 07       	cpc	r19, r25
    1488:	90 f3       	brcs	.-28     	; 0x146e <FSM_PCF8574_Process+0x50>
    148a:	b7 c0       	rjmp	.+366    	; 0x15fa <FSM_PCF8574_Process+0x1dc>
    148c:	81 50       	subi	r24, 0x01	; 1
    148e:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <pcf8574+0x4>
    1492:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <pcf8574+0x3>
    1496:	82 2f       	mov	r24, r18
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	fc 01       	movw	r30, r24
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	e3 5b       	subi	r30, 0xB3	; 179
    14a2:	fd 4f       	sbci	r31, 0xFD	; 253
    14a4:	30 81       	ld	r19, Z
    14a6:	43 2f       	mov	r20, r19
    14a8:	40 78       	andi	r20, 0x80	; 128
    14aa:	40 93 b8 01 	sts	0x01B8, r20	; 0x8001b8 <pcf8574_byte+0x1>
    14ae:	43 2f       	mov	r20, r19
    14b0:	40 74       	andi	r20, 0x40	; 64
    14b2:	40 93 b7 01 	sts	0x01B7, r20	; 0x8001b7 <pcf8574_byte>
    14b6:	3f 73       	andi	r19, 0x3F	; 63
    14b8:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <pcf8574_byte+0x2>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	fc 01       	movw	r30, r24
    14c2:	e9 5b       	subi	r30, 0xB9	; 185
    14c4:	fd 4f       	sbci	r31, 0xFD	; 253
    14c6:	85 81       	ldd	r24, Z+5	; 0x05
    14c8:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <pcf8574_byte+0x3>
    14cc:	20 3a       	cpi	r18, 0xA0	; 160
    14ce:	20 f4       	brcc	.+8      	; 0x14d8 <FSM_PCF8574_Process+0xba>
    14d0:	2f 5f       	subi	r18, 0xFF	; 255
    14d2:	20 93 4a 02 	sts	0x024A, r18	; 0x80024a <pcf8574+0x3>
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <FSM_PCF8574_Process+0xbe>
    14d8:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <pcf8574+0x3>
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <pcf8574>
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <FSM_state>
    14e8:	88 c0       	rjmp	.+272    	; 0x15fa <FSM_PCF8574_Process+0x1dc>
    14ea:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <pcf8574>
    14ee:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <FSM_state>
    14f2:	83 c0       	rjmp	.+262    	; 0x15fa <FSM_PCF8574_Process+0x1dc>
    14f4:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c>
    14f8:	81 11       	cpse	r24, r1
    14fa:	7f c0       	rjmp	.+254    	; 0x15fa <FSM_PCF8574_Process+0x1dc>
    14fc:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <pcf8574_byte>
    1500:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <pcf8574_byte+0x3>
    1504:	68 2f       	mov	r22, r24
    1506:	62 95       	swap	r22
    1508:	60 7f       	andi	r22, 0xF0	; 240
    150a:	28 2f       	mov	r18, r24
    150c:	20 7f       	andi	r18, 0xF0	; 240
    150e:	70 91 b8 01 	lds	r23, 0x01B8	; 0x8001b8 <pcf8574_byte+0x1>
    1512:	fe 01       	movw	r30, r28
    1514:	31 96       	adiw	r30, 0x01	; 1
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	cf 01       	movw	r24, r30
    151a:	55 23       	and	r21, r21
    151c:	11 f0       	breq	.+4      	; 0x1522 <FSM_PCF8574_Process+0x104>
    151e:	42 30       	cpi	r20, 0x02	; 2
    1520:	a9 f0       	breq	.+42     	; 0x154c <FSM_PCF8574_Process+0x12e>
    1522:	3e ef       	ldi	r19, 0xFE	; 254
    1524:	34 0f       	add	r19, r20
    1526:	32 30       	cpi	r19, 0x02	; 2
    1528:	10 f0       	brcs	.+4      	; 0x152e <FSM_PCF8574_Process+0x110>
    152a:	20 83       	st	Z, r18
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <FSM_PCF8574_Process+0x112>
    152e:	60 83       	st	Z, r22
    1530:	70 38       	cpi	r23, 0x80	; 128
    1532:	19 f4       	brne	.+6      	; 0x153a <FSM_PCF8574_Process+0x11c>
    1534:	30 81       	ld	r19, Z
    1536:	31 60       	ori	r19, 0x01	; 1
    1538:	30 83       	st	Z, r19
    153a:	40 fd       	sbrc	r20, 0
    153c:	03 c0       	rjmp	.+6      	; 0x1544 <FSM_PCF8574_Process+0x126>
    153e:	30 81       	ld	r19, Z
    1540:	32 60       	ori	r19, 0x02	; 2
    1542:	30 83       	st	Z, r19
    1544:	4f 5f       	subi	r20, 0xFF	; 255
    1546:	31 96       	adiw	r30, 0x01	; 1
    1548:	44 30       	cpi	r20, 0x04	; 4
    154a:	39 f7       	brne	.-50     	; 0x151a <FSM_PCF8574_Process+0xfc>
    154c:	00 e0       	ldi	r16, 0x00	; 0
    154e:	10 e0       	ldi	r17, 0x00	; 0
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	60 e4       	ldi	r22, 0x40	; 64
    1554:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_TransmitTo>
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	c4 cf       	rjmp	.-120    	; 0x14e4 <FSM_PCF8574_Process+0xc6>
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    1562:	80 35       	cpi	r24, 0x50	; 80
    1564:	91 05       	cpc	r25, r1
    1566:	08 f4       	brcc	.+2      	; 0x156a <FSM_PCF8574_Process+0x14c>
    1568:	48 c0       	rjmp	.+144    	; 0x15fa <FSM_PCF8574_Process+0x1dc>
    156a:	8f b7       	in	r24, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	e7 e4       	ldi	r30, 0x47	; 71
    1570:	f2 e0       	ldi	r31, 0x02	; 2
    1572:	27 e8       	ldi	r18, 0x87	; 135
    1574:	33 e0       	ldi	r19, 0x03	; 3
    1576:	15 82       	std	Z+5, r1	; 0x05
    1578:	16 82       	std	Z+6, r1	; 0x06
    157a:	32 96       	adiw	r30, 0x02	; 2
    157c:	2e 17       	cp	r18, r30
    157e:	3f 07       	cpc	r19, r31
    1580:	d1 f7       	brne	.-12     	; 0x1576 <FSM_PCF8574_Process+0x158>
    1582:	8f bf       	out	0x3f, r24	; 63
    1584:	24 e1       	ldi	r18, 0x14	; 20
    1586:	40 e4       	ldi	r20, 0x40	; 64
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	80 e3       	ldi	r24, 0x30	; 48
    158c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    1590:	25 e0       	ldi	r18, 0x05	; 5
    1592:	40 e4       	ldi	r20, 0x40	; 64
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	80 e3       	ldi	r24, 0x30	; 48
    1598:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    159c:	21 e0       	ldi	r18, 0x01	; 1
    159e:	40 e4       	ldi	r20, 0x40	; 64
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	80 e3       	ldi	r24, 0x30	; 48
    15a4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	40 e4       	ldi	r20, 0x40	; 64
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	80 e2       	ldi	r24, 0x20	; 32
    15b0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	88 e2       	ldi	r24, 0x28	; 40
    15bc:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	88 e0       	ldi	r24, 0x08	; 8
    15c8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    15cc:	22 e0       	ldi	r18, 0x02	; 2
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	8c e0       	ldi	r24, 0x0C	; 12
    15e0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	86 e0       	ldi	r24, 0x06	; 6
    15ec:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    15f0:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <FSM_state>
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <SendBCMessage>
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	08 95       	ret

0000160c <FSM_PCF8574_CreateCharacterFromFlash>:
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	eb 01       	movw	r28, r22
    1616:	28 e0       	ldi	r18, 0x08	; 8
    1618:	82 9f       	mul	r24, r18
    161a:	c0 01       	movw	r24, r0
    161c:	11 24       	eor	r1, r1
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	80 64       	ori	r24, 0x40	; 64
    1626:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    162a:	8e 01       	movw	r16, r28
    162c:	08 5f       	subi	r16, 0xF8	; 248
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	fe 01       	movw	r30, r28
    1632:	84 91       	lpm	r24, Z
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	60 e8       	ldi	r22, 0x80	; 128
    163a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    163e:	21 96       	adiw	r28, 0x01	; 1
    1640:	c0 17       	cp	r28, r16
    1642:	d1 07       	cpc	r29, r17
    1644:	a9 f7       	brne	.-22     	; 0x1630 <FSM_PCF8574_CreateCharacterFromFlash+0x24>
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	80 e8       	ldi	r24, 0x80	; 128
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>

0000165a <FSM_PCF8574_GoToXY>:
    165a:	cf 93       	push	r28
    165c:	c8 2f       	mov	r28, r24
    165e:	80 ff       	sbrs	r24, 0
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <FSM_PCF8574_GoToXY+0xc>
    1662:	80 e4       	ldi	r24, 0x40	; 64
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <FSM_PCF8574_GoToXY+0xe>
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	c2 30       	cpi	r28, 0x02	; 2
    166a:	08 f0       	brcs	.+2      	; 0x166e <FSM_PCF8574_GoToXY+0x14>
    166c:	8c 5e       	subi	r24, 0xEC	; 236
    166e:	86 0f       	add	r24, r22
    1670:	21 e0       	ldi	r18, 0x01	; 1
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	80 68       	ori	r24, 0x80	; 128
    1678:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    167c:	c0 93 48 02 	sts	0x0248, r28	; 0x800248 <pcf8574+0x1>
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <FSM_PCF8574_AddString>:
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	8c 01       	movw	r16, r24
    168e:	f8 01       	movw	r30, r16
    1690:	c1 91       	ld	r28, Z+
    1692:	8f 01       	movw	r16, r30
    1694:	cc 23       	and	r28, r28
    1696:	39 f1       	breq	.+78     	; 0x16e6 <FSM_PCF8574_AddString+0x62>
    1698:	ca 30       	cpi	r28, 0x0A	; 10
    169a:	31 f0       	breq	.+12     	; 0x16a8 <FSM_PCF8574_AddString+0x24>
    169c:	cd 30       	cpi	r28, 0x0D	; 13
    169e:	71 f0       	breq	.+28     	; 0x16bc <FSM_PCF8574_AddString+0x38>
    16a0:	c9 30       	cpi	r28, 0x09	; 9
    16a2:	d1 f4       	brne	.+52     	; 0x16d8 <FSM_PCF8574_AddString+0x54>
    16a4:	d4 e0       	ldi	r29, 0x04	; 4
    16a6:	10 c0       	rjmp	.+32     	; 0x16c8 <FSM_PCF8574_AddString+0x44>
    16a8:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pcf8574+0x1>
    16ac:	84 30       	cpi	r24, 0x04	; 4
    16ae:	20 f4       	brcc	.+8      	; 0x16b8 <FSM_PCF8574_AddString+0x34>
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pcf8574+0x1>
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <FSM_PCF8574_AddString+0x38>
    16b8:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <pcf8574+0x1>
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pcf8574+0x1>
    16c2:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
    16c6:	e3 cf       	rjmp	.-58     	; 0x168e <FSM_PCF8574_AddString+0xa>
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	60 e8       	ldi	r22, 0x80	; 128
    16ce:	80 e2       	ldi	r24, 0x20	; 32
    16d0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    16d4:	d1 50       	subi	r29, 0x01	; 1
    16d6:	c1 f7       	brne	.-16     	; 0x16c8 <FSM_PCF8574_AddString+0x44>
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	60 e8       	ldi	r22, 0x80	; 128
    16de:	8c 2f       	mov	r24, r28
    16e0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    16e4:	d4 cf       	rjmp	.-88     	; 0x168e <FSM_PCF8574_AddString+0xa>
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	08 95       	ret

000016f0 <FSM_PCF8574_AddStringFromFlash>:
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	8c 01       	movw	r16, r24
    16fa:	f8 01       	movw	r30, r16
    16fc:	c4 91       	lpm	r28, Z
    16fe:	cc 23       	and	r28, r28
    1700:	49 f1       	breq	.+82     	; 0x1754 <FSM_PCF8574_AddStringFromFlash+0x64>
    1702:	ca 30       	cpi	r28, 0x0A	; 10
    1704:	31 f0       	breq	.+12     	; 0x1712 <FSM_PCF8574_AddStringFromFlash+0x22>
    1706:	cd 30       	cpi	r28, 0x0D	; 13
    1708:	71 f0       	breq	.+28     	; 0x1726 <FSM_PCF8574_AddStringFromFlash+0x36>
    170a:	c9 30       	cpi	r28, 0x09	; 9
    170c:	d1 f4       	brne	.+52     	; 0x1742 <FSM_PCF8574_AddStringFromFlash+0x52>
    170e:	d4 e0       	ldi	r29, 0x04	; 4
    1710:	10 c0       	rjmp	.+32     	; 0x1732 <FSM_PCF8574_AddStringFromFlash+0x42>
    1712:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pcf8574+0x1>
    1716:	84 30       	cpi	r24, 0x04	; 4
    1718:	20 f4       	brcc	.+8      	; 0x1722 <FSM_PCF8574_AddStringFromFlash+0x32>
    171a:	8f 5f       	subi	r24, 0xFF	; 255
    171c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pcf8574+0x1>
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <FSM_PCF8574_AddStringFromFlash+0x36>
    1722:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <pcf8574+0x1>
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pcf8574+0x1>
    172c:	0e 94 2d 0b 	call	0x165a	; 0x165a <FSM_PCF8574_GoToXY>
    1730:	0e c0       	rjmp	.+28     	; 0x174e <FSM_PCF8574_AddStringFromFlash+0x5e>
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	60 e8       	ldi	r22, 0x80	; 128
    1738:	80 e2       	ldi	r24, 0x20	; 32
    173a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    173e:	d1 50       	subi	r29, 0x01	; 1
    1740:	c1 f7       	brne	.-16     	; 0x1732 <FSM_PCF8574_AddStringFromFlash+0x42>
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	60 e8       	ldi	r22, 0x80	; 128
    1748:	8c 2f       	mov	r24, r28
    174a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
    174e:	0f 5f       	subi	r16, 0xFF	; 255
    1750:	1f 4f       	sbci	r17, 0xFF	; 255
    1752:	d3 cf       	rjmp	.-90     	; 0x16fa <FSM_PCF8574_AddStringFromFlash+0xa>
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	08 95       	ret

0000175e <FSM_PCF8574_AddRAWChar>:
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	60 e8       	ldi	r22, 0x80	; 128
    1764:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>

00001768 <FSM_PCF8574_Clear>:
}

/* Clear LCD display */
void FSM_PCF8574_Clear(void)
{
	FSM_PCF8574_AddByteToQueue(PCF8574_CMD_CLEAR_DISPLAY, PCF8574_COMMAND, PCF8574_BYTE_FULL, 2);
    1768:	22 e0       	ldi	r18, 0x02	; 2
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <FSM_PCF8574_AddByteToQueue>
	pcf8574.last_row=0;
    1774:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <pcf8574+0x1>
    1778:	08 95       	ret

0000177a <FSM_SYSTEM_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_SYSTEM_Init(void)
{
	// Set default FSM state
	FSM_state = FSM_SYSTEM_STATE_STARTUP;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <FSM_state>
	// Flush FSM timer
	ResetTimer(TIMER_SYSTEM);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <ResetTimer>

00001786 <FSM_SYSTEM_Process>:
}

void FSM_SYSTEM_Process(void)
{
	switch(FSM_state) {
    1786:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <FSM_state>
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	09 f4       	brne	.+2      	; 0x1790 <FSM_SYSTEM_Process+0xa>
    178e:	9a c0       	rjmp	.+308    	; 0x18c4 <FSM_SYSTEM_Process+0x13e>
    1790:	20 f0       	brcs	.+8      	; 0x179a <FSM_SYSTEM_Process+0x14>
    1792:	82 30       	cpi	r24, 0x02	; 2
    1794:	09 f4       	brne	.+2      	; 0x1798 <FSM_SYSTEM_Process+0x12>
    1796:	a3 c0       	rjmp	.+326    	; 0x18de <FSM_SYSTEM_Process+0x158>
    1798:	08 95       	ret

		case FSM_SYSTEM_STATE_IDLE: {
			/************************************************************************/
			/* Button processing                                                    */
			/************************************************************************/
			if(GetMessage(MSG_BTN_KEY_PRESSED)) { // <- Press message processing
    179a:	87 e0       	ldi	r24, 0x07	; 7
    179c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <GetMessage>
    17a0:	88 23       	and	r24, r24
    17a2:	69 f1       	breq	.+90     	; 0x17fe <FSM_SYSTEM_Process+0x78>
				// Getting press type
				uint8_t *press_type = GetMessageParam(MSG_BTN_KEY_PRESSED);
    17a4:	87 e0       	ldi	r24, 0x07	; 7
    17a6:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <GetMessageParam>
				// Processing button press by press time
				if(*press_type == BUTTON_EVENT_LONG_PRESS) {
    17aa:	fc 01       	movw	r30, r24
    17ac:	90 81       	ld	r25, Z
    17ae:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <device+0x3>
    17b2:	92 30       	cpi	r25, 0x02	; 2
    17b4:	61 f4       	brne	.+24     	; 0x17ce <FSM_SYSTEM_Process+0x48>
					if(device.mode != DEVICE_MODE_SHOW_MENU) {
    17b6:	82 30       	cpi	r24, 0x02	; 2
    17b8:	11 f1       	breq	.+68     	; 0x17fe <FSM_SYSTEM_Process+0x78>
						// Set device mode
						device.mode = DEVICE_MODE_SHOW_MENU;
    17ba:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <device+0x3>
						device.menu_cursor=0;
    17be:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <device+0x2>
						MENU_Start();
    17c2:	0e 94 2e 10 	call	0x205c	; 0x205c <MENU_Start>
						SendMessageWOParam(MSG_LCD_REFRESH_DISPLAY);
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SendMessageWOParam>
    17cc:	18 c0       	rjmp	.+48     	; 0x17fe <FSM_SYSTEM_Process+0x78>
					}
				} else {
					// Processing key press action by device modes
					switch(device.mode) {
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	b1 f4       	brne	.+44     	; 0x17fe <FSM_SYSTEM_Process+0x78>

						case DEVICE_MODE_SHOW_MENU: {
							switch(MENU_SELECT) {
    17d2:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <selected_menu_item>
    17d6:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <selected_menu_item+0x1>
    17da:	fc 01       	movw	r30, r24
    17dc:	38 96       	adiw	r30, 0x08	; 8
    17de:	e4 91       	lpm	r30, Z
    17e0:	e1 30       	cpi	r30, 0x01	; 1
    17e2:	11 f4       	brne	.+4      	; 0x17e8 <FSM_SYSTEM_Process+0x62>
								case MENU_ACTION_CANCEL: { // <- EXIT menu action
									device.mode = DEVICE_MODE_IDLE;
    17e4:	e0 93 ad 03 	sts	0x03AD, r30	; 0x8003ad <device+0x3>
								}

								default: break;
							}

							device.menu_cursor=0;
    17e8:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <device+0x2>
							MENU_Change(MENU_CHILD);
    17ec:	fc 01       	movw	r30, r24
    17ee:	36 96       	adiw	r30, 0x06	; 6
    17f0:	85 91       	lpm	r24, Z+
    17f2:	94 91       	lpm	r25, Z
    17f4:	0e 94 22 10 	call	0x2044	; 0x2044 <MENU_Change>
							SendMessageWOParam(MSG_LCD_REFRESH_DISPLAY);
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <SendMessageWOParam>
			}

			/************************************************************************/
			/* Encoder processing                                                   */
			/************************************************************************/
			if(GetMessage(MSG_ENC_ROTATE)) {
    17fe:	86 e0       	ldi	r24, 0x06	; 6
    1800:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <GetMessage>
    1804:	88 23       	and	r24, r24
    1806:	b9 f0       	breq	.+46     	; 0x1836 <FSM_SYSTEM_Process+0xb0>
				// Get rotate direction
				int8_t *rotate = GetMessageParam(MSG_ENC_ROTATE);
    1808:	86 e0       	ldi	r24, 0x06	; 6
    180a:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <GetMessageParam>
				// Processing rotate action by device modes
				switch(device.mode) {
    180e:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <device+0x3>
    1812:	22 30       	cpi	r18, 0x02	; 2
    1814:	81 f4       	brne	.+32     	; 0x1836 <FSM_SYSTEM_Process+0xb0>
					// SHOW MENU mode rotate processing
					case DEVICE_MODE_SHOW_MENU: {
						if(*rotate > 0) {
    1816:	fc 01       	movw	r30, r24
    1818:	80 81       	ld	r24, Z
    181a:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <selected_menu_item>
    181e:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <selected_menu_item+0x1>
    1822:	18 16       	cp	r1, r24
    1824:	0c f0       	brlt	.+2      	; 0x1828 <FSM_SYSTEM_Process+0xa2>
							MENU_Change(MENU_NEXT);
						} else {
							MENU_Change(MENU_PREVIOUS);
    1826:	32 96       	adiw	r30, 0x02	; 2
    1828:	85 91       	lpm	r24, Z+
    182a:	94 91       	lpm	r25, Z
    182c:	0e 94 22 10 	call	0x2044	; 0x2044 <MENU_Change>
						}
						// Send message to refresh display
						SendMessageWOParam(MSG_LCD_REFRESH_DISPLAY);
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SendMessageWOParam>
			}

			/************************************************************************/
			/* INDICATION CONTROL                                                   */
			/************************************************************************/
			if(!mhz19b._error && GetTimer(TIMER_SYSTEM) >= 1000) {
    1836:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <mhz19b+0x1>
    183a:	81 11       	cpse	r24, r1
    183c:	5d c0       	rjmp	.+186    	; 0x18f8 <FSM_SYSTEM_Process+0x172>
    183e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    1842:	88 3e       	cpi	r24, 0xE8	; 232
    1844:	93 40       	sbci	r25, 0x03	; 3
    1846:	08 f4       	brcc	.+2      	; 0x184a <FSM_SYSTEM_Process+0xc4>
    1848:	57 c0       	rjmp	.+174    	; 0x18f8 <FSM_SYSTEM_Process+0x172>
				if(mhz19b.value <= 900) {
    184a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <mhz19b+0x3>
    184e:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <mhz19b+0x4>
    1852:	85 38       	cpi	r24, 0x85	; 133
    1854:	23 e0       	ldi	r18, 0x03	; 3
    1856:	92 07       	cpc	r25, r18
    1858:	18 f4       	brcc	.+6      	; 0x1860 <FSM_SYSTEM_Process+0xda>
					led_params._blinking = 0;
    185a:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <led_params+0x1>
    185e:	09 c0       	rjmp	.+18     	; 0x1872 <FSM_SYSTEM_Process+0xec>
					led_params.color = GREEN;
					led_params.glow_time_ms = 0xFFFF;
				} else if(mhz19b.value > 900 && mhz19b.value <= 1000) {
    1860:	9c 01       	movw	r18, r24
    1862:	25 58       	subi	r18, 0x85	; 133
    1864:	33 40       	sbci	r19, 0x03	; 3
    1866:	24 36       	cpi	r18, 0x64	; 100
    1868:	31 05       	cpc	r19, r1
    186a:	28 f4       	brcc	.+10     	; 0x1876 <FSM_SYSTEM_Process+0xf0>
					led_params._blinking = 1;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <led_params+0x1>
					led_params.color = GREEN;
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	12 c0       	rjmp	.+36     	; 0x189a <FSM_SYSTEM_Process+0x114>
					led_params.glow_time_ms = 0xFFFF;
				} else if(mhz19b.value > 1000 && mhz19b.value <= 1700) {
    1876:	9c 01       	movw	r18, r24
    1878:	29 5e       	subi	r18, 0xE9	; 233
    187a:	33 40       	sbci	r19, 0x03	; 3
    187c:	2c 3b       	cpi	r18, 0xBC	; 188
    187e:	32 40       	sbci	r19, 0x02	; 2
    1880:	20 f4       	brcc	.+8      	; 0x188a <FSM_SYSTEM_Process+0x104>
					led_params._blinking = 0;
    1882:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <led_params+0x1>
					led_params.color = YELLOW;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	08 c0       	rjmp	.+16     	; 0x189a <FSM_SYSTEM_Process+0x114>
					led_params.glow_time_ms = 0xFFFF;
				} else if(mhz19b.value > 1700 && mhz19b.value <= 2000) {
    188a:	85 5a       	subi	r24, 0xA5	; 165
    188c:	96 40       	sbci	r25, 0x06	; 6
    188e:	8c 32       	cpi	r24, 0x2C	; 44
    1890:	91 40       	sbci	r25, 0x01	; 1
    1892:	30 f4       	brcc	.+12     	; 0x18a0 <FSM_SYSTEM_Process+0x11a>
					led_params._blinking = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <led_params+0x1>
					led_params.color = YELLOW;
    189a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <led_params+0x2>
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <FSM_SYSTEM_Process+0x122>
					led_params.glow_time_ms = 0xFFFF;
				} else {
					led_params._blinking = 0;
    18a0:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <led_params+0x1>
					led_params.color = RED;
    18a4:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <led_params+0x2>
					led_params.glow_time_ms = 0xFFFF;
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	9f ef       	ldi	r25, 0xFF	; 255
    18ac:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <led_params+0x5>
    18b0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <led_params+0x4>
				}
				// Send message with params
				SendMessageWParam(MSG_LEDS_PROCESSING, (void *)&led_params);
    18b4:	6c eb       	ldi	r22, 0xBC	; 188
    18b6:	71 e0       	ldi	r23, 0x01	; 1
    18b8:	88 e0       	ldi	r24, 0x08	; 8
    18ba:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <SendMessageWParam>
				ResetTimer(TIMER_SYSTEM);
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <ResetTimer>
			return;
		}

		case FSM_SYSTEM_STATE_STARTUP: {
			// Waiting for system will be initialized
			if(GetTimer(TIMER_SYSTEM) > SYSTEM_INITIALIZATION_TIMEOUT) {
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    18ca:	85 36       	cpi	r24, 0x65	; 101
    18cc:	91 05       	cpc	r25, r1
    18ce:	a0 f0       	brcs	.+40     	; 0x18f8 <FSM_SYSTEM_Process+0x172>
				// Send BC message after
				SendBCMessage(MSG_BC_SYSTEM_STARTUP_RUN);
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <SendBCMessage>
				// Goto waiting complete rules
				FSM_state = FSM_SYSTEM_STATE_STARTUP_COMPLETE;
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <FSM_state>
    18dc:	08 95       	ret
			return;
		}

		case FSM_SYSTEM_STATE_STARTUP_COMPLETE: {
			// Waiting splash screen will be hidden
			if(GetMessage(MSG_CHK_SENSORS_COMPLETE)) {
    18de:	83 e0       	ldi	r24, 0x03	; 3
    18e0:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <GetMessage>
    18e4:	88 23       	and	r24, r24
    18e6:	41 f0       	breq	.+16     	; 0x18f8 <FSM_SYSTEM_Process+0x172>
				// Send BC message after
				SendBCMessage(MSG_BC_SYSTEM_STARTUP_COMPLETE);
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <SendBCMessage>
				// Goto IDLE state
				FSM_state = FSM_SYSTEM_STATE_IDLE;
    18ee:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <FSM_state>
				// Set default device mode
				device.mode = DEVICE_MODE_IDLE;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <device+0x3>
    18f8:	08 95       	ret

000018fa <FSM_UART_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_UART_Init(void)
{
	// Set default FSM state
	FSM_state = FSM_UART_STATE_IDLE;
    18fa:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <FSM_state>
    18fe:	08 95       	ret

00001900 <FSM_UART_Process>:
}

void FSM_UART_Process(void)
{
	switch(FSM_state) {
    1900:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <FSM_state>
    1904:	08 95       	ret

00001906 <FSM_X1226_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/
void FSM_X1226_Init(void)
{
	// Goto wait startup state
	FSM_state = FSM_X1226_STATE_STARTUP_TIMEOUT;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <FSM_state>
	// Flush FSM timer
	ResetTimer(TIMER_X1226);
    190c:	83 e0       	ldi	r24, 0x03	; 3
    190e:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <ResetTimer>

00001912 <FSM_X1226_Process>:
}

void FSM_X1226_Process(void)
{
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	1f 92       	push	r1
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
	switch(FSM_state) {
    1922:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <FSM_state>
    1926:	8e 2f       	mov	r24, r30
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	8b 30       	cpi	r24, 0x0B	; 11
    192c:	91 05       	cpc	r25, r1
    192e:	08 f0       	brcs	.+2      	; 0x1932 <FSM_X1226_Process+0x20>
    1930:	10 c1       	rjmp	.+544    	; 0x1b52 <FSM_X1226_Process+0x240>
    1932:	fc 01       	movw	r30, r24
    1934:	e4 5c       	subi	r30, 0xC4	; 196
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <__tablejump2__>
		/* Waiting timeout before initialize */
		case FSM_X1226_STATE_STARTUP_TIMEOUT: {
			if(GetTimer(TIMER_X1226) >= X1226_STARTUP_DELAY) {
    193c:	83 e0       	ldi	r24, 0x03	; 3
    193e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    1942:	44 97       	sbiw	r24, 0x14	; 20
    1944:	08 f4       	brcc	.+2      	; 0x1948 <FSM_X1226_Process+0x36>
    1946:	05 c1       	rjmp	.+522    	; 0x1b52 <FSM_X1226_Process+0x240>
				// Goto reading rtc status
				FSM_state = FSM_X1226_STATE_READ_STATUS;
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	0f c0       	rjmp	.+30     	; 0x196a <FSM_X1226_Process+0x58>
			return;
		}

		/* Getting STATUS info from X1226 */
		case FSM_X1226_STATE_READ_STATUS: {
			if(!i2c._busy) {
    194c:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c>
    1950:	81 11       	cpse	r24, r1
    1952:	ff c0       	rjmp	.+510    	; 0x1b52 <FSM_X1226_Process+0x240>
				if(I2C_RequestFrom(X1226_CCR_ADDRESS, 1, 2, X1226_REG_STATUS)) {
    1954:	2f e3       	ldi	r18, 0x3F	; 63
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	42 e0       	ldi	r20, 0x02	; 2
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	8e ed       	ldi	r24, 0xDE	; 222
    195e:	0e 94 23 03 	call	0x646	; 0x646 <I2C_RequestFrom>
    1962:	88 23       	and	r24, r24
    1964:	09 f4       	brne	.+2      	; 0x1968 <FSM_X1226_Process+0x56>
    1966:	f5 c0       	rjmp	.+490    	; 0x1b52 <FSM_X1226_Process+0x240>
					// Goto status processing
					FSM_state = FSM_X1226_STATE_STATUS_PROCESSING;
    1968:	83 e0       	ldi	r24, 0x03	; 3
    196a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <FSM_state>
    196e:	f1 c0       	rjmp	.+482    	; 0x1b52 <FSM_X1226_Process+0x240>
			return;
		}

		/* Processing by status reg value */
		case FSM_X1226_STATE_STATUS_PROCESSING: {
			if(!i2c._busy) {
    1970:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c>
    1974:	81 11       	cpse	r24, r1
    1976:	ed c0       	rjmp	.+474    	; 0x1b52 <FSM_X1226_Process+0x240>
				if(!i2c._error) {
    1978:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <i2c+0x2>
    197c:	81 11       	cpse	r24, r1
    197e:	0e c0       	rjmp	.+28     	; 0x199c <FSM_X1226_Process+0x8a>
					// Set presence flag
					rtc._presence=1;
    1980:	11 e0       	ldi	r17, 0x01	; 1
    1982:	10 93 90 03 	sts	0x0390, r17	; 0x800390 <rtc>
					// Action by status register data bit
					if(I2C_Read() & _RTCF) { // <- Total power fail occured
    1986:	0e 94 9c 03 	call	0x738	; 0x738 <I2C_Read>
    198a:	80 ff       	sbrs	r24, 0
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <FSM_X1226_Process+0x84>
						// Set initialization type to FULL init
						x1226.init_type = X1226_INIT_TYPE_FULL; 
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <x1226>
    1994:	c5 c0       	rjmp	.+394    	; 0x1b20 <FSM_X1226_Process+0x20e>
					} else { // <- Power was not have total power fail
						// Set initialization type to PARTIAL init
						x1226.init_type = X1226_INIT_TYPE_PARTIAL;
    1996:	10 93 c4 01 	sts	0x01C4, r17	; 0x8001c4 <x1226>
    199a:	c2 c0       	rjmp	.+388    	; 0x1b20 <FSM_X1226_Process+0x20e>
					}
				} else {
					// Flush presence flag
					rtc._presence=0;
    199c:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <rtc>
    19a0:	bf c0       	rjmp	.+382    	; 0x1b20 <FSM_X1226_Process+0x20e>
			return;
		}

		/* 1 of 2 steps write protection off */
		case FSM_X1226_STATE_ENABLE_CCR_WRITE_ACCESS_STEP1: {
			if(!i2c._busy) {
    19a2:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c>
    19a6:	81 11       	cpse	r24, r1
    19a8:	d4 c0       	rjmp	.+424    	; 0x1b52 <FSM_X1226_Process+0x240>
				// Send 0x2(_WEL bit set) to the X1226
				uint8_t t = _WEL;
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	89 83       	std	Y+1, r24	; 0x01
				I2C_TransmitTo(&t, X1226_CCR_ADDRESS, 1, 2, X1226_REG_STATUS);
    19ae:	0f e3       	ldi	r16, 0x3F	; 63
    19b0:	10 e0       	ldi	r17, 0x00	; 0
    19b2:	22 e0       	ldi	r18, 0x02	; 2
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	6e ed       	ldi	r22, 0xDE	; 222
    19b8:	ce 01       	movw	r24, r28
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_TransmitTo>
				// Goto to second step write protection
				FSM_state = FSM_X1226_STATE_ENABLE_CCR_WRITE_ACCESS_STEP2;
    19c0:	85 e0       	ldi	r24, 0x05	; 5
    19c2:	d3 cf       	rjmp	.-90     	; 0x196a <FSM_X1226_Process+0x58>
			return;
		}

		/* 2 of 2 steps write protection off */
		case FSM_X1226_STATE_ENABLE_CCR_WRITE_ACCESS_STEP2: {
			if(!i2c._busy) {
    19c4:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c>
    19c8:	81 11       	cpse	r24, r1
    19ca:	c3 c0       	rjmp	.+390    	; 0x1b52 <FSM_X1226_Process+0x240>
				// Send 0x6(_WEL & _RWEL bit set) to the X1226
				uint8_t t = (_WEL|_RWEL);
    19cc:	86 e0       	ldi	r24, 0x06	; 6
    19ce:	f8 2e       	mov	r15, r24
    19d0:	f9 82       	std	Y+1, r15	; 0x01
				I2C_TransmitTo(&t, X1226_CCR_ADDRESS, 1, 2, X1226_REG_STATUS);
    19d2:	0f e3       	ldi	r16, 0x3F	; 63
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	22 e0       	ldi	r18, 0x02	; 2
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	6e ed       	ldi	r22, 0xDE	; 222
    19dc:	ce 01       	movw	r24, r28
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_TransmitTo>
				
				switch(x1226.init_type) {
    19e4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <x1226>
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	a1 f1       	breq	.+104    	; 0x1a54 <FSM_X1226_Process+0x142>
    19ec:	82 30       	cpi	r24, 0x02	; 2
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <FSM_X1226_Process+0xe0>
    19f0:	97 c0       	rjmp	.+302    	; 0x1b20 <FSM_X1226_Process+0x20e>
					/* Need full rtc initialization */
					case X1226_INIT_TYPE_FULL: {
						// Goto to setup clock date/time default values
						FSM_state = FSM_X1226_STATE_INIT_CLOCK;
    19f2:	f0 92 d2 01 	sts	0x01D2, r15	; 0x8001d2 <FSM_state>
						return;
    19f6:	ad c0       	rjmp	.+346    	; 0x1b52 <FSM_X1226_Process+0x240>
			return;
		}

		/* Setup clock date/time default values */
		case FSM_X1226_STATE_INIT_CLOCK: {
			if(i2c._busy) { return; }
    19f8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c>
    19fc:	81 11       	cpse	r24, r1
    19fe:	a9 c0       	rjmp	.+338    	; 0x1b52 <FSM_X1226_Process+0x240>
			// Store default values
			x1226.ccr.sec = dec2bcd(0);
    1a00:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <dec2bcd>
    1a04:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <x1226+0x1>
			x1226.ccr.min = dec2bcd(DEFAULT_TIME_MINUTE);
    1a08:	84 e3       	ldi	r24, 0x34	; 52
    1a0a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <dec2bcd>
    1a0e:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <x1226+0x2>
			x1226.ccr.hour = (dec2bcd(DEFAULT_TIME_HOUR) | _MIL);	// Set 24hr time format
    1a12:	8e e0       	ldi	r24, 0x0E	; 14
    1a14:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <dec2bcd>
    1a18:	80 68       	ori	r24, 0x80	; 128
    1a1a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <x1226+0x3>
			x1226.ccr.day = dec2bcd(DEFAULT_DATE_DAY);
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <dec2bcd>
    1a24:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <x1226+0x4>
			x1226.ccr.month = dec2bcd(DEFAULT_DATE_MONTH);
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <dec2bcd>
    1a2e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <x1226+0x5>
			x1226.ccr.year = dec2bcd(DEFAULT_DATE_YEAR);
    1a32:	83 e1       	ldi	r24, 0x13	; 19
    1a34:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <dec2bcd>
    1a38:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <x1226+0x6>
			x1226.ccr.dow = DEFAULT_DATE_DOW;
    1a3c:	84 e0       	ldi	r24, 0x04	; 4
    1a3e:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <x1226+0x7>
			// Send 6 byte date/time configuration values
			I2C_TransmitTo((void *)&x1226.ccr, X1226_CCR_ADDRESS, 7, 2, X1226_REG_RTC_SC);
    1a42:	00 e3       	ldi	r16, 0x30	; 48
    1a44:	10 e0       	ldi	r17, 0x00	; 0
    1a46:	22 e0       	ldi	r18, 0x02	; 2
    1a48:	47 e0       	ldi	r20, 0x07	; 7
    1a4a:	6e ed       	ldi	r22, 0xDE	; 222
    1a4c:	85 ec       	ldi	r24, 0xC5	; 197
    1a4e:	91 e0       	ldi	r25, 0x01	; 1
    1a50:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_TransmitTo>
			// Goto EEPROM params setup
			FSM_state = FSM_X1226_STATE_SET_EEPROM_PARAMS;
    1a54:	87 e0       	ldi	r24, 0x07	; 7
    1a56:	89 cf       	rjmp	.-238    	; 0x196a <FSM_X1226_Process+0x58>
			return;
		}

		/* Custom params to use RTC x1226 */
		case FSM_X1226_STATE_SET_EEPROM_PARAMS: {
			if(!i2c._busy) {
    1a58:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c>
    1a5c:	81 11       	cpse	r24, r1
    1a5e:	79 c0       	rjmp	.+242    	; 0x1b52 <FSM_X1226_Process+0x240>
				// Set 1Hz output to IRQ pin
				uint8_t t = (_FO1|_FO0);
    1a60:	88 e1       	ldi	r24, 0x18	; 24
    1a62:	89 83       	std	Y+1, r24	; 0x01
				I2C_TransmitTo(&t, X1226_CCR_ADDRESS, 1, 2, X1226_REG_CTRL_INT);
    1a64:	01 e1       	ldi	r16, 0x11	; 17
    1a66:	10 e0       	ldi	r17, 0x00	; 0
    1a68:	22 e0       	ldi	r18, 0x02	; 2
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	6e ed       	ldi	r22, 0xDE	; 222
    1a6e:	ce 01       	movw	r24, r28
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_TransmitTo>
				// Goto EEPROM write timeout
				FSM_state = FSM_X1226_STATE_SET_EEPROM_PARAMS_TIMEOUT;
    1a76:	88 e0       	ldi	r24, 0x08	; 8
    1a78:	67 c0       	rjmp	.+206    	; 0x1b48 <FSM_X1226_Process+0x236>
			return;
		}

		/* EEPROM operation timeout state */
		case FSM_X1226_STATE_SET_EEPROM_PARAMS_TIMEOUT: {
			if(GetTimer(TIMER_X1226) >= X1226_EEPROM_WRITE_TIMEOUT) {
    1a7a:	83 e0       	ldi	r24, 0x03	; 3
    1a7c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    1a80:	0c 97       	sbiw	r24, 0x0c	; 12
    1a82:	08 f4       	brcc	.+2      	; 0x1a86 <FSM_X1226_Process+0x174>
    1a84:	66 c0       	rjmp	.+204    	; 0x1b52 <FSM_X1226_Process+0x240>
				// 
				x1226.init_type = X1226_INIT_TYPE_NO_NEED;
    1a86:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <x1226>
				// Goto default work state
				FSM_state = FSM_X1226_STATE_IDLE;
    1a8a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <FSM_state>
    1a8e:	5e c0       	rjmp	.+188    	; 0x1b4c <FSM_X1226_Process+0x23a>
			return;
		}

		/* Receive CCR data from X1226 */
		case FSM_X1226_STATE_READ_CCR_DATA: {
			if(!i2c._busy) {
    1a90:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c>
    1a94:	81 11       	cpse	r24, r1
    1a96:	5d c0       	rjmp	.+186    	; 0x1b52 <FSM_X1226_Process+0x240>
				if(I2C_RequestFrom(X1226_CCR_ADDRESS, 7, 2, X1226_REG_RTC_SC)) {
    1a98:	20 e3       	ldi	r18, 0x30	; 48
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	42 e0       	ldi	r20, 0x02	; 2
    1a9e:	67 e0       	ldi	r22, 0x07	; 7
    1aa0:	8e ed       	ldi	r24, 0xDE	; 222
    1aa2:	0e 94 23 03 	call	0x646	; 0x646 <I2C_RequestFrom>
    1aa6:	88 23       	and	r24, r24
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <FSM_X1226_Process+0x19a>
    1aaa:	53 c0       	rjmp	.+166    	; 0x1b52 <FSM_X1226_Process+0x240>
					// Goto processing received data
					FSM_state = FSM_X1226_STATE_CCR_DATA_PROCESSING;
    1aac:	8a e0       	ldi	r24, 0x0A	; 10
    1aae:	5d cf       	rjmp	.-326    	; 0x196a <FSM_X1226_Process+0x58>
			return;
		}

		/* Processing received data */
		case FSM_X1226_STATE_CCR_DATA_PROCESSING: {
			if(!i2c._busy) {
    1ab0:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c>
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	4d c0       	rjmp	.+154    	; 0x1b52 <FSM_X1226_Process+0x240>
    1ab8:	05 ec       	ldi	r16, 0xC5	; 197
    1aba:	11 e0       	ldi	r17, 0x01	; 1
				// Receive data from I2C buffer
				uint8_t *p_data = (void *)&x1226.ccr.sec;
				for(uint8_t i=7; i; i--) {
					*(p_data++) = I2C_Read();
    1abc:	0e 94 9c 03 	call	0x738	; 0x738 <I2C_Read>
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	81 93       	st	Z+, r24
    1ac4:	8f 01       	movw	r16, r30
		/* Processing received data */
		case FSM_X1226_STATE_CCR_DATA_PROCESSING: {
			if(!i2c._busy) {
				// Receive data from I2C buffer
				uint8_t *p_data = (void *)&x1226.ccr.sec;
				for(uint8_t i=7; i; i--) {
    1ac6:	f1 e0       	ldi	r31, 0x01	; 1
    1ac8:	0c 3c       	cpi	r16, 0xCC	; 204
    1aca:	1f 07       	cpc	r17, r31
    1acc:	b9 f7       	brne	.-18     	; 0x1abc <FSM_X1226_Process+0x1aa>
					*(p_data++) = I2C_Read();
				}
				// Processing received data
				rtc.sec = bcd2dec(x1226.ccr.sec);
    1ace:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <x1226+0x1>
    1ad2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <bcd2dec>
    1ad6:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <rtc+0x1>
				rtc.min = bcd2dec(x1226.ccr.min);
    1ada:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <x1226+0x2>
    1ade:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <bcd2dec>
    1ae2:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <rtc+0x2>
				rtc.hour = bcd2dec(x1226.ccr.hour & ~_MIL);
    1ae6:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <x1226+0x3>
    1aea:	8f 77       	andi	r24, 0x7F	; 127
    1aec:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <bcd2dec>
    1af0:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <rtc+0x3>
				rtc.dow = x1226.ccr.dow;
    1af4:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <x1226+0x7>
    1af8:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <rtc+0x4>
				rtc.day = bcd2dec(x1226.ccr.day);
    1afc:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <x1226+0x4>
    1b00:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <bcd2dec>
    1b04:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <rtc+0x5>
				rtc.month = bcd2dec(x1226.ccr.month);
    1b08:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <x1226+0x5>
    1b0c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <bcd2dec>
    1b10:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <rtc+0x6>
				rtc.year = bcd2dec(x1226.ccr.year);
    1b14:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <x1226+0x6>
    1b18:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <bcd2dec>
    1b1c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rtc+0x7>
				// Goto default work state
				FSM_state = FSM_X1226_STATE_IDLE;
    1b20:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <FSM_state>
    1b24:	16 c0       	rjmp	.+44     	; 0x1b52 <FSM_X1226_Process+0x240>
			return;
		}

		case FSM_X1226_STATE_IDLE: {
			
			if(!rtc._presence) {
    1b26:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <rtc>
    1b2a:	88 23       	and	r24, r24
    1b2c:	91 f0       	breq	.+36     	; 0x1b52 <FSM_X1226_Process+0x240>
				return;
			}
			
			if(x1226.init_type != X1226_INIT_TYPE_NO_NEED) {
    1b2e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <x1226>
    1b32:	88 23       	and	r24, r24
    1b34:	11 f0       	breq	.+4      	; 0x1b3a <FSM_X1226_Process+0x228>
				//
				FSM_state = FSM_X1226_STATE_ENABLE_CCR_WRITE_ACCESS_STEP1;
    1b36:	84 e0       	ldi	r24, 0x04	; 4
    1b38:	18 cf       	rjmp	.-464    	; 0x196a <FSM_X1226_Process+0x58>
				return;
			}
						
			if(_read_enabled && GetTimer(TIMER_X1226) >= X1226_DATA_READ_PERIOD) {
    1b3a:	83 e0       	ldi	r24, 0x03	; 3
    1b3c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GetTimer>
    1b40:	84 3f       	cpi	r24, 0xF4	; 244
    1b42:	91 40       	sbci	r25, 0x01	; 1
    1b44:	30 f0       	brcs	.+12     	; 0x1b52 <FSM_X1226_Process+0x240>
				FSM_state = FSM_X1226_STATE_READ_CCR_DATA;
    1b46:	89 e0       	ldi	r24, 0x09	; 9
    1b48:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <FSM_state>
				ResetTimer(TIMER_X1226);
    1b4c:	83 e0       	ldi	r24, 0x03	; 3
    1b4e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <ResetTimer>



		default: break;
	}
}
    1b52:	0f 90       	pop	r0
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	08 95       	ret

00001b60 <InitMessages>:

/************************************************************************/
/* FUNCTIONS                                                            */
/************************************************************************/
void InitMessages(void)
{
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i=0;i<MAX_MESSAGES;i++) {
		Messages[i].Msg = MSG_STATE_INACTIVE;
    1b64:	fc 01       	movw	r30, r24
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	e8 0f       	add	r30, r24
    1b6c:	f9 1f       	adc	r31, r25
    1b6e:	ec 54       	subi	r30, 0x4C	; 76
    1b70:	fc 4f       	sbci	r31, 0xFC	; 252
    1b72:	10 82       	st	Z, r1
    1b74:	01 96       	adiw	r24, 0x01	; 1
/************************************************************************/
/* FUNCTIONS                                                            */
/************************************************************************/
void InitMessages(void)
{
	for(uint8_t i=0;i<MAX_MESSAGES;i++) {
    1b76:	8a 30       	cpi	r24, 0x0A	; 10
    1b78:	91 05       	cpc	r25, r1
    1b7a:	a1 f7       	brne	.-24     	; 0x1b64 <InitMessages+0x4>
		Messages[i].Msg = MSG_STATE_INACTIVE;
	}
	#ifdef USE_BC_MESSAGES
	for (uint8_t i=0; i<MAX_BC_MESSAGES; i++) {
		BroadcastMessages[i] = MSG_STATE_INACTIVE;
    1b7c:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <BroadcastMessages>
    1b80:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <BroadcastMessages+0x1>
    1b84:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <BroadcastMessages+0x2>
    1b88:	08 95       	ret

00001b8a <SendMessageWParam>:
	#endif
}

void SendMessageWParam(uint8_t Msg, void * pParams)
{
	if(Messages[Msg].Msg == MSG_STATE_INACTIVE) {
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	ee 0f       	add	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	8e 0f       	add	r24, r30
    1b94:	9f 1f       	adc	r25, r31
    1b96:	fc 01       	movw	r30, r24
    1b98:	ec 54       	subi	r30, 0x4C	; 76
    1b9a:	fc 4f       	sbci	r31, 0xFC	; 252
    1b9c:	80 81       	ld	r24, Z
    1b9e:	81 11       	cpse	r24, r1
    1ba0:	04 c0       	rjmp	.+8      	; 0x1baa <SendMessageWParam+0x20>
		Messages[Msg].Msg = MSG_STATE_SET;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	80 83       	st	Z, r24
		Messages[Msg].pParams = pParams;
    1ba6:	72 83       	std	Z+2, r23	; 0x02
    1ba8:	61 83       	std	Z+1, r22	; 0x01
    1baa:	08 95       	ret

00001bac <SendMessageWOParam>:
	}
}

void SendMessageWOParam(uint8_t Msg)
{
	if(Messages[Msg].Msg == MSG_STATE_INACTIVE) {
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	fc 01       	movw	r30, r24
    1bb0:	ee 0f       	add	r30, r30
    1bb2:	ff 1f       	adc	r31, r31
    1bb4:	8e 0f       	add	r24, r30
    1bb6:	9f 1f       	adc	r25, r31
    1bb8:	fc 01       	movw	r30, r24
    1bba:	ec 54       	subi	r30, 0x4C	; 76
    1bbc:	fc 4f       	sbci	r31, 0xFC	; 252
    1bbe:	80 81       	ld	r24, Z
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <SendMessageWOParam+0x1c>
		Messages[Msg].Msg = MSG_STATE_SET;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	80 83       	st	Z, r24
    1bc8:	08 95       	ret

00001bca <GetMessage>:
	}
}

uint8_t GetMessage(uint8_t Msg)
{
	if(Messages[Msg].Msg == MSG_STATE_ACTIVE) {
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	fc 01       	movw	r30, r24
    1bce:	ee 0f       	add	r30, r30
    1bd0:	ff 1f       	adc	r31, r31
    1bd2:	8e 0f       	add	r24, r30
    1bd4:	9f 1f       	adc	r25, r31
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	ec 54       	subi	r30, 0x4C	; 76
    1bda:	fc 4f       	sbci	r31, 0xFC	; 252
    1bdc:	80 81       	ld	r24, Z
    1bde:	82 30       	cpi	r24, 0x02	; 2
    1be0:	19 f4       	brne	.+6      	; 0x1be8 <GetMessage+0x1e>
		Messages[Msg].Msg = MSG_STATE_INACTIVE;
    1be2:	10 82       	st	Z, r1
		return 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	08 95       	ret
	}
	return 0;
    1be8:	80 e0       	ldi	r24, 0x00	; 0
}
    1bea:	08 95       	ret

00001bec <GetMessageParam>:

void * GetMessageParam(uint8_t Msg)
{
	return Messages[Msg].pParams;
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	fc 01       	movw	r30, r24
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	8e 0f       	add	r24, r30
    1bf6:	9f 1f       	adc	r25, r31
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	ec 54       	subi	r30, 0x4C	; 76
    1bfc:	fc 4f       	sbci	r31, 0xFC	; 252
    1bfe:	81 81       	ldd	r24, Z+1	; 0x01
    1c00:	92 81       	ldd	r25, Z+2	; 0x02
}
    1c02:	08 95       	ret

00001c04 <SendBCMessage>:

#ifdef USE_BC_MESSAGES
void SendBCMessage(uint8_t Msg)
{
	if (BroadcastMessages[Msg] == MSG_STATE_INACTIVE) {
    1c04:	e8 2f       	mov	r30, r24
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	ef 54       	subi	r30, 0x4F	; 79
    1c0a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c0c:	80 81       	ld	r24, Z
    1c0e:	81 11       	cpse	r24, r1
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <SendBCMessage+0x12>
		BroadcastMessages[Msg] = MSG_STATE_SET;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	80 83       	st	Z, r24
    1c16:	08 95       	ret

00001c18 <GetBCMessage>:
	}
}

uint8_t GetBCMessage(uint8_t Msg)
{
	if (BroadcastMessages[Msg] == MSG_STATE_ACTIVE) {
    1c18:	e8 2f       	mov	r30, r24
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	ef 54       	subi	r30, 0x4F	; 79
    1c1e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c20:	90 81       	ld	r25, Z
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	92 30       	cpi	r25, 0x02	; 2
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <GetBCMessage+0x12>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	return 0;
}
    1c2a:	08 95       	ret

00001c2c <ProcessMessages>:
#endif


void ProcessMessages(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c2c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c2e:	f8 94       	cli
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
		for (uint8_t i=0; i<MAX_MESSAGES; i++) {
			if (Messages[i].Msg == MSG_STATE_ACTIVE) Messages[i].Msg = MSG_STATE_INACTIVE;
			if (Messages[i].Msg == MSG_STATE_SET) Messages[i].Msg = MSG_STATE_ACTIVE;
    1c34:	32 e0       	ldi	r19, 0x02	; 2

void ProcessMessages(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		for (uint8_t i=0; i<MAX_MESSAGES; i++) {
			if (Messages[i].Msg == MSG_STATE_ACTIVE) Messages[i].Msg = MSG_STATE_INACTIVE;
    1c36:	fc 01       	movw	r30, r24
    1c38:	ee 0f       	add	r30, r30
    1c3a:	ff 1f       	adc	r31, r31
    1c3c:	df 01       	movw	r26, r30
    1c3e:	a8 0f       	add	r26, r24
    1c40:	b9 1f       	adc	r27, r25
    1c42:	ac 54       	subi	r26, 0x4C	; 76
    1c44:	bc 4f       	sbci	r27, 0xFC	; 252
    1c46:	4c 91       	ld	r20, X
    1c48:	42 30       	cpi	r20, 0x02	; 2
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <ProcessMessages+0x22>
    1c4c:	1c 92       	st	X, r1
			if (Messages[i].Msg == MSG_STATE_SET) Messages[i].Msg = MSG_STATE_ACTIVE;
    1c4e:	e8 0f       	add	r30, r24
    1c50:	f9 1f       	adc	r31, r25
    1c52:	ec 54       	subi	r30, 0x4C	; 76
    1c54:	fc 4f       	sbci	r31, 0xFC	; 252
    1c56:	40 81       	ld	r20, Z
    1c58:	41 30       	cpi	r20, 0x01	; 1
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <ProcessMessages+0x32>
    1c5c:	30 83       	st	Z, r19
    1c5e:	01 96       	adiw	r24, 0x01	; 1


void ProcessMessages(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		for (uint8_t i=0; i<MAX_MESSAGES; i++) {
    1c60:	8a 30       	cpi	r24, 0x0A	; 10
    1c62:	91 05       	cpc	r25, r1
    1c64:	41 f7       	brne	.-48     	; 0x1c36 <ProcessMessages+0xa>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
			if (Messages[i].Msg == MSG_STATE_SET) Messages[i].Msg = MSG_STATE_ACTIVE;
		}
		#ifdef USE_BC_MESSAGES
		for (uint8_t i=0; i<MAX_BC_MESSAGES; i++) {
			if (BroadcastMessages[i] == MSG_STATE_ACTIVE) BroadcastMessages[i] = MSG_STATE_INACTIVE;
			if (BroadcastMessages[i] == MSG_STATE_SET) BroadcastMessages[i] = MSG_STATE_ACTIVE;
    1c6a:	32 e0       	ldi	r19, 0x02	; 2
			if (Messages[i].Msg == MSG_STATE_ACTIVE) Messages[i].Msg = MSG_STATE_INACTIVE;
			if (Messages[i].Msg == MSG_STATE_SET) Messages[i].Msg = MSG_STATE_ACTIVE;
		}
		#ifdef USE_BC_MESSAGES
		for (uint8_t i=0; i<MAX_BC_MESSAGES; i++) {
			if (BroadcastMessages[i] == MSG_STATE_ACTIVE) BroadcastMessages[i] = MSG_STATE_INACTIVE;
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	ef 54       	subi	r30, 0x4F	; 79
    1c70:	fc 4f       	sbci	r31, 0xFC	; 252
    1c72:	40 81       	ld	r20, Z
    1c74:	42 30       	cpi	r20, 0x02	; 2
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <ProcessMessages+0x4e>
    1c78:	10 82       	st	Z, r1
			if (BroadcastMessages[i] == MSG_STATE_SET) BroadcastMessages[i] = MSG_STATE_ACTIVE;
    1c7a:	40 81       	ld	r20, Z
    1c7c:	41 30       	cpi	r20, 0x01	; 1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <ProcessMessages+0x56>
    1c80:	30 83       	st	Z, r19
    1c82:	01 96       	adiw	r24, 0x01	; 1
		for (uint8_t i=0; i<MAX_MESSAGES; i++) {
			if (Messages[i].Msg == MSG_STATE_ACTIVE) Messages[i].Msg = MSG_STATE_INACTIVE;
			if (Messages[i].Msg == MSG_STATE_SET) Messages[i].Msg = MSG_STATE_ACTIVE;
		}
		#ifdef USE_BC_MESSAGES
		for (uint8_t i=0; i<MAX_BC_MESSAGES; i++) {
    1c84:	83 30       	cpi	r24, 0x03	; 3
    1c86:	91 05       	cpc	r25, r1
    1c88:	89 f7       	brne	.-30     	; 0x1c6c <ProcessMessages+0x40>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c8a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1c8c:	08 95       	ret

00001c8e <InitTimers>:

/************************************************************************/
/* FUNCTIONS                                                            */
/************************************************************************/
void InitTimers(void)
{
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i=0;i<MAX_TIMERS;i++) {
		Timers[i] = 0;
    1c92:	fc 01       	movw	r30, r24
    1c94:	ee 0f       	add	r30, r30
    1c96:	ff 1f       	adc	r31, r31
    1c98:	ed 52       	subi	r30, 0x2D	; 45
    1c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9c:	11 82       	std	Z+1, r1	; 0x01
    1c9e:	10 82       	st	Z, r1
    1ca0:	01 96       	adiw	r24, 0x01	; 1
/************************************************************************/
/* FUNCTIONS                                                            */
/************************************************************************/
void InitTimers(void)
{
	for(uint8_t i=0;i<MAX_TIMERS;i++) {
    1ca2:	8a 30       	cpi	r24, 0x0A	; 10
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	a9 f7       	brne	.-22     	; 0x1c92 <InitTimers+0x4>
	for(uint8_t i=0;i<MAX_GTIMERS;i++) {
		GTimers[i] = 0;
		GTStates[i] = TIMER_STOPPED;
	}
	#endif
}
    1ca8:	08 95       	ret

00001caa <ProcessTimers>:

void ProcessTimers(uint8_t * tick) {
	uint8_t x = *tick;
    1caa:	fc 01       	movw	r30, r24
    1cac:	40 81       	ld	r20, Z

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1cae:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1cb0:	f8 94       	cli
		if (x > 0) {
    1cb2:	44 23       	and	r20, r20
    1cb4:	a9 f0       	breq	.+42     	; 0x1ce0 <ProcessTimers+0x36>
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
			for (uint8_t i=0; i<MAX_TIMERS; i++) {
				Timers[i] += x;
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	f9 01       	movw	r30, r18
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	ed 52       	subi	r30, 0x2D	; 45
    1cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	64 0f       	add	r22, r20
    1ccc:	75 1f       	adc	r23, r21
    1cce:	71 83       	std	Z+1, r23	; 0x01
    1cd0:	60 83       	st	Z, r22
    1cd2:	2f 5f       	subi	r18, 0xFF	; 255
    1cd4:	3f 4f       	sbci	r19, 0xFF	; 255
void ProcessTimers(uint8_t * tick) {
	uint8_t x = *tick;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		if (x > 0) {
			for (uint8_t i=0; i<MAX_TIMERS; i++) {
    1cd6:	2a 30       	cpi	r18, 0x0A	; 10
    1cd8:	31 05       	cpc	r19, r1
    1cda:	81 f7       	brne	.-32     	; 0x1cbc <ProcessTimers+0x12>
				if (GTStates[i] == TIMER_RUNNING) {
					GTimers[i] += (uint16_t)x;
				}
				#endif
			}
			*tick = 0;
    1cdc:	fc 01       	movw	r30, r24
    1cde:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ce0:	af bf       	out	0x3f, r26	; 63
    __asm__ volatile ("" ::: "memory");
    1ce2:	08 95       	ret

00001ce4 <GetTimer>:
		}
	}
}

uint16_t GetTimer(uint8_t Timer) {
	return Timers[Timer];
    1ce4:	e8 2f       	mov	r30, r24
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	ee 0f       	add	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	ed 52       	subi	r30, 0x2D	; 45
    1cee:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cf4:	08 95       	ret

00001cf6 <ResetTimer>:

void ResetTimer(uint8_t Timer) {
	Timers[Timer] = 0;
    1cf6:	e8 2f       	mov	r30, r24
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	ee 0f       	add	r30, r30
    1cfc:	ff 1f       	adc	r31, r31
    1cfe:	ed 52       	subi	r30, 0x2D	; 45
    1d00:	fe 4f       	sbci	r31, 0xFE	; 254
    1d02:	11 82       	std	Z+1, r1	; 0x01
    1d04:	10 82       	st	Z, r1
    1d06:	08 95       	ret

00001d08 <utoa_cycle_sub8>:



/* Hex to BCD char */
char * utoa_cycle_sub8(uint8_t value, char *buffer, uint8_t _trim_zero, uint8_t max_value_length)
{
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	db 01       	movw	r26, r22
    1d0e:	ea ee       	ldi	r30, 0xEA	; 234
    1d10:	f1 e0       	ldi	r31, 0x01	; 1
    1d12:	eb 01       	movw	r28, r22
    1d14:	6d 5f       	subi	r22, 0xFD	; 253
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
	char *ptr = buffer;
	for(uint8_t i=0;i<3;i++) {
		uint8_t pow3 = pgm_read_byte(pow3Table8 + i);
    1d18:	34 91       	lpm	r19, Z
		uint8_t count = 0;
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
		while(value >= pow3) {
    1d1c:	83 17       	cp	r24, r19
    1d1e:	18 f0       	brcs	.+6      	; 0x1d26 <utoa_cycle_sub8+0x1e>
			count ++;
    1d20:	9f 5f       	subi	r25, 0xFF	; 255
			value -= pow3;
    1d22:	83 1b       	sub	r24, r19
    1d24:	fb cf       	rjmp	.-10     	; 0x1d1c <utoa_cycle_sub8+0x14>
		}
		// Store digit char to buffer current position
		*ptr++ = count + '0';
    1d26:	90 5d       	subi	r25, 0xD0	; 208
    1d28:	99 93       	st	Y+, r25
    1d2a:	31 96       	adiw	r30, 0x01	; 1

/* Hex to BCD char */
char * utoa_cycle_sub8(uint8_t value, char *buffer, uint8_t _trim_zero, uint8_t max_value_length)
{
	char *ptr = buffer;
	for(uint8_t i=0;i<3;i++) {
    1d2c:	c6 17       	cp	r28, r22
    1d2e:	d7 07       	cpc	r29, r23
    1d30:	99 f7       	brne	.-26     	; 0x1d18 <utoa_cycle_sub8+0x10>
		}
		// Store digit char to buffer current position
		*ptr++ = count + '0';
	}
	// Store last char as EOL
	*ptr = 0;
    1d32:	13 96       	adiw	r26, 0x03	; 3
    1d34:	1c 92       	st	X, r1
    1d36:	13 97       	sbiw	r26, 0x03	; 3
	
	// Replace first zero to space
	if(_trim_zero) {
    1d38:	44 23       	and	r20, r20
    1d3a:	69 f0       	breq	.+26     	; 0x1d56 <utoa_cycle_sub8+0x4e>
		for(uint8_t i=0;i<2; i++) {
			if(buffer[i] == '0') {
    1d3c:	8c 91       	ld	r24, X
    1d3e:	80 33       	cpi	r24, 0x30	; 48
    1d40:	51 f4       	brne	.+20     	; 0x1d56 <utoa_cycle_sub8+0x4e>
				buffer[i] = ' ';
    1d42:	80 e2       	ldi	r24, 0x20	; 32
    1d44:	8c 93       	st	X, r24
	*ptr = 0;
	
	// Replace first zero to space
	if(_trim_zero) {
		for(uint8_t i=0;i<2; i++) {
			if(buffer[i] == '0') {
    1d46:	11 96       	adiw	r26, 0x01	; 1
    1d48:	9c 91       	ld	r25, X
    1d4a:	11 97       	sbiw	r26, 0x01	; 1
    1d4c:	90 33       	cpi	r25, 0x30	; 48
    1d4e:	19 f4       	brne	.+6      	; 0x1d56 <utoa_cycle_sub8+0x4e>
				buffer[i] = ' ';
    1d50:	11 96       	adiw	r26, 0x01	; 1
    1d52:	8c 93       	st	X, r24
    1d54:	11 97       	sbiw	r26, 0x01	; 1
			}
			break;
		}
	}
	// Trim buffer length to max_value_length
	for(uint8_t i=0; i<(3 - max_value_length); i++) {
    1d56:	cd 01       	movw	r24, r26
    1d58:	43 e0       	ldi	r20, 0x03	; 3
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	ba 01       	movw	r22, r20
    1d5e:	62 1b       	sub	r22, r18
    1d60:	71 09       	sbc	r23, r1
    1d62:	9b 01       	movw	r18, r22
    1d64:	48 2f       	mov	r20, r24
    1d66:	4a 1b       	sub	r20, r26
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	42 17       	cp	r20, r18
    1d6c:	53 07       	cpc	r21, r19
    1d6e:	14 f4       	brge	.+4      	; 0x1d74 <utoa_cycle_sub8+0x6c>
		++buffer;
    1d70:	01 96       	adiw	r24, 0x01	; 1
    1d72:	f8 cf       	rjmp	.-16     	; 0x1d64 <utoa_cycle_sub8+0x5c>
	}
	return buffer;
}
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	08 95       	ret

00001d7a <utoa_cycle_sub16>:

/* Hex to BCD uint16_t */
char * utoa_cycle_sub16(uint16_t value, char *buffer, uint8_t max_value_length)
{
    1d7a:	cf 92       	push	r12
    1d7c:	df 92       	push	r13
    1d7e:	ef 92       	push	r14
    1d80:	ff 92       	push	r15
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	20 ee       	ldi	r18, 0xE0	; 224
    1d8e:	31 e0       	ldi	r19, 0x01	; 1
    1d90:	db 01       	movw	r26, r22
    1d92:	6b 01       	movw	r12, r22
    1d94:	85 e0       	ldi	r24, 0x05	; 5
    1d96:	c8 0e       	add	r12, r24
    1d98:	d1 1c       	adc	r13, r1
    1d9a:	eb 01       	movw	r28, r22
	char *ptr = buffer;
	for(uint8_t i=0; i<5; i++) {
		uint16_t pow5 = pgm_read_word(pow5Table16 + i);
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	e5 90       	lpm	r14, Z+
    1da0:	f4 90       	lpm	r15, Z
		uint8_t count = 0;
    1da2:	90 e0       	ldi	r25, 0x00	; 0
		while(value >= pow5) {
    1da4:	0e 15       	cp	r16, r14
    1da6:	1f 05       	cpc	r17, r15
    1da8:	20 f0       	brcs	.+8      	; 0x1db2 <utoa_cycle_sub16+0x38>
			count++;
    1daa:	9f 5f       	subi	r25, 0xFF	; 255
			value -= pow5;
    1dac:	0e 19       	sub	r16, r14
    1dae:	1f 09       	sbc	r17, r15
    1db0:	f9 cf       	rjmp	.-14     	; 0x1da4 <utoa_cycle_sub16+0x2a>
		}
		// Store digit char to buffer current position
		*ptr++ = count + '0';
    1db2:	90 5d       	subi	r25, 0xD0	; 208
    1db4:	99 93       	st	Y+, r25
    1db6:	2e 5f       	subi	r18, 0xFE	; 254
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255

/* Hex to BCD uint16_t */
char * utoa_cycle_sub16(uint16_t value, char *buffer, uint8_t max_value_length)
{
	char *ptr = buffer;
	for(uint8_t i=0; i<5; i++) {
    1dba:	cc 15       	cp	r28, r12
    1dbc:	dd 05       	cpc	r29, r13
    1dbe:	71 f7       	brne	.-36     	; 0x1d9c <utoa_cycle_sub16+0x22>
		}
		// Store digit char to buffer current position
		*ptr++ = count + '0';
	}
	// Store last char as EOL
	*ptr = 0;
    1dc0:	fb 01       	movw	r30, r22
    1dc2:	15 82       	std	Z+5, r1	; 0x05
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	04 96       	adiw	r24, 0x04	; 4

	// Replace first zero to space
	for(uint8_t i=0;i<4; i++) {
		if(buffer[i] == '0') {
			buffer[i] = ' ';
    1dc8:	20 e2       	ldi	r18, 0x20	; 32
	// Store last char as EOL
	*ptr = 0;

	// Replace first zero to space
	for(uint8_t i=0;i<4; i++) {
		if(buffer[i] == '0') {
    1dca:	3c 91       	ld	r19, X
    1dcc:	30 33       	cpi	r19, 0x30	; 48
    1dce:	31 f0       	breq	.+12     	; 0x1ddc <utoa_cycle_sub16+0x62>
char * utoa_cycle_sub16(uint16_t value, char *buffer, uint8_t max_value_length)
{
	char *ptr = buffer;
	for(uint8_t i=0; i<5; i++) {
		uint16_t pow5 = pgm_read_word(pow5Table16 + i);
		uint8_t count = 0;
    1dd0:	cb 01       	movw	r24, r22
			continue;
		}
		break;
	}
	// Trim buffer length to max_value_length
	for(uint8_t i=0; i<(5 - max_value_length); i++) {
    1dd2:	25 e0       	ldi	r18, 0x05	; 5
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	24 1b       	sub	r18, r20
    1dd8:	31 09       	sbc	r19, r1
    1dda:	05 c0       	rjmp	.+10     	; 0x1de6 <utoa_cycle_sub16+0x6c>
	*ptr = 0;

	// Replace first zero to space
	for(uint8_t i=0;i<4; i++) {
		if(buffer[i] == '0') {
			buffer[i] = ' ';
    1ddc:	2d 93       	st	X+, r18
	}
	// Store last char as EOL
	*ptr = 0;

	// Replace first zero to space
	for(uint8_t i=0;i<4; i++) {
    1dde:	8a 17       	cp	r24, r26
    1de0:	9b 07       	cpc	r25, r27
    1de2:	b1 f3       	breq	.-20     	; 0x1dd0 <utoa_cycle_sub16+0x56>
    1de4:	f2 cf       	rjmp	.-28     	; 0x1dca <utoa_cycle_sub16+0x50>
			continue;
		}
		break;
	}
	// Trim buffer length to max_value_length
	for(uint8_t i=0; i<(5 - max_value_length); i++) {
    1de6:	48 2f       	mov	r20, r24
    1de8:	46 1b       	sub	r20, r22
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	42 17       	cp	r20, r18
    1dee:	53 07       	cpc	r21, r19
    1df0:	14 f4       	brge	.+4      	; 0x1df6 <utoa_cycle_sub16+0x7c>
		++buffer;
    1df2:	01 96       	adiw	r24, 0x01	; 1
    1df4:	f8 cf       	rjmp	.-16     	; 0x1de6 <utoa_cycle_sub16+0x6c>
	}
	return buffer;
}
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	ff 90       	pop	r15
    1e00:	ef 90       	pop	r14
    1e02:	df 90       	pop	r13
    1e04:	cf 90       	pop	r12
    1e06:	08 95       	ret

00001e08 <bcd2dec>:

/* Convert BCD value into decimal */
uint8_t bcd2dec(uint8_t val)
{
	return (val & 0xF) + ((val & 0xF0) >> 4)*10;
    1e08:	98 2f       	mov	r25, r24
    1e0a:	92 95       	swap	r25
    1e0c:	9f 70       	andi	r25, 0x0F	; 15
    1e0e:	8f 70       	andi	r24, 0x0F	; 15
}
    1e10:	2a e0       	ldi	r18, 0x0A	; 10
    1e12:	92 9f       	mul	r25, r18
    1e14:	80 0d       	add	r24, r0
    1e16:	11 24       	eor	r1, r1
    1e18:	08 95       	ret

00001e1a <dec2bcd>:

/* Convert decimal value into BCD */
uint8_t dec2bcd(uint8_t val)
{
	return (val % 10) + ((val / 10) << 4);
    1e1a:	6a e0       	ldi	r22, 0x0A	; 10
    1e1c:	0e 94 91 10 	call	0x2122	; 0x2122 <__udivmodqi4>
}
    1e20:	20 e1       	ldi	r18, 0x10	; 16
    1e22:	82 9f       	mul	r24, r18
    1e24:	90 0d       	add	r25, r0
    1e26:	11 24       	eor	r1, r1
    1e28:	89 2f       	mov	r24, r25
    1e2a:	08 95       	ret

00001e2c <__vector_7>:
/* Functions prototypes */
void InitGPIO(void);

//------------------------------ System tick interrupt
ISR(TIMER2_COMPA_vect)
{
    1e2c:	1f 92       	push	r1
    1e2e:	0f 92       	push	r0
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	0f 92       	push	r0
    1e34:	11 24       	eor	r1, r1
    1e36:	8f 93       	push	r24
	systick++;
    1e38:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <systick>
    1e3c:	8f 5f       	subi	r24, 0xFF	; 255
    1e3e:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <systick>
}
    1e42:	8f 91       	pop	r24
    1e44:	0f 90       	pop	r0
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	0f 90       	pop	r0
    1e4a:	1f 90       	pop	r1
    1e4c:	18 95       	reti

00001e4e <__vector_1>:

//------------------------------ INT0 interrupt
ISR(INT0_vect)
{
    1e4e:	1f 92       	push	r1
    1e50:	0f 92       	push	r0
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	0f 92       	push	r0
    1e56:	11 24       	eor	r1, r1
    1e58:	8f 93       	push	r24
    1e5a:	9f 93       	push	r25
    1e5c:	ef 93       	push	r30
    1e5e:	ff 93       	push	r31
	// Toggle external rtc clock
	device._ext_clock ^= 0x1;
    1e60:	ea ea       	ldi	r30, 0xAA	; 170
    1e62:	f3 e0       	ldi	r31, 0x03	; 3
    1e64:	90 81       	ld	r25, Z
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	89 27       	eor	r24, r25
    1e6a:	80 83       	st	Z, r24
}
    1e6c:	ff 91       	pop	r31
    1e6e:	ef 91       	pop	r30
    1e70:	9f 91       	pop	r25
    1e72:	8f 91       	pop	r24
    1e74:	0f 90       	pop	r0
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	0f 90       	pop	r0
    1e7a:	1f 90       	pop	r1
    1e7c:	18 95       	reti

00001e7e <__vector_18>:

//------------------------------ USART RX Interrupt vector
ISR(USART_RX_vect)
{
    1e7e:	1f 92       	push	r1
    1e80:	0f 92       	push	r0
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	0f 92       	push	r0
    1e86:	11 24       	eor	r1, r1
    1e88:	2f 93       	push	r18
    1e8a:	3f 93       	push	r19
    1e8c:	4f 93       	push	r20
    1e8e:	5f 93       	push	r21
    1e90:	6f 93       	push	r22
    1e92:	7f 93       	push	r23
    1e94:	8f 93       	push	r24
    1e96:	9f 93       	push	r25
    1e98:	af 93       	push	r26
    1e9a:	bf 93       	push	r27
    1e9c:	ef 93       	push	r30
    1e9e:	ff 93       	push	r31
	UART_RX_Service();
    1ea0:	0e 94 05 04 	call	0x80a	; 0x80a <UART_RX_Service>
}
    1ea4:	ff 91       	pop	r31
    1ea6:	ef 91       	pop	r30
    1ea8:	bf 91       	pop	r27
    1eaa:	af 91       	pop	r26
    1eac:	9f 91       	pop	r25
    1eae:	8f 91       	pop	r24
    1eb0:	7f 91       	pop	r23
    1eb2:	6f 91       	pop	r22
    1eb4:	5f 91       	pop	r21
    1eb6:	4f 91       	pop	r20
    1eb8:	3f 91       	pop	r19
    1eba:	2f 91       	pop	r18
    1ebc:	0f 90       	pop	r0
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	0f 90       	pop	r0
    1ec2:	1f 90       	pop	r1
    1ec4:	18 95       	reti

00001ec6 <__vector_19>:

//------------------------------ USART UDRE Interrupt vector
ISR(USART_UDRE_vect)
{
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	2f 93       	push	r18
    1ed2:	3f 93       	push	r19
    1ed4:	4f 93       	push	r20
    1ed6:	5f 93       	push	r21
    1ed8:	6f 93       	push	r22
    1eda:	7f 93       	push	r23
    1edc:	8f 93       	push	r24
    1ede:	9f 93       	push	r25
    1ee0:	af 93       	push	r26
    1ee2:	bf 93       	push	r27
    1ee4:	ef 93       	push	r30
    1ee6:	ff 93       	push	r31
	UART_UDRE_TX_Service();
    1ee8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <UART_UDRE_TX_Service>
}
    1eec:	ff 91       	pop	r31
    1eee:	ef 91       	pop	r30
    1ef0:	bf 91       	pop	r27
    1ef2:	af 91       	pop	r26
    1ef4:	9f 91       	pop	r25
    1ef6:	8f 91       	pop	r24
    1ef8:	7f 91       	pop	r23
    1efa:	6f 91       	pop	r22
    1efc:	5f 91       	pop	r21
    1efe:	4f 91       	pop	r20
    1f00:	3f 91       	pop	r19
    1f02:	2f 91       	pop	r18
    1f04:	0f 90       	pop	r0
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	0f 90       	pop	r0
    1f0a:	1f 90       	pop	r1
    1f0c:	18 95       	reti

00001f0e <__vector_24>:

//------------------------------ TWI interrupt
ISR(TWI_vect)
{
    1f0e:	1f 92       	push	r1
    1f10:	0f 92       	push	r0
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	0f 92       	push	r0
    1f16:	11 24       	eor	r1, r1
    1f18:	2f 93       	push	r18
    1f1a:	3f 93       	push	r19
    1f1c:	4f 93       	push	r20
    1f1e:	5f 93       	push	r21
    1f20:	6f 93       	push	r22
    1f22:	7f 93       	push	r23
    1f24:	8f 93       	push	r24
    1f26:	9f 93       	push	r25
    1f28:	af 93       	push	r26
    1f2a:	bf 93       	push	r27
    1f2c:	ef 93       	push	r30
    1f2e:	ff 93       	push	r31
	I2C_TWIService();
    1f30:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_TWIService>
}
    1f34:	ff 91       	pop	r31
    1f36:	ef 91       	pop	r30
    1f38:	bf 91       	pop	r27
    1f3a:	af 91       	pop	r26
    1f3c:	9f 91       	pop	r25
    1f3e:	8f 91       	pop	r24
    1f40:	7f 91       	pop	r23
    1f42:	6f 91       	pop	r22
    1f44:	5f 91       	pop	r21
    1f46:	4f 91       	pop	r20
    1f48:	3f 91       	pop	r19
    1f4a:	2f 91       	pop	r18
    1f4c:	0f 90       	pop	r0
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	0f 90       	pop	r0
    1f52:	1f 90       	pop	r1
    1f54:	18 95       	reti

00001f56 <InitGPIO>:

//------------------------------ MCU IO initialization
inline void InitGPIO(void)
{
	// Power reduction initialize
	POWER_REDUCTION_INIT();
    1f56:	94 e0       	ldi	r25, 0x04	; 4
    1f58:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	// Initialize systick timer
	SYSTICK_TIMER_INIT();
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1f62:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1f66:	9d e7       	ldi	r25, 0x7D	; 125
    1f68:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1f6c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	SYSTICK_INTERRUPT_ENABLE();
    1f70:	e0 e7       	ldi	r30, 0x70	; 112
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	90 81       	ld	r25, Z
    1f76:	92 60       	ori	r25, 0x02	; 2
    1f78:	90 83       	st	Z, r25
	// Initialize timer for measurement
	MEASURING_TMR_INIT();
    1f7a:	14 bc       	out	0x24, r1	; 36
    1f7c:	85 bd       	out	0x25, r24	; 37
    1f7e:	ee e6       	ldi	r30, 0x6E	; 110
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	90 81       	ld	r25, Z
    1f84:	9e 7f       	andi	r25, 0xFE	; 254
    1f86:	90 83       	st	Z, r25
    1f88:	16 bc       	out	0x26, r1	; 38
	// Initialize UART
	UART_INIT();
    1f8a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1f8e:	93 e3       	ldi	r25, 0x33	; 51
    1f90:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1f94:	e1 ec       	ldi	r30, 0xC1	; 193
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	98 e0       	ldi	r25, 0x08	; 8
    1f9a:	90 83       	st	Z, r25
    1f9c:	96 e0       	ldi	r25, 0x06	; 6
    1f9e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UART_TX_INTERRUPT_ENABLE();
    1fa2:	90 81       	ld	r25, Z
    1fa4:	90 62       	ori	r25, 0x20	; 32
    1fa6:	90 83       	st	Z, r25
	// Initialize RTC IRQ input INT0
	X1226_IRQ_INIT();
    1fa8:	52 98       	cbi	0x0a, 2	; 10
    1faa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	8d bb       	out	0x1d, r24	; 29
	// Initialize button port
	BTN_INIT();
    1fb2:	3a 98       	cbi	0x07, 2	; 7
	// Initialize encoder port
	ENC_INIT();
    1fb4:	87 b1       	in	r24, 0x07	; 7
    1fb6:	8c 7f       	andi	r24, 0xFC	; 252
    1fb8:	87 b9       	out	0x07, r24	; 7
	// Initialize red led port
	LED_RED_INIT();
    1fba:	22 9a       	sbi	0x04, 2	; 4
    1fbc:	2a 98       	cbi	0x05, 2	; 5
	// Initialize yellow port
	LED_YELLOW_INIT();
    1fbe:	21 9a       	sbi	0x04, 1	; 4
    1fc0:	29 98       	cbi	0x05, 1	; 5
	// Initialize green led port
	LED_GRN_INIT();
    1fc2:	20 9a       	sbi	0x04, 0	; 4
    1fc4:	28 98       	cbi	0x05, 0	; 5
	// Initialize LCD back light control port
	BL_CTRL_INIT();
    1fc6:	55 9a       	sbi	0x0a, 5	; 10
    1fc8:	5d 9a       	sbi	0x0b, 5	; 11
    1fca:	08 95       	ret

00001fcc <main>:

//------------------------------ Entry point
int main(void)
{
	// Main initialize
	InitGPIO();
    1fcc:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <InitGPIO>
	InitMessages();
    1fd0:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <InitMessages>
	InitTimers();
    1fd4:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <InitTimers>
	I2C_Init();
    1fd8:	0e 94 17 03 	call	0x62e	; 0x62e <I2C_Init>
	// FSMs initialize
	FSM_SYSTEM_Init();
    1fdc:	0e 94 bd 0b 	call	0x177a	; 0x177a <FSM_SYSTEM_Init>
	FSM_UART_Init();
    1fe0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <FSM_UART_Init>
	FSM_PCF8574_Init();
    1fe4:	0e 94 de 09 	call	0x13bc	; 0x13bc <FSM_PCF8574_Init>
	FSM_LCD_Init();
    1fe8:	0e 94 b3 05 	call	0xb66	; 0xb66 <FSM_LCD_Init>
	FSM_X1226_Init();
    1fec:	0e 94 83 0c 	call	0x1906	; 0x1906 <FSM_X1226_Init>
	FSM_MHZ19B_Init();
    1ff0:	0e 94 18 09 	call	0x1230	; 0x1230 <FSM_MHZ19B_Init>
	FSM_DHT_Init();
    1ff4:	0e 94 b1 04 	call	0x962	; 0x962 <FSM_DHT_Init>
	FSM_BUTTON_Init();
    1ff8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <FSM_BUTTON_Init>
	FSM_ENC_Init();
    1ffc:	0e 94 57 05 	call	0xaae	; 0xaae <FSM_ENC_Init>
	FSM_LEDS_Init();
    2000:	0e 94 4b 08 	call	0x1096	; 0x1096 <FSM_LEDS_Init>
	FSM_BUZZER_Init();
    2004:	0e 94 ab 04 	call	0x956	; 0x956 <FSM_BUZZER_Init>

	// Enable global interrupts
	sei();
    2008:	78 94       	sei

	// Main loop
    while (1) {
		// Processing software timers queue
		ProcessTimers(&systick);
    200a:	87 ee       	ldi	r24, 0xE7	; 231
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <ProcessTimers>
		// Processing FSMs
		FSM_SYSTEM_Process();
    2012:	0e 94 c3 0b 	call	0x1786	; 0x1786 <FSM_SYSTEM_Process>
		FSM_UART_Process();
    2016:	0e 94 80 0c 	call	0x1900	; 0x1900 <FSM_UART_Process>
		FSM_PCF8574_Process();
    201a:	0e 94 0f 0a 	call	0x141e	; 0x141e <FSM_PCF8574_Process>
		FSM_LCD_Process();
    201e:	0e 94 3c 06 	call	0xc78	; 0xc78 <FSM_LCD_Process>
		FSM_X1226_Process();
    2022:	0e 94 89 0c 	call	0x1912	; 0x1912 <FSM_X1226_Process>
		FSM_DHT_Process();
    2026:	0e 94 ba 04 	call	0x974	; 0x974 <FSM_DHT_Process>
		FSM_MHZ19B_Process();
    202a:	0e 94 2c 09 	call	0x1258	; 0x1258 <FSM_MHZ19B_Process>
		FSM_BUTTON_Process();
    202e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <FSM_BUTTON_Process>
		FSM_ENC_Process();
    2032:	0e 94 5c 05 	call	0xab8	; 0xab8 <FSM_ENC_Process>
		FSM_LEDS_Process();
    2036:	0e 94 50 08 	call	0x10a0	; 0x10a0 <FSM_LEDS_Process>
		FSM_BUZZER_Process();
    203a:	0e 94 ae 04 	call	0x95c	; 0x95c <FSM_BUZZER_Process>

		// Processing messages queue
		ProcessMessages();
    203e:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <ProcessMessages>
    2042:	e3 cf       	rjmp	.-58     	; 0x200a <main+0x3e>

00002044 <MENU_Change>:



void MENU_Change(menu_item_t* new_menu)
{
	if((void*)new_menu == (void*)&NULL_ENTRY)
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	8b 3a       	cpi	r24, 0xAB	; 171
    2048:	92 07       	cpc	r25, r18
    204a:	39 f0       	breq	.+14     	; 0x205a <MENU_Change+0x16>
		return;
	selected_menu_item = new_menu;
    204c:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <selected_menu_item+0x1>
    2050:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <selected_menu_item>
	device.flags._menu_changed = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <device+0x5>
    205a:	08 95       	ret

0000205c <MENU_Start>:
}

void MENU_Start(void)
{
	selected_menu_item = (menu_item_t *)&m_s1i1;
    205c:	88 ea       	ldi	r24, 0xA8	; 168
    205e:	92 e0       	ldi	r25, 0x02	; 2
    2060:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <selected_menu_item+0x1>
    2064:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <selected_menu_item>
	device.flags._menu_changed = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <device+0x5>
    206e:	08 95       	ret

00002070 <MENU_GetMenuTextByShift>:
char *MENU_GetMenuTextByShift(int8_t shift)
{
	int8_t i;
	menu_item_t *temp_menu_item;

	if ((void*)selected_menu_item == (void*)&NULL_ENTRY)
    2070:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <selected_menu_item>
    2074:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <selected_menu_item+0x1>
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	eb 3a       	cpi	r30, 0xAB	; 171
    207c:	f9 07       	cpc	r31, r25
    207e:	f9 f0       	breq	.+62     	; 0x20be <MENU_GetMenuTextByShift+0x4e>
		return (char *)strNULL;

	i = shift;
	temp_menu_item = selected_menu_item;
	if (i>0) {
    2080:	18 16       	cp	r1, r24
    2082:	9c f4       	brge	.+38     	; 0x20aa <MENU_GetMenuTextByShift+0x3a>
		while( i!=0 ) {
			if ((void*)temp_menu_item != (void*)&NULL_ENTRY) {
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	eb 3a       	cpi	r30, 0xAB	; 171
    2088:	f9 07       	cpc	r31, r25
    208a:	19 f0       	breq	.+6      	; 0x2092 <MENU_GetMenuTextByShift+0x22>
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Next);
    208c:	25 91       	lpm	r18, Z+
    208e:	34 91       	lpm	r19, Z
    2090:	f9 01       	movw	r30, r18
    2092:	81 50       	subi	r24, 0x01	; 1
		return (char *)strNULL;

	i = shift;
	temp_menu_item = selected_menu_item;
	if (i>0) {
		while( i!=0 ) {
    2094:	b9 f7       	brne	.-18     	; 0x2084 <MENU_GetMenuTextByShift+0x14>
    2096:	0b c0       	rjmp	.+22     	; 0x20ae <MENU_GetMenuTextByShift+0x3e>
			}
			i--;
		}
	} else {
		while( i!=0 ) {
			if ((void*)temp_menu_item != (void*)&NULL_ENTRY) {
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	eb 3a       	cpi	r30, 0xAB	; 171
    209c:	f9 07       	cpc	r31, r25
    209e:	21 f0       	breq	.+8      	; 0x20a8 <MENU_GetMenuTextByShift+0x38>
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Previous);
    20a0:	32 96       	adiw	r30, 0x02	; 2
    20a2:	25 91       	lpm	r18, Z+
    20a4:	34 91       	lpm	r19, Z
    20a6:	f9 01       	movw	r30, r18
    20a8:	8f 5f       	subi	r24, 0xFF	; 255
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Next);
			}
			i--;
		}
	} else {
		while( i!=0 ) {
    20aa:	81 11       	cpse	r24, r1
    20ac:	f5 cf       	rjmp	.-22     	; 0x2098 <MENU_GetMenuTextByShift+0x28>
			}
			i++;
		}
	}

	if ((void*)temp_menu_item == (void*)&NULL_ENTRY) {
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	eb 3a       	cpi	r30, 0xAB	; 171
    20b2:	f8 07       	cpc	r31, r24
    20b4:	21 f0       	breq	.+8      	; 0x20be <MENU_GetMenuTextByShift+0x4e>
		return (char *)strNULL;
	} else {
		return ((char *)pgm_read_word(&temp_menu_item->Text));
    20b6:	39 96       	adiw	r30, 0x09	; 9
    20b8:	85 91       	lpm	r24, Z+
    20ba:	94 91       	lpm	r25, Z
    20bc:	08 95       	ret
{
	int8_t i;
	menu_item_t *temp_menu_item;

	if ((void*)selected_menu_item == (void*)&NULL_ENTRY)
		return (char *)strNULL;
    20be:	83 eb       	ldi	r24, 0xB3	; 179
    20c0:	92 e0       	ldi	r25, 0x02	; 2
	if ((void*)temp_menu_item == (void*)&NULL_ENTRY) {
		return (char *)strNULL;
	} else {
		return ((char *)pgm_read_word(&temp_menu_item->Text));
	}
}
    20c2:	08 95       	ret

000020c4 <MENU_GetChildMenuSymbolByShift>:
char *MENU_GetChildMenuSymbolByShift(int8_t shift)
{
	int8_t i;
	menu_item_t *temp_menu_item;

	if ((void*)selected_menu_item == (void*)&NULL_ENTRY)
    20c4:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <selected_menu_item>
    20c8:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <selected_menu_item+0x1>
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	eb 3a       	cpi	r30, 0xAB	; 171
    20d0:	f2 07       	cpc	r31, r18
    20d2:	21 f1       	breq	.+72     	; 0x211c <MENU_GetChildMenuSymbolByShift+0x58>
		return (char *)strNULL;

	i = shift;
	temp_menu_item = selected_menu_item;
	if (i>0) {
    20d4:	18 16       	cp	r1, r24
    20d6:	9c f4       	brge	.+38     	; 0x20fe <MENU_GetChildMenuSymbolByShift+0x3a>
		while( i!=0 ) {
			if ((void*)temp_menu_item != (void*)&NULL_ENTRY) {
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	eb 3a       	cpi	r30, 0xAB	; 171
    20dc:	f9 07       	cpc	r31, r25
    20de:	19 f0       	breq	.+6      	; 0x20e6 <MENU_GetChildMenuSymbolByShift+0x22>
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Next);
    20e0:	25 91       	lpm	r18, Z+
    20e2:	34 91       	lpm	r19, Z
    20e4:	f9 01       	movw	r30, r18
    20e6:	81 50       	subi	r24, 0x01	; 1
		return (char *)strNULL;

	i = shift;
	temp_menu_item = selected_menu_item;
	if (i>0) {
		while( i!=0 ) {
    20e8:	b9 f7       	brne	.-18     	; 0x20d8 <MENU_GetChildMenuSymbolByShift+0x14>
    20ea:	0b c0       	rjmp	.+22     	; 0x2102 <MENU_GetChildMenuSymbolByShift+0x3e>
			}
			i--;
		}
	} else {
		while( i!=0 ) {
			if ((void*)temp_menu_item != (void*)&NULL_ENTRY) {
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	eb 3a       	cpi	r30, 0xAB	; 171
    20f0:	f2 07       	cpc	r31, r18
    20f2:	21 f0       	breq	.+8      	; 0x20fc <MENU_GetChildMenuSymbolByShift+0x38>
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Previous);
    20f4:	32 96       	adiw	r30, 0x02	; 2
    20f6:	25 91       	lpm	r18, Z+
    20f8:	34 91       	lpm	r19, Z
    20fa:	f9 01       	movw	r30, r18
    20fc:	8f 5f       	subi	r24, 0xFF	; 255
				temp_menu_item = (menu_item_t *)pgm_read_word(&temp_menu_item->Next);
			}
			i--;
		}
	} else {
		while( i!=0 ) {
    20fe:	81 11       	cpse	r24, r1
    2100:	f5 cf       	rjmp	.-22     	; 0x20ec <MENU_GetChildMenuSymbolByShift+0x28>
			}
			i++;
		}
	}

	if ((void*)temp_menu_item == (void*)&NULL_ENTRY) {
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	eb 3a       	cpi	r30, 0xAB	; 171
    2106:	f8 07       	cpc	r31, r24
    2108:	49 f0       	breq	.+18     	; 0x211c <MENU_GetChildMenuSymbolByShift+0x58>
		return (char *)strNULL;
	} else {
		if((char *)pgm_read_word(&temp_menu_item->Child) != (void *)&NULL_ENTRY) {
    210a:	36 96       	adiw	r30, 0x06	; 6
    210c:	85 91       	lpm	r24, Z+
    210e:	94 91       	lpm	r25, Z
    2110:	8b 5a       	subi	r24, 0xAB	; 171
    2112:	90 40       	sbci	r25, 0x00	; 0
    2114:	19 f0       	breq	.+6      	; 0x211c <MENU_GetChildMenuSymbolByShift+0x58>
			return (char *)LNG_SMB_ANGLE_BRACKET_RIGHT;
    2116:	85 e8       	ldi	r24, 0x85	; 133
    2118:	93 e0       	ldi	r25, 0x03	; 3
    211a:	08 95       	ret
		} else {
			return (char *)strNULL;
    211c:	83 eb       	ldi	r24, 0xB3	; 179
    211e:	92 e0       	ldi	r25, 0x02	; 2
		}
	}
    2120:	08 95       	ret

00002122 <__udivmodqi4>:
    2122:	99 1b       	sub	r25, r25
    2124:	79 e0       	ldi	r23, 0x09	; 9
    2126:	04 c0       	rjmp	.+8      	; 0x2130 <__udivmodqi4_ep>

00002128 <__udivmodqi4_loop>:
    2128:	99 1f       	adc	r25, r25
    212a:	96 17       	cp	r25, r22
    212c:	08 f0       	brcs	.+2      	; 0x2130 <__udivmodqi4_ep>
    212e:	96 1b       	sub	r25, r22

00002130 <__udivmodqi4_ep>:
    2130:	88 1f       	adc	r24, r24
    2132:	7a 95       	dec	r23
    2134:	c9 f7       	brne	.-14     	; 0x2128 <__udivmodqi4_loop>
    2136:	80 95       	com	r24
    2138:	08 95       	ret

0000213a <__udivmodhi4>:
    213a:	aa 1b       	sub	r26, r26
    213c:	bb 1b       	sub	r27, r27
    213e:	51 e1       	ldi	r21, 0x11	; 17
    2140:	07 c0       	rjmp	.+14     	; 0x2150 <__udivmodhi4_ep>

00002142 <__udivmodhi4_loop>:
    2142:	aa 1f       	adc	r26, r26
    2144:	bb 1f       	adc	r27, r27
    2146:	a6 17       	cp	r26, r22
    2148:	b7 07       	cpc	r27, r23
    214a:	10 f0       	brcs	.+4      	; 0x2150 <__udivmodhi4_ep>
    214c:	a6 1b       	sub	r26, r22
    214e:	b7 0b       	sbc	r27, r23

00002150 <__udivmodhi4_ep>:
    2150:	88 1f       	adc	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	5a 95       	dec	r21
    2156:	a9 f7       	brne	.-22     	; 0x2142 <__udivmodhi4_loop>
    2158:	80 95       	com	r24
    215a:	90 95       	com	r25
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	08 95       	ret

00002162 <__tablejump2__>:
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	05 90       	lpm	r0, Z+
    2168:	f4 91       	lpm	r31, Z
    216a:	e0 2d       	mov	r30, r0
    216c:	09 94       	ijmp

0000216e <_exit>:
    216e:	f8 94       	cli

00002170 <__stop_program>:
    2170:	ff cf       	rjmp	.-2      	; 0x2170 <__stop_program>
